/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$Services$Commands$DefaultCommandDispatcher = {
    fullname: "Neptuo.Services.Commands.DefaultCommandDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Services.Commands",
    interfaceNames: ["Neptuo.Services.Commands.ICommandHandlerCollection", "Neptuo.Services.Commands.ICommandDispatcher"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, Neptuo.Services.Commands.Internals.DefaultCommandHandlerDefinition.ctor);
            System.Object.ctor.call(this);
        },
        Add$1: function (TCommand, handler){
            Neptuo.Ensure.NotNull$$Object$$String(handler, "handler");
            var commandType = Typeof(TCommand);
            this.storage.set_Item$$TKey(commandType, new Neptuo.Services.Commands.Internals.DefaultCommandHandlerDefinition.ctor(handler, $CreateAnonymousDelegate(this, function (command){
                return handler.HandleAsync(Cast(command, TCommand));
            })));
            return this;
        },
        TryGet$1: function (TCommand, handler){
            var commandType = Typeof(TCommand);
            var definition;
            if ((function (){
                var $1 = {
                    Value: definition
                };
                var $res = this.storage.TryGetValue(commandType, $1);
                definition = $1.Value;
                return $res;
            }).call(this)){
                handler.Value = Cast(definition.get_CommandHandler(), Neptuo.Services.Commands.Handlers.ICommandHandler$1.ctor);
                return true;
            }
            handler.Value = null;
            return false;
        },
        HandleAsync$1: function (TCommand, command){
            Neptuo.Ensure.NotNull$$Object$$String(command, "command");
            var commandType = command.GetType();
            var definition;
            if ((function (){
                var $1 = {
                    Value: definition
                };
                var $res = this.storage.TryGetValue(commandType, $1);
                definition = $1.Value;
                return $res;
            }).call(this))
                return definition.HandleAsync(command);
            throw $CreateException(Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(Neptuo.Ensure.Exception, "command", "There isn\'t command handler for command of type \'{0}\'.", commandType.get_FullName()), new Error());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Services$Commands$DefaultCommandDispatcher);
var Neptuo$Services$Commands$DependencyCommandDispatcher = {
    fullname: "Neptuo.Services.Commands.DependencyCommandDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Services.Commands",
    interfaceNames: ["Neptuo.Services.Commands.ICommandDispatcher"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyProvider){
            this.dependencyProvider = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            this.dependencyProvider = dependencyProvider;
        },
        HandleAsync$1: function (TCommand, command){
            Neptuo.Ensure.NotNull$$Object$$String(command, "command");
            var commandHandler = Neptuo.Activators._DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.Services.Commands.Handlers.ICommandHandler$1.ctor, this.dependencyProvider);
            return commandHandler.HandleAsync(command);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Activators.IDependencyProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Services$Commands$DependencyCommandDispatcher);
var Neptuo$Services$Commands$Handlers$ICommandHandler$1 = {
    fullname: "Neptuo.Services.Commands.Handlers.ICommandHandler$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Services.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Services$Commands$Handlers$ICommandHandler$1);
var Neptuo$Services$Commands$ICommand = {
    fullname: "Neptuo.Services.Commands.ICommand",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Services.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Services$Commands$ICommand);
var Neptuo$Services$Commands$ICommandDispatcher = {
    fullname: "Neptuo.Services.Commands.ICommandDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Services.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Services$Commands$ICommandDispatcher);
var Neptuo$Services$Commands$ICommandHandlerCollection = {
    fullname: "Neptuo.Services.Commands.ICommandHandlerCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Services.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Services$Commands$ICommandHandlerCollection);
var Neptuo$Services$Commands$Internals$DefaultCommandHandlerDefinition = {
    fullname: "Neptuo.Services.Commands.Internals.DefaultCommandHandlerDefinition",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Services.Commands",
    Kind: "Class",
    definition: {
        ctor: function (commandHandler, handleMethod){
            this._CommandHandler = null;
            this._HandleMethod = null;
            System.Object.ctor.call(this);
            this.set_CommandHandler(commandHandler);
            this.set_HandleMethod(handleMethod);
        },
        CommandHandler$$: "System.Object",
        get_CommandHandler: function (){
            return this._CommandHandler;
        },
        set_CommandHandler: function (value){
            this._CommandHandler = value;
        },
        HandleMethod$$: "System.Func`2[[System.Object],[System.Threading.Tasks.Task]]",
        get_HandleMethod: function (){
            return this._HandleMethod;
        },
        set_HandleMethod: function (value){
            this._HandleMethod = value;
        },
        HandleAsync: function (command){
            return this.get_HandleMethod()(command);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object", "System.Func"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Services$Commands$Internals$DefaultCommandHandlerDefinition);
var Neptuo$Services$Commands$VersionInfo = {
    fullname: "Neptuo.Services.Commands.VersionInfo",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Services.Commands.VersionInfo.Version = "1.0.0";
        },
        GetVersion: function (){
            return new System.Version.ctor$$String("1.0.0");
        }
    },
    assemblyName: "Neptuo.Services.Commands",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Services$Commands$VersionInfo);

