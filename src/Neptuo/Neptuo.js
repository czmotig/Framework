/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

function $CombineDelegates(del1,del2)
{
    if(del1 == null)
        return del2;
    if(del2 == null)
        return del1;
    var del=$CreateMulticastDelegateFunction();
    del.delegates = [];
    if(del1.isMulticastDelegate)
    {
        for(var i=0;i < del1.delegates.length;i++)
            del.delegates.push(del1.delegates[i]);
    }
    else
    {
        del.delegates.push(del1);
    }
    if(del2.isMulticastDelegate)
    {
        for(var i=0;i < del2.delegates.length;i++)
            del.delegates.push(del2.delegates[i]);
    }
    else
    {
        del.delegates.push(del2);
    }
    return del;
};

function $CreateMulticastDelegateFunction()
{
    var del2 = null;
    
    var del=function()
    {
        var x=undefined;
        for(var i=0;i < del2.delegates.length;i++)
        {
            var del3=del2.delegates[i];
            x = del3.apply(null,arguments);
        }
        return x;
    };
    del.isMulticastDelegate = true;
    del2 = del;   
    
    return del;
};

function $RemoveDelegate(delOriginal,delToRemove)
{
    if(delToRemove == null || delOriginal == null)
        return delOriginal;
    if(delOriginal.isMulticastDelegate)
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("Multicast to multicast delegate removal is not implemented yet");
        var del=$CreateMulticastDelegateFunction();
        for(var i=0;i < delOriginal.delegates.length;i++)
        {
            var del2=delOriginal.delegates[i];
            if(del2 != delToRemove)
            {
                if(del.delegates == null)
                    del.delegates = [];
                del.delegates.push(del2);
            }
        }
        if(del.delegates == null)
            return null;
        if(del.delegates.length == 1)
            return del.delegates[0];
        return del;
    }
    else
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("single to multicast delegate removal is not supported");
        if(delOriginal == delToRemove)
            return null;
        return delOriginal;
    }
};

if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}

if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$Activators$DependencyLifetime = {
    fullname: "Neptuo.Activators.DependencyLifetime",
    baseTypeName: "System.ValueType",
    staticDefinition: {
        cctor: function (){
            Neptuo.Activators.DependencyLifetime.RootScopeName = "Root";
            Neptuo.Activators.DependencyLifetime.Transient = new Neptuo.Activators.DependencyLifetime.ctor$$Boolean$$String(false, null);
            Neptuo.Activators.DependencyLifetime.AnyScope = new Neptuo.Activators.DependencyLifetime.ctor$$Boolean$$String(true, null);
        },
        NamedScope: function (name){
            return new Neptuo.Activators.DependencyLifetime.ctor$$Boolean$$String(true, name);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Struct",
    definition: {
        ctor$$Boolean$$String: function (isScoped, name){
            this.IsTransient = false;
            this.IsScoped = false;
            this.IsNamed = false;
            this.Name = null;
            System.ValueType.ctor.call(this);
            this.IsTransient = !isScoped;
            this.IsScoped = isScoped;
            this.IsNamed = !System.String.IsNullOrEmpty(name);
            this.Name = name;
        },
        ctor: function (){
            this.IsTransient = false;
            this.IsScoped = false;
            this.IsNamed = false;
            this.Name = null;
            System.ValueType.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor$$Boolean$$String",
        parameters: ["System.Boolean", "System.String"]
    }, {
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Activators$DependencyLifetime);
var Neptuo$Activators$_DependencyContainerExtensions = {
    fullname: "Neptuo.Activators._DependencyContainerExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Map$$IDependencyContainer$$Type: function (dependencyContainer, requiredType){
            return new Neptuo.Activators._DependencyContainerExtensions.DependencyRegistration.ctor(dependencyContainer, requiredType);
        },
        Map$1$$IDependencyContainer: function (TRequired, dependencyContainer){
            return Neptuo.Activators._DependencyContainerExtensions.Map$$IDependencyContainer$$Type(dependencyContainer, Typeof(TRequired));
        },
        InTransient: function (model){
            Neptuo.Ensure.NotNull$$Object$$String(model, "model");
            return model.In(Neptuo.Activators.DependencyLifetime.Transient);
        },
        InAnyScope: function (model){
            Neptuo.Ensure.NotNull$$Object$$String(model, "model");
            return model.In(Neptuo.Activators.DependencyLifetime.AnyScope);
        },
        InNamedScope: function (model, scopeName){
            Neptuo.Ensure.NotNull$$Object$$String(model, "model");
            return model.In(Neptuo.Activators.DependencyLifetime.NamedScope(scopeName));
        },
        ToType$$IDependencyTargetMapping$$Type: function (model, targetType){
            Neptuo.Ensure.NotNull$$Object$$String(model, "model");
            return model.To(targetType);
        },
        ToType$1$$IDependencyTargetMapping: function (TTarget, model){
            return Neptuo.Activators._DependencyContainerExtensions.ToType$$IDependencyTargetMapping$$Type(model, Typeof(TTarget));
        },
        ToActivator$1: function (TTarget, model, activator){
            Neptuo.Ensure.NotNull$$Object$$String(model, "model");
            return model.To(activator);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Activators$_DependencyContainerExtensions);
var Neptuo$Activators$_DependencyContainerExtensions$IDependencyScopeMapping = {
    fullname: "Neptuo.Activators._DependencyContainerExtensions.IDependencyScopeMapping",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Activators$_DependencyContainerExtensions$IDependencyScopeMapping);
var Neptuo$Activators$_DependencyContainerExtensions$IDependencyTargetMapping = {
    fullname: "Neptuo.Activators._DependencyContainerExtensions.IDependencyTargetMapping",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Activators$_DependencyContainerExtensions$IDependencyTargetMapping);
var Neptuo$Activators$_DependencyContainerExtensions$DependencyRegistration = {
    fullname: "Neptuo.Activators._DependencyContainerExtensions.DependencyRegistration",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Activators._DependencyContainerExtensions.IDependencyScopeMapping", "Neptuo.Activators._DependencyContainerExtensions.IDependencyTargetMapping"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyContainer, requiredType){
            this.dependencyContainer = null;
            this.requiredType = null;
            this.lifetime = new Neptuo.Activators.DependencyLifetime.ctor();
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(dependencyContainer, "dependencyContainer");
            this.dependencyContainer = dependencyContainer;
            this.requiredType = requiredType;
        },
        In: function (lifetime){
            this.lifetime = lifetime;
            return this;
        },
        InCurrentScope: function (){
            return this.In(Neptuo.Activators.DependencyLifetime.NamedScope(this.dependencyContainer.get_ScopeName()));
        },
        To: function (target){
            return this.dependencyContainer.Map(this.requiredType, this.lifetime, target);
        },
        ToSelf: function (){
            return this.To(this.requiredType);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Activators.IDependencyContainer", "System.Type"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Activators$_DependencyContainerExtensions$DependencyRegistration);
var Neptuo$Collections$Generic$_DictionaryExtensions = {
    fullname: "Neptuo.Collections.Generic._DictionaryExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        AddRange$2: function (TKey, TValue, target, source){
            var $it1 = source.GetEnumerator();
            while ($it1.MoveNext()){
                var item = $it1.get_Current();
                target.set_Item$$TKey(item.get_Key(), item.get_Value());
            }
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Collections$Generic$_DictionaryExtensions);
var Neptuo$Collections$ObjectModel$IITemsSource = {
    fullname: "Neptuo.Collections.ObjectModel.IITemsSource",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["System.Collections.IEnumerable"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Collections$ObjectModel$IITemsSource);
var Neptuo$Collections$Generic$ConcurrentAwareDictionaryActivator$2 = {
    fullname: "Neptuo.Collections.Generic.ConcurrentAwareDictionaryActivator$2",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (TKey, TValue){
            Neptuo.Collections.Generic.ConcurrentAwareDictionaryActivator$2.instance = null;
            Neptuo.Collections.Generic.ConcurrentAwareDictionaryActivator$2.instanceLock = new System.Object.ctor();
        },
        Instance$$: "Neptuo.Collections.Generic.ConcurrentAwareDictionaryActivator`2[[`0],[`1]]",
        get_Instance: function (){
            if (Neptuo.Collections.Generic.ConcurrentAwareDictionaryActivator$2.instance == null){
                if (Neptuo.Collections.Generic.ConcurrentAwareDictionaryActivator$2.instance == null)
                    Neptuo.Collections.Generic.ConcurrentAwareDictionaryActivator$2.instance = new Neptuo.Collections.Generic.ConcurrentAwareDictionaryActivator$2.ctor(this.TKey, this.TValue);
            }
            return Neptuo.Collections.Generic.ConcurrentAwareDictionaryActivator$2.instance;
        }
    },
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Activators.IActivator$1"],
    Kind: "Class",
    definition: {
        ctor: function (TKey, TValue){
            this.TKey = TKey;
            this.TValue = TValue;
            this.isConcurrent = false;
            Neptuo.Collections.Generic.ConcurrentAwareDictionaryActivator$2.ctor$$Boolean.call(this, this.TKey, this.TValue, Neptuo.Collections._EnvironmentExtensions.WithIsConcurrentApplication(Neptuo.Engine.get_Environment()));
        },
        ctor$$Boolean: function (TKey, TValue, isConcurrent){
            this.TKey = TKey;
            this.TValue = TValue;
            this.isConcurrent = false;
            System.Object.ctor.call(this);
            this.isConcurrent = isConcurrent;
        },
        Create: function (){
            if (this.isConcurrent)
                return new System.Collections.Generic.Dictionary$2.ctor(this.TKey, this.TValue);
            else
                return new System.Collections.Concurrent.ConcurrentDictionary$2.ctor(this.TKey, this.TValue);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Boolean",
        parameters: ["System.Boolean"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Collections$Generic$ConcurrentAwareDictionaryActivator$2);
var Neptuo$Collections$Specialized$IKeyValueCollection = {
    fullname: "Neptuo.Collections.Specialized.IKeyValueCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Collections$Specialized$IKeyValueCollection);
var Neptuo$Collections$Specialized$IReadOnlyKeyValueCollection = {
    fullname: "Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Collections$Specialized$IReadOnlyKeyValueCollection);
var Neptuo$Collections$Specialized$KeyValueCollection = {
    fullname: "Neptuo.Collections.Specialized.KeyValueCollection",
    baseTypeName: "System.Collections.Generic.Dictionary$2",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Collections.Specialized.IKeyValueCollection"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.parentCollection = null;
            this._IsReadOnly = false;
            System.Collections.Generic.Dictionary$2.ctor.call(this, System.String.ctor, System.Object.ctor);
        },
        IsReadOnly$$: "System.Boolean",
        get_IsReadOnly: function (){
            return this._IsReadOnly;
        },
        set_IsReadOnly: function (value){
            this._IsReadOnly = value;
        },
        Keys$$: "System.Collections.Generic.IEnumerable`1[[System.String]]",
        get_Keys: function (){
            return System.Collections.Generic.Dictionary$2.commonPrototype.get_Keys.call(this);
        },
        ctor$$Int32: function (capacity){
            this.parentCollection = null;
            this._IsReadOnly = false;
            System.Collections.Generic.Dictionary$2.ctor$$Int32.call(this, System.String.ctor, System.Object.ctor, capacity);
        },
        ctor$$IEqualityComparer$1$String: function (comparer){
            this.parentCollection = null;
            this._IsReadOnly = false;
            System.Collections.Generic.Dictionary$2.ctor$$IEqualityComparer$1.call(this, System.String.ctor, System.Object.ctor, comparer);
        },
        ctor$$IDictionary$2$String$Object: function (source){
            this.parentCollection = null;
            this._IsReadOnly = false;
            System.Collections.Generic.Dictionary$2.ctor$$IDictionary$2.call(this, System.String.ctor, System.Object.ctor, source);
        },
        ctor$$IReadOnlyKeyValueCollection: function (parentCollection){
            this.parentCollection = null;
            this._IsReadOnly = false;
            System.Collections.Generic.Dictionary$2.ctor.call(this, System.String.ctor, System.Object.ctor);
            Neptuo.Ensure.NotNull$$Object$$String(parentCollection, "parentCollection");
            this.parentCollection = parentCollection;
        },
        ctor$$NameValueCollection: function (collection){
            this.parentCollection = null;
            this._IsReadOnly = false;
            System.Collections.Generic.Dictionary$2.ctor.call(this, System.String.ctor, System.Object.ctor);
            Neptuo.Ensure.NotNull$$Object$$String(collection, "collection");
            var $it2 = collection.get_AllKeys().GetEnumerator();
            while ($it2.MoveNext()){
                var key = $it2.get_Current();
                this.Add(key, collection.get_Item$$String(key));
            }
        },
        Set: function (key, value){
            if (this.get_IsReadOnly())
                throw $CreateException(Neptuo._EnsureSystemExtensions.InvalidOperation(Neptuo.Ensure.Exception, "Collection is in read-only mode."), new Error());
            Neptuo.Ensure.NotNull$$Object$$String(key, "key");
            this.set_Item$$TKey(key, value);
            return this;
        },
        TryGet$1: function (T, key, value){
            Neptuo.Ensure.NotNull$$Object$$String(key, "key");
            var sourceValue;
            if ((function (){
                var $1 = {
                    Value: sourceValue
                };
                var $res = this.TryGetValue(key, $1);
                sourceValue = $1.Value;
                return $res;
            }).call(this) && sourceValue != null)
                return this.ConvertTo$1(T, sourceValue, value);
            if (this.parentCollection != null){
                if (this.parentCollection.TryGet$1(T, key, value))
                    return true;
            }
            return this.TryGetDefault$1(T, key, value);
        },
        TryGetDefault$1: function (T, key, value){
            value.Value = Default(T);
            return false;
        },
        ConvertTo$1: function (T, sourceValue, value){
            if (Is(sourceValue, T)){
                value.Value = Cast(sourceValue, T);
                return true;
            }
            var targetValue;
            if ((function (){
                var $1 = {
                    Value: targetValue
                };
                var $res = Neptuo.Converts.Try$$Type$$Type$$Object$$Object(sourceValue.GetType(), Typeof(T), sourceValue, $1);
                targetValue = $1.Value;
                return $res;
            }).call(this)){
                value.Value = Cast(targetValue, T);
                return true;
            }
            value.Value = Default(T);
            return false;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Int32",
        parameters: ["System.Int32"]
    }, {
        name: "ctor$$IEqualityComparer",
        parameters: ["System.Collections.Generic.IEqualityComparer"]
    }, {
        name: "ctor$$IDictionary",
        parameters: ["System.Collections.Generic.IDictionary"]
    }, {
        name: "ctor$$IReadOnlyKeyValueCollection",
        parameters: ["Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection"]
    }, {
        name: "ctor$$NameValueCollection",
        parameters: ["System.Collections.Specialized.NameValueCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Collections$Specialized$KeyValueCollection);
var Neptuo$Collections$Specialized$NameValueDictionary = {
    fullname: "Neptuo.Collections.Specialized.NameValueDictionary",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["System.Collections.Generic.IDictionary$2"],
    Kind: "Class",
    definition: {
        ctor: function (source){
            this.source = null;
            this.allValues = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(source, "source");
            this.source = source;
        },
        Add$$String$$String: function (key, value){
            Neptuo.Ensure.NotNull$$Object$$String(key, "key");
            if (this.ContainsKey(key))
                throw $CreateException(Neptuo._EnsureArgumentExtensions.Argument(Neptuo.Ensure.Exception, "key", "Collection already contains it with key \'{0}\'.", key), new Error());
            this.source.set_Item$$String(key, value);
        },
        ContainsKey: function (key){
            Neptuo.Ensure.NotNull$$Object$$String(key, "key");
            return System.Linq.Enumerable.Contains$1$$IEnumerable$1$$TSource(System.String.ctor, this.source.get_AllKeys(), key);
        },
        Keys$$: "System.Collections.Generic.ICollection`1[[System.String]]",
        get_Keys: function (){
            return this.source.get_AllKeys();
        },
        Remove$$String: function (key){
            Neptuo.Ensure.NotNull$$Object$$String(key, "key");
            if (this.ContainsKey(key)){
                this.source.Remove(key);
                return true;
            }
            return false;
        },
        TryGetValue: function (key, value){
            if (this.ContainsKey(key)){
                value.Value = this.source.get_Item$$String(key);
                return true;
            }
            value.Value = null;
            return false;
        },
        Values$$: "System.Collections.Generic.ICollection`1[[System.String]]",
        get_Values: function (){
            if (this.allValues == null){
                this.allValues = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                var $it3 = this.source.get_AllKeys().GetEnumerator();
                while ($it3.MoveNext()){
                    var key = $it3.get_Current();
                    this.allValues.Add(this.source.get_Item$$String(key));
                }
            }
            return this.allValues;
        },
        Item$$: "System.String",
        get_Item$$String: function (key){
            Neptuo.Ensure.NotNullOrEmpty(key, "key");
            return this.source.get_Item$$String(key);
        },
        set_Item$$String: function (key, value){
            Neptuo.Ensure.NotNull$$Object$$String(key, "key");
            this.source.set_Item$$String(key, value);
        },
        Add$$KeyValuePair$2$String$String: function (item){
            Neptuo.Ensure.NotNull$$Object$$String(item, "item");
            this.Add$$String$$String(item.get_Key(), item.get_Value());
        },
        Clear: function (){
            this.source.Clear();
        },
        Contains: function (item){
            Neptuo.Ensure.NotNull$$Object$$String(item, "item");
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = this.TryGetValue(item.get_Key(), $1);
                value = $1.Value;
                return $res;
            }).call(this))
                return value == item.get_Value();
            return false;
        },
        CopyTo: function (array, arrayIndex){
            throw $CreateException(Neptuo._EnsureSystemExtensions.NotImplemented(Neptuo.Ensure.Exception, null), new Error());
        },
        Count$$: "System.Int32",
        get_Count: function (){
            return this.source.get_Count();
        },
        IsReadOnly$$: "System.Boolean",
        get_IsReadOnly: function (){
            return false;
        },
        Remove$$KeyValuePair$2$String$String: function (item){
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = this.TryGetValue(item.get_Key(), $1);
                value = $1.Value;
                return $res;
            }).call(this) && value == item.get_Value()){
                this.source.Remove(item.get_Key());
                return true;
            }
            return false;
        },
        GetEnumerator: function (){
            return new Neptuo.Collections.Specialized.NameValueEnumerator.ctor(this.source);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Collections.Specialized.NameValueCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Collections$Specialized$NameValueDictionary);
var Neptuo$Collections$Specialized$NameValueEnumerator = {
    fullname: "Neptuo.Collections.Specialized.NameValueEnumerator",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1"],
    Kind: "Class",
    definition: {
        ctor: function (source){
            this.source = null;
            this.keyEnumerator = null;
            this.currrent = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(source, "source");
            this.source = source;
            this.keyEnumerator = source.get_AllKeys().GetEnumerator();
        },
        GetCurrentKey: function (){
            return Cast(this.keyEnumerator.get_Current(), System.String.ctor);
        },
        Current$$: "System.Collections.Generic.KeyValuePair`2[[System.String],[System.String]]",
        get_Current: function (){
            if (this.currrent == null){
                if (this.keyEnumerator.get_Current() != null)
                    this.currrent = new System.Collections.Generic.KeyValuePair$2.ctor$$TKey$$TValue(System.String.ctor, System.String.ctor, this.GetCurrentKey(), this.source.get_Item$$String(this.GetCurrentKey()));
            }
            return this.currrent.get_Value();
        },
        Dispose: function (){
        },
        MoveNext: function (){
            this.currrent = null;
            return this.keyEnumerator.MoveNext();
        },
        Reset: function (){
            this.currrent = null;
            this.keyEnumerator.Reset();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Collections.Specialized.NameValueCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Collections$Specialized$NameValueEnumerator);
var Neptuo$Collections$Specialized$ProviderKeyValueCollection = {
    fullname: "Neptuo.Collections.Specialized.ProviderKeyValueCollection",
    baseTypeName: "Neptuo.Collections.Specialized.KeyValueCollection",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.providerStorage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            this.listenerStorage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            Neptuo.Collections.Specialized.KeyValueCollection.ctor.call(this);
        },
        ctor$$Int32: function (capacity){
            this.providerStorage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            this.listenerStorage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            Neptuo.Collections.Specialized.KeyValueCollection.ctor$$Int32.call(this, capacity);
        },
        ctor$$IEqualityComparer$1$String: function (comparer){
            this.providerStorage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            this.listenerStorage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            Neptuo.Collections.Specialized.KeyValueCollection.ctor$$IEqualityComparer$1$String.call(this, comparer);
        },
        ctor$$IDictionary$2$String$Object: function (source){
            this.providerStorage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            this.listenerStorage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            Neptuo.Collections.Specialized.KeyValueCollection.ctor$$IDictionary$2$String$Object.call(this, source);
        },
        ctor$$NameValueCollection: function (collection){
            this.providerStorage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            this.listenerStorage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            Neptuo.Collections.Specialized.KeyValueCollection.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(collection, "collection");
            var $it4 = collection.get_AllKeys().GetEnumerator();
            while ($it4.MoveNext()){
                var key = $it4.get_Current();
                this.Add(key, collection.get_Item$$String(key));
            }
        },
        AddProvider$$OutFunc$3$String$Object$Boolean: function (provider){
            Neptuo.Ensure.NotNull$$Object$$String(provider, "provider");
            this.AddProvider$$String$$OutFunc$3$String$Object$Boolean(System.String.Empty, provider);
        },
        AddProvider$$String$$OutFunc$3$String$Object$Boolean: function (key, provider){
            Neptuo.Ensure.NotNull$$Object$$String(key, "key");
            Neptuo.Ensure.NotNull$$Object$$String(provider, "provider");
            var values;
            if (!(function (){
                var $1 = {
                    Value: values
                };
                var $res = this.providerStorage.TryGetValue(key, $1);
                values = $1.Value;
                return $res;
            }).call(this))
                values = (function ($p1){
                    this.providerStorage.set_Item$$TKey(key, $p1);
                    return $p1;
                }).call(this, new System.Collections.Generic.List$1.ctor(Neptuo.OutFunc$3.ctor));
            values.Add(provider);
        },
        AddListener$$Action$2$String$Object: function (listener){
            Neptuo.Ensure.NotNull$$Object$$String(listener, "listener");
            this.AddListener$$String$$Action$2$String$Object(System.String.Empty, listener);
        },
        AddListener$$String$$Action$2$String$Object: function (key, listener){
            Neptuo.Ensure.NotNull$$Object$$String(key, "key");
            Neptuo.Ensure.NotNull$$Object$$String(listener, "listener");
            var values;
            if (!(function (){
                var $1 = {
                    Value: values
                };
                var $res = this.listenerStorage.TryGetValue(key, $1);
                values = $1.Value;
                return $res;
            }).call(this))
                values = (function ($p2){
                    this.listenerStorage.set_Item$$TKey(key, $p2);
                    return $p2;
                }).call(this, new System.Collections.Generic.List$1.ctor(System.Action$2.ctor));
            values.Add(listener);
        },
        Set: function (key, value){
            var result = Neptuo.Collections.Specialized.KeyValueCollection.commonPrototype.Set.call(this, key, value);
            var $it5 = System.Linq.Enumerable.Concat$1(System.Action$2.ctor, this.GetListeners(key), this.GetListeners(System.String.Empty)).GetEnumerator();
            while ($it5.MoveNext()){
                var listener = $it5.get_Current();
                listener(key, value);
            }
            return result;
        },
        TryGetDefault$1: function (T, key, value){
            Neptuo.Ensure.NotNull$$Object$$String(key, "key");
            var $it6 = System.Linq.Enumerable.Concat$1(Neptuo.OutFunc$3.ctor, this.GetProviders(key), this.GetProviders(System.String.Empty)).GetEnumerator();
            while ($it6.MoveNext()){
                var provider = $it6.get_Current();
                var valueBase;
                if ((function (){
                    var $1 = {
                        Value: valueBase
                    };
                    var $res = provider(key, $1);
                    valueBase = $1.Value;
                    return $res;
                }).call(this)){
                    this.Set(key, valueBase);
                    return this.ConvertTo$1(T, valueBase, value);
                }
            }
            return Neptuo.Collections.Specialized.KeyValueCollection.commonPrototype.TryGetDefault$1.call(T, this, key, value);
        },
        GetProviders: function (key){
            var values;
            if (!(function (){
                var $1 = {
                    Value: values
                };
                var $res = this.providerStorage.TryGetValue(key, $1);
                values = $1.Value;
                return $res;
            }).call(this))
                return System.Linq.Enumerable.Empty$1(Neptuo.OutFunc$3.ctor);
            return values;
        },
        GetListeners: function (key){
            var values;
            if (!(function (){
                var $1 = {
                    Value: values
                };
                var $res = this.listenerStorage.TryGetValue(key, $1);
                values = $1.Value;
                return $res;
            }).call(this))
                return System.Linq.Enumerable.Empty$1(System.Action$2.ctor);
            return values;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Int32",
        parameters: ["System.Int32"]
    }, {
        name: "ctor$$IEqualityComparer",
        parameters: ["System.Collections.Generic.IEqualityComparer"]
    }, {
        name: "ctor$$IDictionary",
        parameters: ["System.Collections.Generic.IDictionary"]
    }, {
        name: "ctor$$NameValueCollection",
        parameters: ["System.Collections.Specialized.NameValueCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Collections$Specialized$ProviderKeyValueCollection);
var Neptuo$Collections$Specialized$_ReadOnlyKeyValueCollectionExtensions = {
    fullname: "Neptuo.Collections.Specialized._ReadOnlyKeyValueCollectionExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Get$1$$IReadOnlyKeyValueCollection$$String: function (T, collection, key){
            Neptuo.Ensure.NotNull$$Object$$String(collection, "collection");
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = collection.TryGet$1(T, key, $1);
                value = $1.Value;
                return $res;
            })())
                return value;
            throw $CreateException(Neptuo._EnsureSystemExtensions.InvalidOperation(Neptuo.Ensure.Exception, "Collection doesn\'t contain value of type \'{0}\' with key \'{1}\'.", Typeof(T), key), new Error());
        },
        Get$1$$IReadOnlyKeyValueCollection$$String$$T: function (T, collection, key, defaultValue){
            Neptuo.Ensure.NotNull$$Object$$String(collection, "collection");
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = collection.TryGet$1(T, key, $1);
                value = $1.Value;
                return $res;
            })())
                return value;
            return defaultValue;
        },
        Has: function (collection, key){
            Neptuo.Ensure.NotNull$$Object$$String(collection, "collection");
            Neptuo.Ensure.NotNull$$Object$$String(key, "key");
            if (System.Linq.Enumerable.Contains$1$$IEnumerable$1$$TSource(System.String.ctor, collection.get_Keys(), key))
                return true;
            var value;
            return (function (){
                var $1 = {
                    Value: value
                };
                var $res = collection.TryGet$1(System.Object.ctor, key, $1);
                value = $1.Value;
                return $res;
            })();
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Collections$Specialized$_ReadOnlyKeyValueCollectionExtensions);
var Neptuo$Collections$_EnvironmentExtensions = {
    fullname: "Neptuo.Collections._EnvironmentExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        UseIsConcurrentApplication: function (environment, isConcurrent){
            Neptuo.Ensure.NotNull$$Object$$String(environment, "environment");
            return environment.Use$1(System.Boolean.ctor, isConcurrent, "IsConcurrentApplication");
        },
        WithIsConcurrentApplication: function (environment){
            Neptuo.Ensure.NotNull$$Object$$String(environment, "environment");
            if (!environment.Has$1(System.Boolean.ctor, "IsConcurrentApplication"))
                Neptuo.Collections._EnvironmentExtensions.UseIsConcurrentApplication(environment, true);
            return environment.With$1(System.Boolean.ctor, "IsConcurrentApplication");
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Collections$_EnvironmentExtensions);
var Neptuo$ComponentModel$Converters$CollectionConverter$1 = {
    fullname: "Neptuo.ComponentModel.Converters.CollectionConverter$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.Converters.IConverter$2", "Neptuo.ComponentModel.Converters.IConverter$2", "Neptuo.ComponentModel.Converters.IConverter$2"],
    Kind: "Class",
    definition: {
        ctor: function (TItemTarget, separator, itemConverter){
            this.TItemTarget = TItemTarget;
            this.separator = null;
            this.itemConverter = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNullOrEmpty(separator, "separator");
            Neptuo.Ensure.NotNull$$Object$$String(itemConverter, "itemConverter");
            this.separator = separator;
            this.itemConverter = itemConverter;
        },
        SplitSourceValue: function (sourceValue){
            if (System.String.IsNullOrEmpty(sourceValue))
                return System.Linq.Enumerable.Empty$1(System.String.ctor);
            return sourceValue.Split$$String$Array$$StringSplitOptions([this.separator], 1);
        },
        TryConvertList: function (sourceValue, targetValue){
            var hasError = false;
            var result = new System.Collections.Generic.List$1.ctor(this.TItemTarget);
            var sourceValues = this.SplitSourceValue(sourceValue);
            var $it7 = sourceValues.GetEnumerator();
            while ($it7.MoveNext()){
                var itemValue = $it7.get_Current();
                var item;
                if ((function (){
                    var $1 = {
                        Value: item
                    };
                    var $res = this.itemConverter.TryConvert(itemValue, $1);
                    item = $1.Value;
                    return $res;
                }).call(this)){
                    result.Add(item);
                }
                else {
                    hasError = true;
                    break;
                }
            }
            if (hasError)
                result = null;
            targetValue.Value = result;
            return !hasError;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "Neptuo.ComponentModel.Converters.IConverter"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$Converters$CollectionConverter$1);
var Neptuo$ComponentModel$Converters$_ConverterRepositoryExtensions = {
    fullname: "Neptuo.ComponentModel.Converters._ConverterRepositoryExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Add$2: function (TSource, TTarget, repository, converter){
            Neptuo.Ensure.NotNull$$Object$$String(repository, "repository");
            repository.Add(Typeof(TSource), Typeof(TTarget), converter);
            return repository;
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$Converters$_ConverterRepositoryExtensions);
var Neptuo$ComponentModel$DefaultErrorModel = {
    fullname: "Neptuo.ComponentModel.DefaultErrorModel",
    baseTypeName: "Neptuo.FeatureModels.FeatureCollectionModel",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (text){
            this._Text = null;
            Neptuo.FeatureModels.FeatureCollectionModel.ctor$$Boolean.call(this, true);
            this.set_Text(text);
        },
        Text$$: "System.String",
        get_Text: function (){
            return this._Text;
        },
        set_Text: function (value){
            this._Text = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$DefaultErrorModel);
var Neptuo$ComponentModel$ErrorInfo = {
    fullname: "Neptuo.ComponentModel.ErrorInfo",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.IErrorInfo"],
    Kind: "Class",
    definition: {
        ctor$$Int32$$Int32$$String$$String: function (lineNumber, columnIndex, errorNumber, errorText){
            this._LineNumber = 0;
            this._ColumnIndex = 0;
            this._ErrorNumber = null;
            this._ErrorText = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.PositiveOrZero(lineNumber, "lineNumber");
            Neptuo.Ensure.PositiveOrZero(columnIndex, "columnIndex");
            Neptuo.Ensure.NotNull$$Object$$String(errorText, "errorText");
            this.set_LineNumber(lineNumber);
            this.set_ColumnIndex(columnIndex);
            this.set_ErrorNumber(errorNumber);
            this.set_ErrorText(errorText);
        },
        LineNumber$$: "System.Int32",
        get_LineNumber: function (){
            return this._LineNumber;
        },
        set_LineNumber: function (value){
            this._LineNumber = value;
        },
        ColumnIndex$$: "System.Int32",
        get_ColumnIndex: function (){
            return this._ColumnIndex;
        },
        set_ColumnIndex: function (value){
            this._ColumnIndex = value;
        },
        ErrorNumber$$: "System.String",
        get_ErrorNumber: function (){
            return this._ErrorNumber;
        },
        set_ErrorNumber: function (value){
            this._ErrorNumber = value;
        },
        ErrorText$$: "System.String",
        get_ErrorText: function (){
            return this._ErrorText;
        },
        set_ErrorText: function (value){
            this._ErrorText = value;
        },
        ctor$$Int32$$Int32$$String: function (lineNumber, columnIndex, errorText){
            this._LineNumber = 0;
            this._ColumnIndex = 0;
            this._ErrorNumber = null;
            this._ErrorText = null;
            Neptuo.ComponentModel.ErrorInfo.ctor$$Int32$$Int32$$String$$String.call(this, lineNumber, columnIndex, null, errorText);
        }
    },
    ctors: [{
        name: "ctor$$Int32$$Int32$$String$$String",
        parameters: ["System.Int32", "System.Int32", "System.String", "System.String"]
    }, {
        name: "ctor$$Int32$$Int32$$String",
        parameters: ["System.Int32", "System.Int32", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$ErrorInfo);
var Neptuo$ComponentModel$IErrorInfo = {
    fullname: "Neptuo.ComponentModel.IErrorInfo",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$IErrorInfo);
var Neptuo$ComponentModel$Converters$ConverterBase$2 = {
    fullname: "Neptuo.ComponentModel.Converters.ConverterBase$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.Converters.IConverter$2"],
    Kind: "Class",
    definition: {
        ctor: function (TSource, TTarget){
            this.TSource = TSource;
            this.TTarget = TTarget;
            this._Converter = null;
            System.Object.ctor.call(this);
        },
        Converter$$: "Neptuo.OutFunc`3[[`0],[`1],[System.Boolean]]",
        get_Converter: function (){
            return this._Converter;
        },
        set_Converter: function (value){
            this._Converter = value;
        },
        ctor$$OutFunc$3: function (TSource, TTarget, converter){
            this.TSource = TSource;
            this.TTarget = TTarget;
            this._Converter = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(converter, "converter");
            this.set_Converter(converter);
        },
        TryConvert: function (sourceValue, targetValue){
            if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.get_Converter(), null))
                return this.get_Converter()(sourceValue, targetValue);
            throw $CreateException(Neptuo._EnsureSystemExtensions.InvalidOperation(Neptuo.Ensure.Exception, "Override TryConvert method or provider Converter function."), new Error());
        },
        TryConvertGeneral: function (sourceType, targetType, sourceValue, targetValue){
            var target;
            if ((function (){
                var $1 = {
                    Value: target
                };
                var $res = this.TryConvert(Cast(sourceValue, this.TSource), $1);
                target = $1.Value;
                return $res;
            }).call(this)){
                targetValue.Value = target;
                return true;
            }
            targetValue.Value = null;
            return false;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$OutFunc",
        parameters: ["Neptuo.OutFunc"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$Converters$ConverterBase$2);
var Neptuo$ComponentModel$Converters$ConverterRepository = {
    fullname: "Neptuo.ComponentModel.Converters.ConverterRepository",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.Converters.IConverterRepository"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.OnSearchConverter = null;
            this._Storage = null;
            Neptuo.ComponentModel.Converters.ConverterRepository.ctor$$Dictionary$2.call(this, new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Collections.Generic.Dictionary$2.ctor));
        },
        Storage$$: "System.Collections.Generic.Dictionary`2[[System.Type],[System.Collections.Generic.Dictionary`2[[System.Type],[Neptuo.ComponentModel.Converters.IConverter]]]]",
        get_Storage: function (){
            return this._Storage;
        },
        set_Storage: function (value){
            this._Storage = value;
        },
        ctor$$Dictionary$2: function (storage){
            this.OnSearchConverter = null;
            this._Storage = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(storage, "storage");
            this.set_Storage(storage);
        },
        Add: function (sourceType, targetType, converter){
            Neptuo.Ensure.NotNull$$Object$$String(sourceType, "sourceType");
            Neptuo.Ensure.NotNull$$Object$$String(targetType, "targetType");
            Neptuo.Ensure.NotNull$$Object$$String(converter, "converter");
            var storage;
            if (!(function (){
                var $1 = {
                    Value: storage
                };
                var $res = this.get_Storage().TryGetValue(sourceType, $1);
                storage = $1.Value;
                return $res;
            }).call(this))
                storage = (function ($p3){
                    this.get_Storage().set_Item$$TKey(sourceType, $p3);
                    return $p3;
                }).call(this, new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, Neptuo.ComponentModel.Converters.IConverter.ctor));
            storage.set_Item$$TKey(targetType, converter);
            return this;
        },
        add_OnSearchConverter: function (value){
            this.OnSearchConverter = $CombineDelegates(this.OnSearchConverter, value);
        },
        remove_OnSearchConverter: function (value){
            this.OnSearchConverter = $RemoveDelegate(this.OnSearchConverter, value);
        },
        TryConvert$2$$TSource$$TTarget: function (TSource, TTarget, sourceValue, targetValue){
            var sourceType = Typeof(TSource);
            var targetType = Typeof(TTarget);
            var converter = null;
            var storage;
            if (!(function (){
                var $1 = {
                    Value: storage
                };
                var $res = this.get_Storage().TryGetValue(sourceType, $1);
                storage = $1.Value;
                return $res;
            }).call(this) || !(function (){
                var $1 = {
                    Value: converter
                };
                var $res = storage.TryGetValue(targetType, $1);
                converter = $1.Value;
                return $res;
            }).call(this)){
                if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnSearchConverter, null))
                    converter = this.OnSearchConverter(sourceType, targetType);
            }
            if (converter == null){
                if (sourceValue == null){
                    targetValue.Value = Default(TTarget);
                    return true;
                }
                targetValue.Value = Default(TTarget);
                return false;
            }
            var genericConverter = As(converter, Neptuo.ComponentModel.Converters.IConverter$2.ctor);
            if (genericConverter != null)
                return genericConverter.TryConvert(sourceValue, targetValue);
            var targetObject;
            if ((function (){
                var $1 = {
                    Value: targetObject
                };
                var $res = converter.TryConvertGeneral(sourceType, targetType, sourceValue, $1);
                targetObject = $1.Value;
                return $res;
            }).call(this)){
                if (Is(targetObject, TTarget)){
                    targetValue.Value = Cast(targetObject, TTarget);
                    return true;
                }
            }
            targetValue.Value = Default(TTarget);
            return false;
        },
        TryConvert$$Type$$Type$$Object$$Object: function (sourceType, targetType, sourceValue, targetValue){
            var converter = null;
            var storage;
            if (!(function (){
                var $1 = {
                    Value: storage
                };
                var $res = this.get_Storage().TryGetValue(sourceType, $1);
                storage = $1.Value;
                return $res;
            }).call(this) || !(function (){
                var $1 = {
                    Value: converter
                };
                var $res = storage.TryGetValue(targetType, $1);
                converter = $1.Value;
                return $res;
            }).call(this)){
                if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnSearchConverter, null))
                    converter = this.OnSearchConverter(sourceType, targetType);
            }
            if (converter == null){
                targetValue.Value = null;
                return false;
            }
            return converter.TryConvertGeneral(sourceType, targetType, sourceValue, targetValue);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Dictionary",
        parameters: ["System.Collections.Generic.Dictionary"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$Converters$ConverterRepository);
var Neptuo$ComponentModel$Converters$ConverterSearchDelegate = {
    fullname: "Neptuo.ComponentModel.Converters.ConverterSearchDelegate",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object", "System.IntPtr"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$Converters$ConverterSearchDelegate);
var Neptuo$ComponentModel$Converters$IConverter = {
    fullname: "Neptuo.ComponentModel.Converters.IConverter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$Converters$IConverter);
var Neptuo$ComponentModel$Converters$IConverter$2 = {
    fullname: "Neptuo.ComponentModel.Converters.IConverter$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.Converters.IConverter"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$Converters$IConverter$2);
var Neptuo$ComponentModel$Converters$IConverterRepository = {
    fullname: "Neptuo.ComponentModel.Converters.IConverterRepository",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$Converters$IConverterRepository);
var Neptuo$ComponentModel$Disposable$1 = {
    fullname: "Neptuo.ComponentModel.Disposable$1",
    baseTypeName: "Neptuo.ComponentModel.DisposableBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (T, target){
            this.T = T;
            this.reference = null;
            Neptuo.ComponentModel.DisposableBase.ctor.call(this);
            this.reference = new System.WeakReference$1.ctor$$T(this.T, target);
        },
        DisposeManagedResources: function (){
            Neptuo.ComponentModel.DisposableBase.commonPrototype.DisposeManagedResources.call(this);
            var target;
            if ((function (){
                var $1 = {
                    Value: target
                };
                var $res = this.reference.TryGetTarget($1);
                target = $1.Value;
                return $res;
            }).call(this))
                target.Dispose();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["T"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$Disposable$1);
var Neptuo$ComponentModel$DisposableBase = {
    fullname: "Neptuo.ComponentModel.DisposableBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.IDisposable"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._IsDisposed = false;
            System.Object.ctor.call(this);
        },
        IsDisposed$$: "System.Boolean",
        get_IsDisposed: function (){
            return this._IsDisposed;
        },
        set_IsDisposed: function (value){
            this._IsDisposed = value;
        },
        Dispose: function (){
            this.Dispose$$Boolean(true);
            System.GC.SuppressFinalize(this);
        },
        Dispose$$Boolean: function (disposing){
            if (this.get_IsDisposed())
                return;
            else
                this.set_IsDisposed(true);
            if (disposing)
                this.DisposeManagedResources();
            this.DisposeUnmanagedResources();
        },
        DisposeManagedResources: function (){
        },
        DisposeUnmanagedResources: function (){
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$DisposableBase);
var Neptuo$ComponentModel$Envelope = {
    fullname: "Neptuo.ComponentModel.Envelope",
    baseTypeName: "System.Object",
    staticDefinition: {
        Create$1: function (T, body){
            return new Neptuo.ComponentModel.Envelope$1.ctor$$T(T, body);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$Envelope);
var Neptuo$ComponentModel$Envelope$1 = {
    fullname: "Neptuo.ComponentModel.Envelope$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor$$T$$TimeSpan$$TimeSpan$$String: function (T, body, delay, timeToLive, sourceID){
            this.T = T;
            this._Body = null;
            this._Delay = new System.TimeSpan.ctor();
            this._TimeToLive = new System.TimeSpan.ctor();
            this._SourceID = null;
            Neptuo.ComponentModel.Envelope$1.ctor$$T$$TimeSpan$$TimeSpan.call(this, this.T, body, delay, timeToLive);
            this.set_SourceID(sourceID);
        },
        Body$$: "`0",
        get_Body: function (){
            return this._Body;
        },
        set_Body: function (value){
            this._Body = value;
        },
        Delay$$: "System.TimeSpan",
        get_Delay: function (){
            return this._Delay;
        },
        set_Delay: function (value){
            this._Delay = value;
        },
        TimeToLive$$: "System.TimeSpan",
        get_TimeToLive: function (){
            return this._TimeToLive;
        },
        set_TimeToLive: function (value){
            this._TimeToLive = value;
        },
        SourceID$$: "System.String",
        get_SourceID: function (){
            return this._SourceID;
        },
        set_SourceID: function (value){
            this._SourceID = value;
        },
        ctor$$T$$TimeSpan$$TimeSpan: function (T, body, delay, timeToLive){
            this.T = T;
            this._Body = null;
            this._Delay = new System.TimeSpan.ctor();
            this._TimeToLive = new System.TimeSpan.ctor();
            this._SourceID = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(body, "body");
            Neptuo.Ensure.NotNull$$Object$$String(delay, "delay");
            Neptuo.Ensure.NotNull$$Object$$String(timeToLive, "timeToLive");
            this.set_Body(body);
            this.set_Delay(delay);
            this.set_TimeToLive(timeToLive);
            this.set_SourceID(null);
        },
        ctor$$T$$String: function (T, body, sourceID){
            this.T = T;
            this._Body = null;
            this._Delay = new System.TimeSpan.ctor();
            this._TimeToLive = new System.TimeSpan.ctor();
            this._SourceID = null;
            Neptuo.ComponentModel.Envelope$1.ctor$$T$$TimeSpan$$TimeSpan$$String.call(this, this.T, body, System.TimeSpan.Zero, System.TimeSpan.Zero, sourceID);
        },
        ctor$$T: function (T, body){
            this.T = T;
            this._Body = null;
            this._Delay = new System.TimeSpan.ctor();
            this._TimeToLive = new System.TimeSpan.ctor();
            this._SourceID = null;
            Neptuo.ComponentModel.Envelope$1.ctor$$T$$TimeSpan$$TimeSpan.call(this, this.T, body, System.TimeSpan.Zero, System.TimeSpan.Zero);
        }
    },
    ctors: [{
        name: "ctor$$T$$TimeSpan$$TimeSpan$$String",
        parameters: ["T", "System.TimeSpan", "System.TimeSpan", "System.String"]
    }, {
        name: "ctor$$T$$TimeSpan$$TimeSpan",
        parameters: ["T", "System.TimeSpan", "System.TimeSpan"]
    }, {
        name: "ctor$$T$$String",
        parameters: ["T", "System.String"]
    }, {
        name: "ctor$$T",
        parameters: ["T"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$Envelope$1);
var Neptuo$ComponentModel$IErrorModel = {
    fullname: "Neptuo.ComponentModel.IErrorModel",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.FeatureModels.IFeatureModel"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$IErrorModel);
var Neptuo$ComponentModel$TextOffsets$DefaultContentRangeInfo = {
    fullname: "Neptuo.ComponentModel.TextOffsets.DefaultContentRangeInfo",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.TextOffsets.IContentRangeInfo"],
    Kind: "Class",
    definition: {
        ctor: function (startIndex, length){
            this._StartIndex = 0;
            this._Length = 0;
            System.Object.ctor.call(this);
            this.set_StartIndex(startIndex);
            this.set_Length(length);
        },
        StartIndex$$: "System.Int32",
        get_StartIndex: function (){
            return this._StartIndex;
        },
        set_StartIndex: function (value){
            this._StartIndex = value;
        },
        Length$$: "System.Int32",
        get_Length: function (){
            return this._Length;
        },
        set_Length: function (value){
            this._Length = value;
        },
        ToString: function (){
            return System.String.Format$$String$$Object$$Object("<{0}, {1}>", this.get_StartIndex(), this.get_StartIndex() + this.get_Length());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Int32", "System.Int32"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$TextOffsets$DefaultContentRangeInfo);
var Neptuo$ComponentModel$TextOffsets$DefaultLineInfo = {
    fullname: "Neptuo.ComponentModel.TextOffsets.DefaultLineInfo",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.TextOffsets.ILineInfo"],
    Kind: "Class",
    definition: {
        ctor: function (lineIndex, columnIndex){
            this._LineIndex = 0;
            this._ColumnIndex = 0;
            System.Object.ctor.call(this);
            this.set_LineIndex(lineIndex);
            this.set_ColumnIndex(columnIndex);
        },
        LineIndex$$: "System.Int32",
        get_LineIndex: function (){
            return this._LineIndex;
        },
        set_LineIndex: function (value){
            this._LineIndex = value;
        },
        ColumnIndex$$: "System.Int32",
        get_ColumnIndex: function (){
            return this._ColumnIndex;
        },
        set_ColumnIndex: function (value){
            this._ColumnIndex = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Int32", "System.Int32"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$TextOffsets$DefaultLineInfo);
var Neptuo$ComponentModel$TextOffsets$DefaultLineRangeInfo = {
    fullname: "Neptuo.ComponentModel.TextOffsets.DefaultLineRangeInfo",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.TextOffsets.ILineRangeInfo"],
    Kind: "Class",
    definition: {
        ctor: function (columnIndex, lineIndex, endColumnIndex, endLineIndex){
            this._ColumnIndex = 0;
            this._LineIndex = 0;
            this._EndColumnIndex = 0;
            this._EndLineIndex = 0;
            System.Object.ctor.call(this);
            this.set_ColumnIndex(columnIndex);
            this.set_LineIndex(lineIndex);
            this.set_EndColumnIndex(endColumnIndex);
            this.set_EndLineIndex(endLineIndex);
        },
        ColumnIndex$$: "System.Int32",
        get_ColumnIndex: function (){
            return this._ColumnIndex;
        },
        set_ColumnIndex: function (value){
            this._ColumnIndex = value;
        },
        LineIndex$$: "System.Int32",
        get_LineIndex: function (){
            return this._LineIndex;
        },
        set_LineIndex: function (value){
            this._LineIndex = value;
        },
        EndColumnIndex$$: "System.Int32",
        get_EndColumnIndex: function (){
            return this._EndColumnIndex;
        },
        set_EndColumnIndex: function (value){
            this._EndColumnIndex = value;
        },
        EndLineIndex$$: "System.Int32",
        get_EndLineIndex: function (){
            return this._EndLineIndex;
        },
        set_EndLineIndex: function (value){
            this._EndLineIndex = value;
        },
        ToString: function (){
            return System.String.Format$$String$$Object$Array("<{0}:{1}, {2}:{3}>", this.get_LineIndex(), this.get_ColumnIndex(), this.get_EndLineIndex(), this.get_EndColumnIndex());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Int32", "System.Int32", "System.Int32", "System.Int32"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$TextOffsets$DefaultLineRangeInfo);
var Neptuo$ComponentModel$TextOffsets$IContentRangeInfo = {
    fullname: "Neptuo.ComponentModel.TextOffsets.IContentRangeInfo",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$TextOffsets$IContentRangeInfo);
var Neptuo$ComponentModel$TextOffsets$ILineInfo = {
    fullname: "Neptuo.ComponentModel.TextOffsets.ILineInfo",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$TextOffsets$ILineInfo);
var Neptuo$ComponentModel$TextOffsets$ILineRangeInfo = {
    fullname: "Neptuo.ComponentModel.TextOffsets.ILineRangeInfo",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.TextOffsets.ILineInfo"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$TextOffsets$ILineRangeInfo);
var Neptuo$ComponentModel$ObservableObject = {
    fullname: "Neptuo.ComponentModel.ObservableObject",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["System.ComponentModel.INotifyPropertyChanged"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.PropertyChanged = null;
            System.Object.ctor.call(this);
        },
        add_PropertyChanged: function (value){
            this.PropertyChanged = $CombineDelegates(this.PropertyChanged, value);
        },
        remove_PropertyChanged: function (value){
            this.PropertyChanged = $RemoveDelegate(this.PropertyChanged, value);
        },
        RaisePropertyChanged: function (propertyName){
            Neptuo.Ensure.NotNull$$Object$$String(propertyName, "propertyName");
            if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.PropertyChanged, null))
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs.ctor(propertyName));
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$ObservableObject);
var Neptuo$ComponentModel$OutFuncCollection$3 = {
    fullname: "Neptuo.ComponentModel.OutFuncCollection$3",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["System.Collections.Generic.IEnumerable$1"],
    Kind: "Class",
    definition: {
        ctor: function (T, TOutput, TReturn){
            this.T = T;
            this.TOutput = TOutput;
            this.TReturn = TReturn;
            this.storage = new System.Collections.Generic.List$1.ctor(Neptuo.OutFunc$3.ctor);
            System.Object.ctor.call(this);
        },
        Add: function (func){
            Neptuo.Ensure.NotNull$$Object$$String(func, "func");
            this.storage.Add(func);
            return this;
        },
        Remove: function (func){
            Neptuo.Ensure.NotNull$$Object$$String(func, "func");
            this.storage.Remove(func);
            return this;
        },
        GetEnumerator: function (){
            return this.storage.GetEnumerator();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$OutFuncCollection$3);
var Neptuo$ComponentModel$ReturnTypeAttribute = {
    fullname: "Neptuo.ComponentModel.ReturnTypeAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (type){
            this._Type = null;
            System.Attribute.ctor.call(this);
            this.set_Type(type);
        },
        Type$$: "System.Type",
        get_Type: function (){
            return this._Type;
        },
        set_Type: function (value){
            this._Type = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Type"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$ReturnTypeAttribute);
var Neptuo$ComponentModel$_ErrorModelExtensions = {
    fullname: "Neptuo.ComponentModel._ErrorModelExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        TryWithLineInfo: function (errorModel, lineInfo){
            Neptuo.Ensure.NotNull$$Object$$String(errorModel, "errorModel");
            return errorModel.TryWith$1(Neptuo.ComponentModel.TextOffsets.ILineInfo.ctor, lineInfo);
        },
        TryWithLineRangeInfo: function (errorModel, lineInfo){
            Neptuo.Ensure.NotNull$$Object$$String(errorModel, "errorModel");
            return errorModel.TryWith$1(Neptuo.ComponentModel.TextOffsets.ILineRangeInfo.ctor, lineInfo);
        },
        TryWithContentInfo: function (errorModel, contentInfo){
            Neptuo.Ensure.NotNull$$Object$$String(errorModel, "errorModel");
            return errorModel.TryWith$1(Neptuo.ComponentModel.TextOffsets.IContentRangeInfo.ctor, contentInfo);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$_ErrorModelExtensions);
var Neptuo$ComponentModel$_OutFuncCollectionExtensions = {
    fullname: "Neptuo.ComponentModel._OutFuncCollectionExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        TryExecute$2: function (T, TOutput, list, parameter, output){
            var $it8 = list.GetEnumerator();
            while ($it8.MoveNext()){
                var func = $it8.get_Current();
                if (func(parameter, output))
                    return true;
            }
            output.Value = Default(TOutput);
            return false;
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$_OutFuncCollectionExtensions);
var Neptuo$Converts = {
    fullname: "Neptuo.Converts",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Converts.lockRepository = new System.Object.ctor();
            Neptuo.Converts.repository = null;
        },
        Repository$$: "Neptuo.ComponentModel.Converters.IConverterRepository",
        get_Repository: function (){
            if (Neptuo.Converts.repository == null){
                if (Neptuo.Converts.repository == null)
                    Neptuo.Converts.repository = new Neptuo.ComponentModel.Converters.ConverterRepository.ctor();
                Neptuo.ComponentModel.Converters._ConverterRepositoryExtensions.Add$2(System.String.ctor, System.Decimal.ctor, Neptuo.ComponentModel.Converters._ConverterRepositoryExtensions.Add$2(System.String.ctor, System.Double.ctor, Neptuo.ComponentModel.Converters._ConverterRepositoryExtensions.Add$2(System.String.ctor, System.Int64.ctor, Neptuo.ComponentModel.Converters._ConverterRepositoryExtensions.Add$2(System.String.ctor, System.Int32.ctor, Neptuo.ComponentModel.Converters._ConverterRepositoryExtensions.Add$2(System.String.ctor, System.Boolean.ctor, Neptuo.Converts.repository, new Neptuo.ComponentModel.Converters.ConverterBase$2.ctor$$OutFunc$3(System.String.ctor, System.Boolean.ctor, System.Boolean.TryParse)), new Neptuo.ComponentModel.Converters.ConverterBase$2.ctor$$OutFunc$3(System.String.ctor, System.Int32.ctor, System.Int32.TryParse$$String$$Int32)), new Neptuo.ComponentModel.Converters.ConverterBase$2.ctor$$OutFunc$3(System.String.ctor, System.Int64.ctor, System.Int64.TryParse$$String$$Int64)), new Neptuo.ComponentModel.Converters.ConverterBase$2.ctor$$OutFunc$3(System.String.ctor, System.Double.ctor, System.Double.TryParse$$String$$Double)), new Neptuo.ComponentModel.Converters.ConverterBase$2.ctor$$OutFunc$3(System.String.ctor, System.Decimal.ctor, System.Decimal.TryParse$$String$$Decimal));
            }
            return Neptuo.Converts.repository;
        },
        Try$2$$TSource$$TTarget: function (TSource, TTarget, sourceValue, targetValue){
            return Neptuo.Converts.get_Repository().TryConvert$2$$TSource$$TTarget(TSource, TTarget, sourceValue, targetValue);
        },
        Try$$Type$$Type$$Object$$Object: function (sourceType, targetType, sourceValue, targetValue){
            return Neptuo.Converts.get_Repository().TryConvert$$Type$$Type$$Object$$Object(sourceType, targetType, sourceValue, targetValue);
        },
        To$2$$TSource: function (TSource, TTarget, sourceValue){
            var targetValue;
            if ((function (){
                var $1 = {
                    Value: targetValue
                };
                var $res = Neptuo.Converts.Try$2$$TSource$$TTarget(TSource, TTarget, sourceValue, $1);
                targetValue = $1.Value;
                return $res;
            })())
                return targetValue;
            throw $CreateException(Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(Neptuo.Ensure.Exception, "TTarget", "Target type (\'{0}\') can\'t constructed from value \'{1}\'.", Typeof(TTarget).get_FullName(), sourceValue), new Error());
        },
        To$$Type$$Type$$Object: function (sourceType, targetType, sourceValue){
            var targetValue;
            if (targetType.IsAssignableFrom(sourceType))
                return sourceValue;
            if ((function (){
                var $1 = {
                    Value: targetValue
                };
                var $res = Neptuo.Converts.Try$$Type$$Type$$Object$$Object(sourceType, targetType, sourceValue, $1);
                targetValue = $1.Value;
                return $res;
            })())
                return targetValue;
            if (sourceValue == null){
                if (targetType.get_IsValueType())
                    return System.Activator.CreateInstance$$Type(targetType);
                return null;
            }
            if (System.Type.op_Equality$$Type$$Type(targetType, Typeof(System.String.ctor)))
                return sourceValue.ToString();
            Neptuo.Ensure.NotNull$$Object$$String(targetType, "targetType");
            throw $CreateException(Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(Neptuo.Ensure.Exception, "TTarget", "Target type (\'{0}\') can\'t constructed from value \'{1}\'.", targetType.get_FullName(), sourceValue), new Error());
        },
        To$$Type$$Object: function (targetType, sourceValue){
            if (sourceValue == null){
                if (targetType.get_IsValueType())
                    return System.Activator.CreateInstance$$Type(targetType);
                return null;
            }
            return Neptuo.Converts.To$$Type$$Type$$Object(sourceValue.GetType(), targetType, sourceValue);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Converts);
var Neptuo$Activators$DefaultActivator$1 = {
    fullname: "Neptuo.Activators.DefaultActivator$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Activators.IActivator$1"],
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            System.Object.ctor.call(this);
        },
        Create: function (){
            return new this.T();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Activators$DefaultActivator$1);
var Neptuo$Activators$DependencyActivator$1 = {
    fullname: "Neptuo.Activators.DependencyActivator$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Activators.IActivator$1"],
    Kind: "Class",
    definition: {
        ctor: function (T, dependencyProvider){
            this.T = T;
            this.dependencyProvider = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            this.dependencyProvider = dependencyProvider;
        },
        Create: function (){
            return Neptuo.Activators._DependencyProviderExtensions.Resolve$1$$IDependencyProvider(this.T, this.dependencyProvider);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Activators.IDependencyProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Activators$DependencyActivator$1);
var Neptuo$Activators$_DependencyProviderExtensions = {
    fullname: "Neptuo.Activators._DependencyProviderExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Resolve$1$$IDependencyProvider: function (T, dependencyProvider){
            Neptuo.Ensure.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            return Cast(dependencyProvider.Resolve(Typeof(T)), T);
        },
        Resolve$1$$IDependencyProvider$$Type: function (T, dependencyProvider, requiredType){
            Neptuo.Ensure.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            return Cast(dependencyProvider.Resolve(requiredType), T);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Activators$_DependencyProviderExtensions);
var Neptuo$Exceptions$Helpers$EnsureConditionHelper = {
    fullname: "Neptuo.Exceptions.Helpers.EnsureConditionHelper",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Exceptions$Helpers$EnsureConditionHelper);
var Neptuo$FeatureModels$IFeatureModel = {
    fullname: "Neptuo.FeatureModels.IFeatureModel",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$FeatureModels$IFeatureModel);
var Neptuo$FeatureModels$FeatureCollectionModel = {
    fullname: "Neptuo.FeatureModels.FeatureCollectionModel",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.FeatureModels.IFeatureModel"],
    Kind: "Class",
    definition: {
        ctor$$Boolean: function (isSingleThread){
            this.features = null;
            this.onSearchFeature = null;
            System.Object.ctor.call(this);
            if (isSingleThread)
                this.features = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Object.ctor);
            else
                this.features = new System.Collections.Concurrent.ConcurrentDictionary$2.ctor(System.Type.ctor, System.Object.ctor);
        },
        ctor$$Boolean$$IDictionary$2$Type$Object: function (isSingleThread, features){
            this.features = null;
            this.onSearchFeature = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(features, "features");
            if (isSingleThread)
                this.features = new System.Collections.Generic.Dictionary$2.ctor$$IDictionary$2(System.Type.ctor, System.Object.ctor, features);
            else
                this.features = new System.Collections.Concurrent.ConcurrentDictionary$2.ctor$$IEnumerable$1(System.Type.ctor, System.Object.ctor, features);
        },
        Add: function (featureType, feature){
            Neptuo.Ensure.NotNull$$Object$$String(featureType, "featureType");
            this.features.set_Item$$TKey(featureType, feature);
            return this;
        },
        AddSearchHandler: function (handler){
            Neptuo.Ensure.NotNull$$Object$$String(handler, "handler");
            this.onSearchFeature = System.Delegate.Combine$$Delegate$$Delegate(this.onSearchFeature, handler);
        },
        TryWith$1: function (TFeature, feature){
            var featureType = Typeof(TFeature);
            var featureBase;
            if ((function (){
                var $1 = {
                    Value: featureBase
                };
                var $res = this.features.TryGetValue(featureType, $1);
                featureBase = $1.Value;
                return $res;
            }).call(this)){
                feature.Value = Cast(featureBase, TFeature);
                return true;
            }
            if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.onSearchFeature, null)){
                var $it9 = this.onSearchFeature.GetInvocationList().GetEnumerator();
                while ($it9.MoveNext()){
                    var handler = $it9.get_Current();
                    if ((function (){
                        var $1 = {
                            Value: featureBase
                        };
                        var $res = handler(Typeof(TFeature), $1);
                        featureBase = $1.Value;
                        return $res;
                    }).call(this)){
                        feature.Value = Cast(featureBase, TFeature);
                        return true;
                    }
                }
            }
            feature.Value = Default(TFeature);
            return false;
        }
    },
    ctors: [{
        name: "ctor$$Boolean",
        parameters: ["System.Boolean"]
    }, {
        name: "ctor$$Boolean$$IDictionary",
        parameters: ["System.Boolean", "System.Collections.Generic.IDictionary"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$FeatureModels$FeatureCollectionModel);
var Neptuo$FeatureModels$ObjectFeatureModel = {
    fullname: "Neptuo.FeatureModels.ObjectFeatureModel",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.FeatureModels.IFeatureModel"],
    Kind: "Class",
    definition: {
        ctor: function (instance){
            this.instance = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(instance, "instance");
            this.instance = instance;
        },
        TryWith$1: function (TFeature, feature){
            if (Is(this.instance, TFeature)){
                feature.Value = Cast(this.instance, TFeature);
                return true;
            }
            feature.Value = Default(TFeature);
            return false;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$FeatureModels$ObjectFeatureModel);
var Neptuo$FeatureModels$_FeatureCollectionModelExtensions = {
    fullname: "Neptuo.FeatureModels._FeatureCollectionModelExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Add$1: function (T, collection, feature){
            Neptuo.Ensure.NotNull$$Object$$String(collection, "collection");
            return collection.Add(Typeof(T), feature);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$FeatureModels$_FeatureCollectionModelExtensions);
var Neptuo$FeatureModels$_FeatureModelExtensions = {
    fullname: "Neptuo.FeatureModels._FeatureModelExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        With$1: function (TFeature, model){
            Neptuo.Ensure.NotNull$$Object$$String(model, "model");
            var feature;
            if ((function (){
                var $1 = {
                    Value: feature
                };
                var $res = model.TryWith$1(TFeature, $1);
                feature = $1.Value;
                return $res;
            })())
                return feature;
            throw $CreateException(Neptuo._EnsureSystemExtensions.NotSupported(Neptuo.Ensure.Exception, "Feature model \'{0}\' doesn\'t support feature \'{1}\'.", model.GetType().get_FullName(), Typeof(TFeature).get_FullName()), new Error());
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$FeatureModels$_FeatureModelExtensions);
var Neptuo$ICloneable$1 = {
    fullname: "Neptuo.ICloneable$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ICloneable$1);
var Neptuo$Activators$InstanceActivator$1 = {
    fullname: "Neptuo.Activators.InstanceActivator$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Activators.IActivator$1"],
    Kind: "Class",
    definition: {
        ctor$$T: function (T, instance){
            this.T = T;
            this.instance = null;
            this.instanceGetter = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(instance, "instance");
            this.instance = instance;
        },
        ctor$$Func$1: function (T, instanceGetter){
            this.T = T;
            this.instance = null;
            this.instanceGetter = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(instanceGetter, "instanceGetter");
            this.instanceGetter = instanceGetter;
        },
        Create: function (){
            if (this.instance == null){
                if (this.instance == null)
                    this.instance = this.instanceGetter();
            }
            return this.instance;
        }
    },
    ctors: [{
        name: "ctor$$T",
        parameters: ["T"]
    }, {
        name: "ctor$$Func",
        parameters: ["System.Func"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Activators$InstanceActivator$1);
var Neptuo$Pipelines$Commands$CommandDispatcherException = {
    fullname: "Neptuo.Pipelines.Commands.CommandDispatcherException",
    baseTypeName: "Neptuo.Pipelines.Commands.CommandException",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor$$String$$Exception: function (message, inner){
            Neptuo.Pipelines.Commands.CommandException.ctor$$String$$Exception.call(this, message, inner);
        },
        ctor$$SerializationInfo$$StreamingContext: function (info, context){
            Neptuo.Pipelines.Commands.CommandException.ctor$$SerializationInfo$$StreamingContext.call(this, info, context);
        }
    },
    ctors: [{
        name: "ctor$$String$$Exception",
        parameters: ["System.String", "System.Exception"]
    }, {
        name: "ctor$$SerializationInfo$$StreamingContext",
        parameters: ["System.Runtime.Serialization.SerializationInfo", "System.Runtime.Serialization.StreamingContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$CommandDispatcherException);
var Neptuo$Pipelines$Commands$CommandException = {
    fullname: "Neptuo.Pipelines.Commands.CommandException",
    baseTypeName: "System.Exception",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Exception.ctor.call(this);
        },
        ctor$$String: function (message){
            System.Exception.ctor$$String.call(this, message);
        },
        ctor$$String$$Exception: function (message, inner){
            System.Exception.ctor$$String$$Exception.call(this, message, inner);
        },
        ctor$$SerializationInfo$$StreamingContext: function (info, context){
            System.Exception.ctor$$SerializationInfo$$StreamingContext.call(this, info, context);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor$$String$$Exception",
        parameters: ["System.String", "System.Exception"]
    }, {
        name: "ctor$$SerializationInfo$$StreamingContext",
        parameters: ["System.Runtime.Serialization.SerializationInfo", "System.Runtime.Serialization.StreamingContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$CommandException);
var Neptuo$Pipelines$Commands$DependencyCommandDispatcher = {
    fullname: "Neptuo.Pipelines.Commands.DependencyCommandDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Commands.ICommandDispatcher"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyProvider, eventDispatcher){
            this.dependencyProvider = null;
            this.eventDispatcher = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            Neptuo.Ensure.NotNull$$Object$$String(eventDispatcher, "eventDispatcher");
            this.dependencyProvider = dependencyProvider;
            this.eventDispatcher = eventDispatcher;
        },
        Handle: function (command){
            Neptuo.Ensure.NotNull$$Object$$String(command, "command");
            this.HandleInternal(command, true);
        },
        HandleInternal: function (command, handleException){
            var executor = null;
            try{
                var executorFactory = Neptuo.Activators._DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory.ctor, this.dependencyProvider);
                executor = executorFactory.CreateExecutor(command);
                executor.add_OnCommandHandled($CreateDelegate(this, this.OnCommandHandled));
                executor.Handle(command);
            }
            catch(e){
                if (handleException){
                    this.HandleException(e);
                    return;
                }
                var commandException = As(command, System.Exception.ctor);
                if (commandException != null)
                    throw $CreateException(new Neptuo.Pipelines.Commands.CommandDispatcherException.ctor$$String$$Exception("Unahandled exception during command execution.", commandException), new Error());
                throw $CreateException(new Neptuo.Pipelines.Commands.CommandDispatcherException.ctor$$String$$Exception("Unahandled exception during command execution.", e), new Error());
            }
            finally{
                var disposable = As(executor, Neptuo.IDisposable.ctor);
                if (disposable != null)
                    disposable.Dispose();
            }
        },
        OnCommandHandled: function (executor, command){
            executor.remove_OnCommandHandled($CreateDelegate(this, this.OnCommandHandled));
            var guidCommand = As(command, Neptuo.Pipelines.Commands.ICommand.ctor);
            var envelope;
            if (guidCommand != null)
                envelope = new Neptuo.ComponentModel.Envelope$1.ctor$$T$$String(Neptuo.Pipelines.Commands.Events.CommandHandled.ctor, new Neptuo.Pipelines.Commands.Events.CommandHandled.ctor(guidCommand), guidCommand.get_Guid());
            else
                envelope = Neptuo.ComponentModel.Envelope.Create$1(Neptuo.Pipelines.Commands.Events.CommandHandled.ctor, new Neptuo.Pipelines.Commands.Events.CommandHandled.ctor(command));
            this.eventDispatcher.PublishAsync$1(Neptuo.ComponentModel.Envelope$1.ctor, envelope);
        },
        HandleException: function (exception){
            Neptuo.Ensure.NotNull$$Object$$String(exception, "exception");
            this.HandleInternal(exception, false);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Activators.IDependencyProvider", "Neptuo.Pipelines.Events.IEventDispatcher"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$DependencyCommandDispatcher);
var Neptuo$Pipelines$Commands$Events$CommandHandled = {
    fullname: "Neptuo.Pipelines.Commands.Events.CommandHandled",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (command){
            this._Command = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(command, "command");
            this.set_Command(command);
        },
        Command$$: "System.Object",
        get_Command: function (){
            return this._Command;
        },
        set_Command: function (value){
            this._Command = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$Events$CommandHandled);
var Neptuo$Pipelines$Commands$Events$Handlers$CommandEventHandler = {
    fullname: "Neptuo.Pipelines.Commands.Events.Handlers.CommandEventHandler",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Events.Handlers.IEventHandler$1"],
    Kind: "Class",
    definition: {
        ctor$$Object$$IEventHandler$1$CommandHandled: function (command, innerHandler){
            this.command = null;
            this.innerDirectHandler = null;
            this.innerEnvelopeHandler = null;
            this.innerContextHandler = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(command, "command");
            Neptuo.Ensure.NotNull$$Object$$String(innerHandler, "innerHandler");
            this.command = command;
            this.innerDirectHandler = innerHandler;
        },
        ctor$$Object$$IEventHandler$1: function (command, innerHandler){
            this.command = null;
            this.innerDirectHandler = null;
            this.innerEnvelopeHandler = null;
            this.innerContextHandler = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(command, "command");
            Neptuo.Ensure.NotNull$$Object$$String(innerHandler, "innerHandler");
            this.command = command;
            this.innerContextHandler = innerHandler;
        },
        HandleAsync: function (context){
            if (context.get_Payload().get_Body().get_Command() == this.command){
                context.get_Registry().UnSubscribe$1(Neptuo.Pipelines.Events.Handlers.IEventHandlerContext$1.ctor, this);
                if (this.innerDirectHandler != null)
                    this.innerDirectHandler.HandleAsync(context.get_Payload().get_Body());
                else if (this.innerEnvelopeHandler != null)
                    this.innerEnvelopeHandler.HandleAsync(context.get_Payload());
                else if (this.innerContextHandler != null)
                    this.innerContextHandler.HandleAsync(context);
                else
                    throw $CreateException(Neptuo._EnsureSystemExtensions.NotSupported(Neptuo.Ensure.Exception, "Invalid object state. Pass in CommandHandled or Envelope<CommandHandled> event handler."), new Error());
            }
            return System.Threading.Tasks.Task.FromResult$1(System.Boolean.ctor, true);
        }
    },
    ctors: [{
        name: "ctor$$Object$$IEventHandler",
        parameters: ["System.Object", "Neptuo.Pipelines.Events.Handlers.IEventHandler"]
    }, {
        name: "ctor$$Object$$IEventHandler",
        parameters: ["System.Object", "Neptuo.Pipelines.Events.Handlers.IEventHandler"]
    }, {
        name: "ctor$$Object$$IEventHandler",
        parameters: ["System.Object", "Neptuo.Pipelines.Events.Handlers.IEventHandler"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$Events$Handlers$CommandEventHandler);
var Neptuo$Pipelines$Commands$Execution$CommandExecutorException = {
    fullname: "Neptuo.Pipelines.Commands.Execution.CommandExecutorException",
    baseTypeName: "Neptuo.Pipelines.Commands.CommandException",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Pipelines.Commands.CommandException.ctor.call(this);
        },
        ctor$$String: function (message){
            Neptuo.Pipelines.Commands.CommandException.ctor$$String.call(this, message);
        },
        ctor$$String$$Exception: function (message, inner){
            Neptuo.Pipelines.Commands.CommandException.ctor$$String$$Exception.call(this, message, inner);
        },
        ctor$$SerializationInfo$$StreamingContext: function (info, context){
            Neptuo.Pipelines.Commands.CommandException.ctor$$SerializationInfo$$StreamingContext.call(this, info, context);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor$$String$$Exception",
        parameters: ["System.String", "System.Exception"]
    }, {
        name: "ctor$$SerializationInfo$$StreamingContext",
        parameters: ["System.Runtime.Serialization.SerializationInfo", "System.Runtime.Serialization.StreamingContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$Execution$CommandExecutorException);
var Neptuo$Pipelines$Commands$Execution$DependencyCommandExecutorFactory = {
    fullname: "Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutorFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory"],
    Kind: "Class",
    definition: {
        ctor$$IDependencyProvider: function (dependencyProvider){
            this.dependencyProvider = null;
            this.interceptorProvider = null;
            Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutorFactory.ctor$$IDependencyProvider$$IInterceptorProvider.call(this, dependencyProvider, new Neptuo.Pipelines.Commands.Interception.ManualInterceptorProvider.ctor(dependencyProvider));
        },
        ctor$$IDependencyProvider$$IInterceptorProvider: function (dependencyProvider, interceptorProvider){
            this.dependencyProvider = null;
            this.interceptorProvider = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            Neptuo.Ensure.NotNull$$Object$$String(interceptorProvider, "interceptorProvider");
            this.dependencyProvider = dependencyProvider;
            this.interceptorProvider = interceptorProvider;
        },
        CreateExecutor: function (command){
            return new Neptuo.Pipelines.Commands.Execution.DependencyCommandExecutor.ctor(this.dependencyProvider, this.interceptorProvider);
        }
    },
    ctors: [{
        name: "ctor$$IDependencyProvider",
        parameters: ["Neptuo.Activators.IDependencyProvider"]
    }, {
        name: "ctor$$IDependencyProvider$$IInterceptorProvider",
        parameters: ["Neptuo.Activators.IDependencyProvider", "Neptuo.Pipelines.Commands.Interception.IInterceptorProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$Execution$DependencyCommandExecutorFactory);
var Neptuo$Pipelines$Commands$Execution$DispatchingCommandExecutorFactory = {
    fullname: "Neptuo.Pipelines.Commands.Execution.DispatchingCommandExecutorFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.OnSearchFactory = null;
            this._Factories = null;
            System.Object.ctor.call(this);
            this.set_Factories(new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory.ctor));
        },
        Factories$$: "System.Collections.Generic.Dictionary`2[[System.Type],[Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory]]",
        get_Factories: function (){
            return this._Factories;
        },
        set_Factories: function (value){
            this._Factories = value;
        },
        AddFactory: function (commandType, factory){
            Neptuo.Ensure.NotNull$$Object$$String(commandType, "commandType");
            Neptuo.Ensure.NotNull$$Object$$String(factory, "factory");
            this.get_Factories().set_Item$$TKey(commandType, factory);
            return this;
        },
        CreateExecutor: function (command){
            Neptuo.Ensure.NotNull$$Object$$String(command, "command");
            var commandType = command.GetType();
            var factory;
            if ((function (){
                var $1 = {
                    Value: factory
                };
                var $res = this.get_Factories().TryGetValue(commandType, $1);
                factory = $1.Value;
                return $res;
            }).call(this))
                return factory.CreateExecutor(command);
            if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnSearchFactory, null)){
                factory = this.OnSearchFactory(command);
                if (factory != null)
                    return factory.CreateExecutor(command);
            }
            throw $CreateException(new Neptuo.Pipelines.Commands.Execution.CommandExecutorException.ctor$$String(System.String.Format$$String$$Object("Unnable to find factory for command of type \'{0}\'.", commandType.get_FullName())), new Error());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$Execution$DispatchingCommandExecutorFactory);
var Neptuo$Pipelines$Commands$Execution$ICommandExecutor = {
    fullname: "Neptuo.Pipelines.Commands.Execution.ICommandExecutor",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Commands$Execution$ICommandExecutor);
var Neptuo$Pipelines$Commands$Execution$ICommandExecutorFactory = {
    fullname: "Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Commands$Execution$ICommandExecutorFactory);
var Neptuo$Pipelines$Commands$Execution$ICommandHandlerAware = {
    fullname: "Neptuo.Pipelines.Commands.Execution.ICommandHandlerAware",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Commands$Execution$ICommandHandlerAware);
var Neptuo$Pipelines$Commands$Execution$InterceptorExectionContext = {
    fullname: "Neptuo.Pipelines.Commands.Execution.InterceptorExectionContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Commands.Interception.IDecoratedInvokeContext", "Neptuo.Pipelines.Commands.Execution.ICommandHandlerAware"],
    Kind: "Class",
    definition: {
        ctor: function (interceptors, commandHandler, command){
            this._Interceptors = null;
            this._InterceptorEnumerator = null;
            this._CommandHandler = null;
            this._Command = null;
            this._Exception = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(interceptors, "interceptors");
            Neptuo.Ensure.NotNull$$Object$$String(commandHandler, "commandHandler");
            Neptuo.Ensure.NotNull$$Object$$String(command, "command");
            this.set_Interceptors(interceptors);
            this.set_InterceptorEnumerator(interceptors.GetEnumerator());
            this.set_CommandHandler(commandHandler);
            this.set_Command(command);
        },
        Interceptors$$: "System.Collections.Generic.IEnumerable`1[[Neptuo.Pipelines.Commands.Interception.IDecoratedInvoke]]",
        get_Interceptors: function (){
            return this._Interceptors;
        },
        set_Interceptors: function (value){
            this._Interceptors = value;
        },
        InterceptorEnumerator$$: "System.Collections.Generic.IEnumerator`1[[Neptuo.Pipelines.Commands.Interception.IDecoratedInvoke]]",
        get_InterceptorEnumerator: function (){
            return this._InterceptorEnumerator;
        },
        set_InterceptorEnumerator: function (value){
            this._InterceptorEnumerator = value;
        },
        CommandHandler$$: "System.Object",
        get_CommandHandler: function (){
            return this._CommandHandler;
        },
        set_CommandHandler: function (value){
            this._CommandHandler = value;
        },
        Command$$: "System.Object",
        get_Command: function (){
            return this._Command;
        },
        set_Command: function (value){
            this._Command = value;
        },
        Exception$$: "System.Exception",
        get_Exception: function (){
            return this._Exception;
        },
        set_Exception: function (value){
            this._Exception = value;
        },
        Next: function (){
            if (this.get_InterceptorEnumerator().MoveNext())
                this.get_InterceptorEnumerator().get_Current().OnInvoke(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Collections.Generic.IEnumerable", "System.Object", "System.Object"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$Execution$InterceptorExectionContext);
var Neptuo$Pipelines$Commands$Execution$IPoolCommandExecutorContext = {
    fullname: "Neptuo.Pipelines.Commands.Execution.IPoolCommandExecutorContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Commands$Execution$IPoolCommandExecutorContext);
var Neptuo$Pipelines$Commands$Execution$PoolCommandExecutor = {
    fullname: "Neptuo.Pipelines.Commands.Execution.PoolCommandExecutor",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Commands.Execution.ICommandExecutor"],
    Kind: "Class",
    definition: {
        ctor: function (poolContext){
            this.OnCommandHandled = null;
            this._PoolContext = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(poolContext, "poolContext");
            this.set_PoolContext(poolContext);
        },
        PoolContext$$: "Neptuo.Pipelines.Commands.Execution.IPoolCommandExecutorContext",
        get_PoolContext: function (){
            return this._PoolContext;
        },
        set_PoolContext: function (value){
            this._PoolContext = value;
        },
        add_OnCommandHandled: function (value){
            this.OnCommandHandled = $CombineDelegates(this.OnCommandHandled, value);
        },
        remove_OnCommandHandled: function (value){
            this.OnCommandHandled = $RemoveDelegate(this.OnCommandHandled, value);
        },
        Handle: function (command){
            this.get_PoolContext().AddCommand(command);
            this.HandleCommandIfPossible();
        },
        HandleCommandIfPossible: function (){
            if (this.get_PoolContext().get_IsNextAvailable()){
                this.get_PoolContext().ExecuteLocked($CreateAnonymousDelegate(this, function (){
                    if (this.get_PoolContext().get_IsNextAvailable()){
                        var command = this.get_PoolContext().NextCommand();
                        var executor = this.get_PoolContext().CreateInnerExecutor(command);
                        executor.add_OnCommandHandled($CreateDelegate(this, this.OnExecutorCommandHandled));
                        this.DoHandleCommand(executor, command);
                    }
                }));
            }
        },
        DoHandleCommand: function (executor, command){
            executor.Handle(command);
        },
        OnExecutorCommandHandled: function (executor, command){
            if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnCommandHandled, null))
                this.OnCommandHandled(this, command);
            this.get_PoolContext().RemoveDoneExecutor(executor);
            this.HandleCommandIfPossible();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Pipelines.Commands.Execution.IPoolCommandExecutorContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$Execution$PoolCommandExecutor);
var Neptuo$Pipelines$Commands$Execution$PoolCommandExecutorFactory = {
    fullname: "Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory", "Neptuo.Pipelines.Commands.Execution.IPoolCommandExecutorContext"],
    Kind: "Class",
    definition: {
        ctor$$ICommandExecutorFactory$$Boolean: function (innerFactory, isUseLocking){
            this._CommandQueue = null;
            this._PoolSize = null;
            this._InnerFactory = null;
            this._InnerExecutors = null;
            this._IsUseLocking = false;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(innerFactory, "innerFactory");
            this.set_PoolSize(null);
            this.set_InnerFactory(innerFactory);
            this.set_CommandQueue(new System.Collections.Generic.Queue$1.ctor(System.Object.ctor));
            this.set_InnerExecutors(new System.Collections.Generic.HashSet$1.ctor(Neptuo.Pipelines.Commands.Execution.ICommandExecutor.ctor));
            this.set_IsUseLocking(isUseLocking);
        },
        CommandQueue$$: "System.Collections.Generic.Queue`1[[System.Object]]",
        get_CommandQueue: function (){
            return this._CommandQueue;
        },
        set_CommandQueue: function (value){
            this._CommandQueue = value;
        },
        PoolSize$$: "System.Nullable`1[[System.Int32]]",
        get_PoolSize: function (){
            return this._PoolSize;
        },
        set_PoolSize: function (value){
            this._PoolSize = value;
        },
        InnerFactory$$: "Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory",
        get_InnerFactory: function (){
            return this._InnerFactory;
        },
        set_InnerFactory: function (value){
            this._InnerFactory = value;
        },
        InnerExecutors$$: "System.Collections.Generic.HashSet`1[[Neptuo.Pipelines.Commands.Execution.ICommandExecutor]]",
        get_InnerExecutors: function (){
            return this._InnerExecutors;
        },
        set_InnerExecutors: function (value){
            this._InnerExecutors = value;
        },
        IsUseLocking$$: "System.Boolean",
        get_IsUseLocking: function (){
            return this._IsUseLocking;
        },
        set_IsUseLocking: function (value){
            this._IsUseLocking = value;
        },
        HasNextCommand$$: "System.Boolean",
        get_HasNextCommand: function (){
            return this.get_CommandQueue().get_Count() > 0;
        },
        ctor$$Int32$$ICommandExecutorFactory$$Boolean: function (poolSize, innerFactory, isUseLocking){
            this._CommandQueue = null;
            this._PoolSize = null;
            this._InnerFactory = null;
            this._InnerExecutors = null;
            this._IsUseLocking = false;
            Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.ctor$$ICommandExecutorFactory$$Boolean.call(this, innerFactory, isUseLocking);
            Neptuo.Ensure.Positive(poolSize, "poolSize");
            this.set_PoolSize(poolSize);
        },
        CreateExecutor: function (command){
            return this.CreatePoolExecutor(command);
        },
        CreatePoolExecutor: function (command){
            return new Neptuo.Pipelines.Commands.Execution.PoolCommandExecutor.ctor(this);
        },
        IsNextAvailable$$: "System.Boolean",
        get_IsNextAvailable: function (){
            var hasCommands = this.get_HasNextCommand();
            if (this.get_PoolSize() == null)
                return hasCommands;
            return this.get_InnerExecutors().get_Count() < this.get_PoolSize() && hasCommands;
        },
        AddCommand: function (command){
            Neptuo.Ensure.NotNull$$Object$$String(command, "command");
            this.get_CommandQueue().Enqueue(command);
        },
        NextCommand: function (){
            if (!this.get_HasNextCommand())
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Command queue is empty."), new Error());
            return this.get_CommandQueue().Dequeue();
        },
        CreateInnerExecutor: function (command){
            var executor = this.get_InnerFactory().CreateExecutor(command);
            this.get_InnerExecutors().Add(executor);
            return executor;
        },
        RemoveDoneExecutor: function (executor){
            this.get_InnerExecutors().Remove(executor);
        },
        ExecuteLocked: function (action){
            Neptuo.Ensure.NotNull$$Object$$String(action, "action");
            if (this.get_IsUseLocking()){
                action();
            }
            else {
                action();
            }
        }
    },
    ctors: [{
        name: "ctor$$ICommandExecutorFactory$$Boolean",
        parameters: ["Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory", "System.Boolean"]
    }, {
        name: "ctor$$Int32$$ICommandExecutorFactory$$Boolean",
        parameters: ["System.Int32", "Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory", "System.Boolean"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$Execution$PoolCommandExecutorFactory);
var Neptuo$Pipelines$Commands$Execution$ThreadPoolCommandExecutor = {
    fullname: "Neptuo.Pipelines.Commands.Execution.ThreadPoolCommandExecutor",
    baseTypeName: "Neptuo.Pipelines.Commands.Execution.PoolCommandExecutor",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (poolFactory){
            Neptuo.Pipelines.Commands.Execution.PoolCommandExecutor.ctor.call(this, poolFactory);
        },
        DoHandleCommand: function (executor, command){
            var thread = new System.Threading.Thread.ctor$$ParameterizedThreadStart($CreateDelegate(executor, executor.Handle));
            thread.Start$$Object(command);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Pipelines.Commands.Execution.ThreadPoolCommandExecutorFactory"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$Execution$ThreadPoolCommandExecutor);
var Neptuo$Pipelines$Commands$Execution$ThreadPoolCommandExecutorFactory = {
    fullname: "Neptuo.Pipelines.Commands.Execution.ThreadPoolCommandExecutorFactory",
    baseTypeName: "Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor$$ICommandExecutorFactory: function (innerFactory){
            Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.ctor$$ICommandExecutorFactory$$Boolean.call(this, innerFactory, true);
        },
        ctor$$Int32$$ICommandExecutorFactory: function (poolSize, innerFactory){
            Neptuo.Pipelines.Commands.Execution.PoolCommandExecutorFactory.ctor$$Int32$$ICommandExecutorFactory$$Boolean.call(this, poolSize, innerFactory, true);
        },
        CreatePoolExecutor: function (command){
            return new Neptuo.Pipelines.Commands.Execution.ThreadPoolCommandExecutor.ctor(this);
        }
    },
    ctors: [{
        name: "ctor$$ICommandExecutorFactory",
        parameters: ["Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory"]
    }, {
        name: "ctor$$Int32$$ICommandExecutorFactory",
        parameters: ["System.Int32", "Neptuo.Pipelines.Commands.Execution.ICommandExecutorFactory"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$Execution$ThreadPoolCommandExecutorFactory);
var Neptuo$Pipelines$Commands$Handlers$ICommandHandler$1 = {
    fullname: "Neptuo.Pipelines.Commands.Handlers.ICommandHandler$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Commands$Handlers$ICommandHandler$1);
var Neptuo$Pipelines$Commands$ICommand = {
    fullname: "Neptuo.Pipelines.Commands.ICommand",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Commands$ICommand);
var Neptuo$Pipelines$Commands$ICommandDispatcher = {
    fullname: "Neptuo.Pipelines.Commands.ICommandDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Commands$ICommandDispatcher);
var Neptuo$Pipelines$Commands$Interception$AttributeInterceptorProvider = {
    fullname: "Neptuo.Pipelines.Commands.Interception.AttributeInterceptorProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Commands.Interception.IInterceptorProvider"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        GetInterceptors: function (commandHandler, command, commandHandlerMethod){
            Neptuo.Ensure.NotNull$$Object$$String(commandHandler, "commandHandler");
            var result = new System.Collections.Generic.List$1.ctor(Neptuo.Pipelines.Commands.Interception.IDecoratedInvoke.ctor);
            this.AppendInterceptors(commandHandler.GetType(), result);
            this.AppendInterceptors(commandHandlerMethod, result);
            return result;
        },
        AppendInterceptors: function (source, result){
            var $it10 = source.GetCustomAttributes$$Boolean(true).GetEnumerator();
            while ($it10.MoveNext()){
                var attribute = $it10.get_Current();
                var interceptor = As(attribute, Neptuo.Pipelines.Commands.Interception.IDecoratedInvoke.ctor);
                if (interceptor != null)
                    result.Add(interceptor);
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$Interception$AttributeInterceptorProvider);
var Neptuo$Pipelines$Commands$Interception$DiscardExceptionAttribute = {
    fullname: "Neptuo.Pipelines.Commands.Interception.DiscardExceptionAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Commands.Interception.IDecoratedInvoke"],
    Kind: "Class",
    definition: {
        ctor: function (execeptions){
            this._Exceptions = null;
            System.Attribute.ctor.call(this);
            this.set_Exceptions((execeptions != null ? execeptions : System.Linq.Enumerable.Empty$1(System.Type.ctor)));
        },
        Exceptions$$: "System.Collections.Generic.IEnumerable`1[[System.Type]]",
        get_Exceptions: function (){
            return this._Exceptions;
        },
        set_Exceptions: function (value){
            this._Exceptions = value;
        },
        OnInvoke: function (context){
            context.Next();
            if (context.get_Exception() != null && System.Linq.Enumerable.Contains$1$$IEnumerable$1$$TSource(System.Type.ctor, this.get_Exceptions(), context.get_Exception().GetType()))
                context.set_Exception(null);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Type[]"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$Interception$DiscardExceptionAttribute);
var Neptuo$Pipelines$Commands$Interception$IDecoratedInvoke = {
    fullname: "Neptuo.Pipelines.Commands.Interception.IDecoratedInvoke",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Commands$Interception$IDecoratedInvoke);
var Neptuo$Pipelines$Commands$Interception$IDecoratedInvokeContext = {
    fullname: "Neptuo.Pipelines.Commands.Interception.IDecoratedInvokeContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Commands$Interception$IDecoratedInvokeContext);
var Neptuo$Pipelines$Commands$Interception$IInterceptorProvider = {
    fullname: "Neptuo.Pipelines.Commands.Interception.IInterceptorProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Commands$Interception$IInterceptorProvider);
var Neptuo$Pipelines$Commands$Interception$ManualInterceptorProvider = {
    fullname: "Neptuo.Pipelines.Commands.Interception.ManualInterceptorProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Commands.Interception.IInterceptorProvider"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyProvider){
            this.dependencyProvider = null;
            this._Storage = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            this.dependencyProvider = dependencyProvider;
            this.set_Storage(new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Collections.Generic.List$1.ctor));
        },
        Storage$$: "System.Collections.Generic.Dictionary`2[[System.Type],[System.Collections.Generic.List`1[[System.Func`2[[Neptuo.Activators.IDependencyProvider],[Neptuo.Pipelines.Commands.Interception.IDecoratedInvoke]]]]]]",
        get_Storage: function (){
            return this._Storage;
        },
        set_Storage: function (value){
            this._Storage = value;
        },
        AddInterceptorType: function (commandHandlerType, interceptorType){
            Neptuo.Ensure.NotNull$$Object$$String(commandHandlerType, "commandHandlerType");
            Neptuo.Ensure.NotNull$$Object$$String(interceptorType, "interceptorType");
            return this.AddInterceptorFactory(commandHandlerType, $CreateAnonymousDelegate(this, function (provider){
                return Cast(provider.Resolve(interceptorType), Neptuo.Pipelines.Commands.Interception.IDecoratedInvoke.ctor);
            }));
        },
        AddInterceptorFactory: function (commandHandlerType, factory){
            Neptuo.Ensure.NotNull$$Object$$String(commandHandlerType, "commandHandlerType");
            Neptuo.Ensure.NotNull$$Object$$String(factory, "factory");
            var interceptorTypes;
            if (!(function (){
                var $1 = {
                    Value: interceptorTypes
                };
                var $res = this.get_Storage().TryGetValue(commandHandlerType, $1);
                interceptorTypes = $1.Value;
                return $res;
            }).call(this))
                this.get_Storage().set_Item$$TKey(commandHandlerType, interceptorTypes = new System.Collections.Generic.List$1.ctor(System.Func$2.ctor));
            interceptorTypes.Add(factory);
            return this;
        },
        GetInterceptors: function (commandHandler, command, commandHandlerMethod){
            Neptuo.Ensure.NotNull$$Object$$String(commandHandler, "commandHandler");
            var commandHandlerType = commandHandler.GetType();
            var interceptorFactories;
            if (!(function (){
                var $1 = {
                    Value: interceptorFactories
                };
                var $res = this.get_Storage().TryGetValue(commandHandlerType, $1);
                interceptorFactories = $1.Value;
                return $res;
            }).call(this))
                interceptorFactories = new System.Collections.Generic.List$1.ctor(System.Func$2.ctor);
            var result = new System.Collections.Generic.List$1.ctor(Neptuo.Pipelines.Commands.Interception.IDecoratedInvoke.ctor);
            var $it11 = interceptorFactories.GetEnumerator();
            while ($it11.MoveNext()){
                var interceptorFactory = $it11.get_Current();
                result.Add(interceptorFactory(this.dependencyProvider));
            }
            return result;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Activators.IDependencyProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Commands$Interception$ManualInterceptorProvider);
var Neptuo$Pipelines$Deleters$DefaultDeleteDispatcher = {
    fullname: "Neptuo.Pipelines.Deleters.DefaultDeleteDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Deleters.IDeleteDispatcher"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.handlers = Neptuo.Collections.Generic.ConcurrentAwareDictionaryActivator$2.get_Instance().Create();
            this.onSearchHandler = new Neptuo.ComponentModel.OutFuncCollection$3.ctor(System.String.ctor, Neptuo.Pipelines.Deleters.Handlers.IDeleteHandler.ctor, System.Boolean.ctor);
            System.Object.ctor.call(this);
        },
        Add: function (objectType, handler){
            Neptuo.Ensure.NotNull$$Object$$String(objectType, "objectType");
            Neptuo.Ensure.NotNull$$Object$$String(handler, "handler");
            this.handlers.set_Item$$TKey(objectType, handler);
            return this;
        },
        AddSearchHandler: function (searchHandler){
            Neptuo.Ensure.NotNull$$Object$$String(searchHandler, "searchHandler");
            this.onSearchHandler.Add(searchHandler);
            return this;
        },
        PrepareContext: function (key){
            Neptuo.Ensure.NotNull$$Object$$String(key, "key");
            var handler;
            if ((function (){
                var $1 = {
                    Value: handler
                };
                var $res = this.handlers.TryGetValue(key.get_Type(), $1);
                handler = $1.Value;
                return $res;
            }).call(this))
                return handler.Handle(key);
            if ((function (){
                var $1 = {
                    Value: handler
                };
                var $res = Neptuo.ComponentModel._OutFuncCollectionExtensions.TryExecute$2(System.String.ctor, Neptuo.Pipelines.Deleters.Handlers.IDeleteHandler.ctor, this.onSearchHandler, key.get_Type(), $1);
                handler = $1.Value;
                return $res;
            }).call(this))
                return handler.Handle(key);
            return new Neptuo.Pipelines.Deleters.MissingHandlerContext.ctor(key);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Deleters$DefaultDeleteDispatcher);
var Neptuo$Pipelines$Deleters$Handlers$IDeleteExecutionHandler = {
    fullname: "Neptuo.Pipelines.Deleters.Handlers.IDeleteExecutionHandler",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Deleters$Handlers$IDeleteExecutionHandler);
var Neptuo$Pipelines$Deleters$Handlers$IDeleteHandler = {
    fullname: "Neptuo.Pipelines.Deleters.Handlers.IDeleteHandler",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Deleters$Handlers$IDeleteHandler);
var Neptuo$Pipelines$Deleters$IDeleteContext = {
    fullname: "Neptuo.Pipelines.Deleters.IDeleteContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Deleters$IDeleteContext);
var Neptuo$Pipelines$Deleters$IDeleteDispatcher = {
    fullname: "Neptuo.Pipelines.Deleters.IDeleteDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Deleters$IDeleteDispatcher);
var Neptuo$Pipelines$Deleters$IDeleteReference = {
    fullname: "Neptuo.Pipelines.Deleters.IDeleteReference",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Deleters$IDeleteReference);
var Neptuo$Pipelines$Deleters$MissingHandlerContext = {
    fullname: "Neptuo.Pipelines.Deleters.MissingHandlerContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Deleters.IDeleteContext"],
    Kind: "Class",
    definition: {
        ctor: function (sourceKey){
            this._SourceKey = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(sourceKey, "sourceKey");
            this.set_SourceKey(sourceKey);
        },
        SourceKey$$: "Neptuo.DomainModels.IKey",
        get_SourceKey: function (){
            return this._SourceKey;
        },
        set_SourceKey: function (value){
            this._SourceKey = value;
        },
        CanDelete$$: "System.Boolean",
        get_CanDelete: function (){
            return false;
        },
        References$$: "System.Collections.Generic.IEnumerable`1[[Neptuo.Pipelines.Deleters.IDeleteReference]]",
        get_References: function (){
            return System.Linq.Enumerable.Empty$1(Neptuo.Pipelines.Deleters.IDeleteReference.ctor);
        },
        Delete: function (){
            throw $CreateException(Neptuo._EnsureSystemExtensions.NotSupported(Neptuo.Ensure.Exception, null), new Error());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.DomainModels.IKey"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Deleters$MissingHandlerContext);
var Neptuo$Pipelines$Events$Handlers$ActivatorEventHandler$2 = {
    fullname: "Neptuo.Pipelines.Events.Handlers.ActivatorEventHandler$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Events.Handlers.IEventHandler$1"],
    Kind: "Class",
    definition: {
        ctor: function (TEventHandler, TEvent, innerHandlerFactory){
            this.TEventHandler = TEventHandler;
            this.TEvent = TEvent;
            this.innerHandlerFactory = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(innerHandlerFactory, "innerHandlerFactory");
            this.innerHandlerFactory = innerHandlerFactory;
        },
        HandleAsync: function (payload){
            var innerHandler = this.innerHandlerFactory.Create();
            return innerHandler.HandleAsync(payload);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Activators.IActivator"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Events$Handlers$ActivatorEventHandler$2);
var Neptuo$Pipelines$Events$Handlers$DefaultEventHandlerContext$1 = {
    fullname: "Neptuo.Pipelines.Events.Handlers.DefaultEventHandlerContext$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Events.Handlers.IEventHandlerContext$1"],
    Kind: "Class",
    definition: {
        ctor$$TEvent$$IEventRegistry$$IEventDispatcher: function (TEvent, payload, registry, dispatcher){
            this.TEvent = TEvent;
            this._Payload = null;
            this._Registry = null;
            this._Dispatcher = null;
            Neptuo.Pipelines.Events.Handlers.DefaultEventHandlerContext$1.ctor$$Envelope$1$$IEventRegistry$$IEventDispatcher.call(this, this.TEvent, Neptuo.ComponentModel.Envelope.Create$1(this.TEvent, payload), registry, dispatcher);
        },
        Payload$$: "Neptuo.ComponentModel.Envelope`1[[`0]]",
        get_Payload: function (){
            return this._Payload;
        },
        set_Payload: function (value){
            this._Payload = value;
        },
        Registry$$: "Neptuo.Pipelines.Events.IEventRegistry",
        get_Registry: function (){
            return this._Registry;
        },
        set_Registry: function (value){
            this._Registry = value;
        },
        Dispatcher$$: "Neptuo.Pipelines.Events.IEventDispatcher",
        get_Dispatcher: function (){
            return this._Dispatcher;
        },
        set_Dispatcher: function (value){
            this._Dispatcher = value;
        },
        ctor$$Envelope$1$$IEventRegistry$$IEventDispatcher: function (TEvent, payload, registry, dispatcher){
            this.TEvent = TEvent;
            this._Payload = null;
            this._Registry = null;
            this._Dispatcher = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(payload, "payload");
            Neptuo.Ensure.NotNull$$Object$$String(registry, "registry");
            Neptuo.Ensure.NotNull$$Object$$String(dispatcher, "dispatcher");
            this.set_Payload(payload);
            this.set_Registry(registry);
            this.set_Dispatcher(dispatcher);
        }
    },
    ctors: [{
        name: "ctor$$TEvent$$IEventRegistry$$IEventDispatcher",
        parameters: ["TEvent", "Neptuo.Pipelines.Events.IEventRegistry", "Neptuo.Pipelines.Events.IEventDispatcher"]
    }, {
        name: "ctor$$Envelope$$IEventRegistry$$IEventDispatcher",
        parameters: ["Neptuo.ComponentModel.Envelope", "Neptuo.Pipelines.Events.IEventRegistry", "Neptuo.Pipelines.Events.IEventDispatcher"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Events$Handlers$DefaultEventHandlerContext$1);
var Neptuo$Pipelines$Events$Handlers$IEventHandlerContext$1 = {
    fullname: "Neptuo.Pipelines.Events.Handlers.IEventHandlerContext$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Events$Handlers$IEventHandlerContext$1);
var Neptuo$Pipelines$Events$Handlers$WeakEventHandler$1 = {
    fullname: "Neptuo.Pipelines.Events.Handlers.WeakEventHandler$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Events.Handlers.IEventHandler$1"],
    Kind: "Class",
    definition: {
        ctor: function (TEvent, innerHandler){
            this.TEvent = TEvent;
            this.innerHandler = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(innerHandler, "innerHandler");
            this.innerHandler = new System.WeakReference$1.ctor$$T(Neptuo.Pipelines.Events.Handlers.IEventHandler$1.ctor, innerHandler);
        },
        HandleAsync: function (context){
            var target;
            if ((function (){
                var $1 = {
                    Value: target
                };
                var $res = this.innerHandler.TryGetTarget($1);
                target = $1.Value;
                return $res;
            }).call(this))
                return target.HandleAsync(context.get_Payload().get_Body());
            else
                context.get_Registry().UnSubscribe$1(Neptuo.Pipelines.Events.Handlers.IEventHandlerContext$1.ctor, this);
            return System.Threading.Tasks.Task.FromResult$1(System.Boolean.ctor, false);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Pipelines.Events.Handlers.IEventHandler"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Events$Handlers$WeakEventHandler$1);
var Neptuo$Pipelines$Events$IEventRegistry = {
    fullname: "Neptuo.Pipelines.Events.IEventRegistry",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Events$IEventRegistry);
var Neptuo$Pipelines$Internals$ThreeBranchStorage = {
    fullname: "Neptuo.Pipelines.Internals.ThreeBranchStorage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.directHandlers = null;
            this.envelopeHandlers = null;
            this.contextHandlers = null;
            System.Object.ctor.call(this);
        },
        AddHandlerInternal: function (eventType, storage, handler){
            var handlers;
            if (!(function (){
                var $1 = {
                    Value: handlers
                };
                var $res = storage.TryGetValue(eventType, $1);
                handlers = $1.Value;
                return $res;
            }).call(this))
                storage.set_Item$$TKey(eventType, handlers = new System.Collections.Generic.List$1.ctor(System.Object.ctor));
            handlers.Add(handler);
        },
        AddDirectHandler: function (eventType, handler){
            if (this.directHandlers == null)
                this.directHandlers = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Collections.Generic.List$1.ctor);
            this.AddHandlerInternal(eventType, this.directHandlers, handler);
        },
        AddEnvelopeHandler: function (eventType, handler){
            if (this.envelopeHandlers == null)
                this.envelopeHandlers = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Collections.Generic.List$1.ctor);
            this.AddHandlerInternal(eventType, this.envelopeHandlers, handler);
        },
        AddContextHandler: function (eventType, handler){
            if (this.contextHandlers == null)
                this.contextHandlers = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Collections.Generic.List$1.ctor);
            this.AddHandlerInternal(eventType, this.contextHandlers, handler);
        },
        RemoveHandlerInternal: function (eventType, storage, handler){
            if (storage != null){
                var handlers;
                if ((function (){
                    var $1 = {
                        Value: handlers
                    };
                    var $res = storage.TryGetValue(eventType, $1);
                    handlers = $1.Value;
                    return $res;
                }).call(this))
                    handlers.Remove(handler);
            }
        },
        RemoveDirectHandler: function (eventType, handler){
            this.RemoveHandlerInternal(eventType, this.directHandlers, handler);
        },
        RemoveEnvelopeHandler: function (eventType, handler){
            this.RemoveHandlerInternal(eventType, this.envelopeHandlers, handler);
        },
        RemoveContextHandler: function (eventType, handler){
            this.RemoveHandlerInternal(eventType, this.contextHandlers, handler);
        },
        GetHandlersInternal: function (eventType, storage, includeSubTypes){
            if (storage != null){
                var handlers;
                if ((function (){
                    var $1 = {
                        Value: handlers
                    };
                    var $res = storage.TryGetValue(eventType, $1);
                    handlers = $1.Value;
                    return $res;
                }).call(this))
                    return handlers;
            }
            return System.Linq.Enumerable.Empty$1(System.Object.ctor);
        },
        GetDirectHandlers: function (eventType){
            return System.Linq.Enumerable.ToArray$1(System.Object.ctor, this.GetHandlersInternal(eventType, this.directHandlers, true));
        },
        GetEnvelopeHandlers: function (eventType){
            return System.Linq.Enumerable.ToArray$1(System.Object.ctor, this.GetHandlersInternal(eventType, this.envelopeHandlers, true));
        },
        GetContextHandlers: function (eventType){
            return System.Linq.Enumerable.ToArray$1(System.Object.ctor, this.GetHandlersInternal(eventType, this.contextHandlers, true));
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Internals$ThreeBranchStorage);
var Neptuo$Pipelines$Internals$TypeResolver = {
    fullname: "Neptuo.Pipelines.Internals.TypeResolver",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (contextType){
            this.contextType = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(contextType, "contextType");
            this.contextType = contextType;
        },
        Resolve: function (targetType){
            Neptuo.Ensure.NotNull$$Object$$String(targetType, "targetType");
            return new Neptuo.Pipelines.Internals.TypeResolverResult.ctor(this.contextType, targetType);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Type"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Internals$TypeResolver);
var Neptuo$Pipelines$Internals$TypeResolverResult = {
    fullname: "Neptuo.Pipelines.Internals.TypeResolverResult",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (contextType, targetType){
            this.contextType = null;
            this.targetType = null;
            this._IsContext = false;
            this._IsEnvelope = false;
            this._DataType = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(contextType, "contextType");
            Neptuo.Ensure.NotNull$$Object$$String(targetType, "targetType");
            this.contextType = contextType;
            this.targetType = targetType;
            if (targetType.get_IsGenericType()){
                var genericType = targetType.GetGenericTypeDefinition();
                this.set_IsContext(contextType.IsAssignableFrom(genericType));
                this.set_IsEnvelope(Typeof(Neptuo.ComponentModel.Envelope$1.ctor).IsAssignableFrom(genericType));
                this.set_DataType(System.Linq.Enumerable.First$1$$IEnumerable$1(System.Type.ctor, targetType.GetGenericArguments()));
            }
            else {
                this.set_DataType(targetType);
            }
        },
        IsContext$$: "System.Boolean",
        get_IsContext: function (){
            return this._IsContext;
        },
        set_IsContext: function (value){
            this._IsContext = value;
        },
        IsEnvelope$$: "System.Boolean",
        get_IsEnvelope: function (){
            return this._IsEnvelope;
        },
        set_IsEnvelope: function (value){
            this._IsEnvelope = value;
        },
        DataType$$: "System.Type",
        get_DataType: function (){
            return this._DataType;
        },
        set_DataType: function (value){
            this._DataType = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Type", "System.Type"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Internals$TypeResolverResult);
var Neptuo$Pipelines$Replying$DependencyRequestDispatcher = {
    fullname: "Neptuo.Pipelines.Replying.DependencyRequestDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Replying.IRequestDispatcher"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyProvider){
            this.dependencyProvider = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            this.dependencyProvider = dependencyProvider;
        },
        ExecuteAsync$2: function (TInput, TOutput, request){
            var handler = Neptuo.Activators._DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.Pipelines.Replying.Handlers.IRequestHandler$2.ctor, this.dependencyProvider);
            return handler.HandleAsync(request);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Activators.IDependencyProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Replying$DependencyRequestDispatcher);
var Neptuo$Pipelines$Replying$IRequestDispatcher = {
    fullname: "Neptuo.Pipelines.Replying.IRequestDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Replying$IRequestDispatcher);
var Neptuo$Pipelines$Replying$IRequest$1 = {
    fullname: "Neptuo.Pipelines.Replying.IRequest$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Replying$IRequest$1);
var Neptuo$Pipelines$Replying$Handlers$IRequestHandler$2 = {
    fullname: "Neptuo.Pipelines.Replying.Handlers.IRequestHandler$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Replying$Handlers$IRequestHandler$2);
var Neptuo$Pipelines$Queries$IQuery$1 = {
    fullname: "Neptuo.Pipelines.Queries.IQuery$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Queries$IQuery$1);
var Neptuo$Pipelines$Queries$IQueryDispatcher = {
    fullname: "Neptuo.Pipelines.Queries.IQueryDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Queries$IQueryDispatcher);
var Neptuo$Pipelines$Queries$Handlers$IQueryHandler$2 = {
    fullname: "Neptuo.Pipelines.Queries.Handlers.IQueryHandler$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Queries$Handlers$IQueryHandler$2);
var Neptuo$Pipelines$Replying$_RequestDispatcherExtensions = {
    fullname: "Neptuo.Pipelines.Replying._RequestDispatcherExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Execute$2: function (TInput, TOutput, mediator, request){
            Neptuo.Ensure.NotNull$$Object$$String(mediator, "mediator");
            return mediator.ExecuteAsync$2(TInput, TOutput, request);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Replying$_RequestDispatcherExtensions);
var Neptuo$Diagnostics$DebugBase = {
    fullname: "Neptuo.Diagnostics.DebugBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor$$DebugMessageWriter: function (innerWriter){
            this.innerWriter = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(innerWriter, "innerWriter");
            this.set_InnerWriter(innerWriter);
        },
        InnerWriter$$: "Neptuo.Diagnostics.DebugBase+DebugMessageWriter",
        get_InnerWriter: function (){
            return this.innerWriter;
        },
        set_InnerWriter: function (value){
            if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(value, null))
                this.innerWriter = value;
        },
        ctor$$TextWriter: function (innerWriter){
            this.innerWriter = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(innerWriter, "innerWriter");
            this.set_InnerWriter($CreateDelegate(innerWriter, innerWriter.WriteLine$$String$$Object$Array));
        },
        Debug$$String$$Action: function (title, action){
            Neptuo.Ensure.NotNull$$Object$$String(title, "title");
            Neptuo.Ensure.NotNull$$Object$$String(action, "action");
            var sw = new System.Diagnostics.Stopwatch.ctor();
            sw.Start();
            action();
            sw.Stop();
            this.get_InnerWriter()("{0}: {1}ms", title, sw.get_ElapsedMilliseconds());
        },
        DebugIteration$$String$$Int32$$Action: function (title, count, action){
            Neptuo.Ensure.NotNull$$Object$$String(title, "title");
            Neptuo.Ensure.PositiveOrZero(count, "count");
            Neptuo.Ensure.NotNull$$Object$$String(action, "action");
            this.Debug$$String$$Action(title, $CreateAnonymousDelegate(this, function (){
                for (var i = 0; i < count; i++)
                    action();
            }));
        },
        Debug$1$$String$$Func$1: function (T, title, action){
            Neptuo.Ensure.NotNull$$Object$$String(title, "title");
            Neptuo.Ensure.NotNull$$Object$$String(action, "action");
            var sw = new System.Diagnostics.Stopwatch.ctor();
            sw.Start();
            var result = action();
            sw.Stop();
            this.get_InnerWriter()("{0}: {1}ms", title, sw.get_ElapsedMilliseconds());
            return result;
        },
        DebugIteration$1$$String$$Int32$$Func$1: function (T, title, count, action){
            Neptuo.Ensure.NotNull$$Object$$String(title, "title");
            Neptuo.Ensure.PositiveOrZero(count, "count");
            Neptuo.Ensure.NotNull$$Object$$String(action, "action");
            return this.Debug$1$$String$$Func$1(System.Collections.Generic.List$1.ctor, title, $CreateAnonymousDelegate(this, function (){
                var result = new System.Collections.Generic.List$1.ctor(T);
                for (var i = 0; i < count; i++)
                    action();
                return result;
            }));
        }
    },
    ctors: [{
        name: "ctor$$DebugMessageWriter",
        parameters: ["Neptuo.Diagnostics.DebugBase.DebugMessageWriter"]
    }, {
        name: "ctor$$TextWriter",
        parameters: ["System.IO.TextWriter"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Diagnostics$DebugBase);
var Neptuo$Diagnostics$DebugBase$DebugMessageWriter = {
    fullname: "Neptuo.Diagnostics.DebugBase.DebugMessageWriter",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object", "System.IntPtr"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Diagnostics$DebugBase$DebugMessageWriter);
var Neptuo$Diagnostics$DebugHelper = {
    fullname: "Neptuo.Diagnostics.DebugHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Diagnostics.DebugHelper.debugLock = new System.Object.ctor();
            Neptuo.Diagnostics.DebugHelper.debug = null;
        },
        EnsureDebug: function (){
            if (Neptuo.Diagnostics.DebugHelper.debug == null){
                if (Neptuo.Diagnostics.DebugHelper.debug == null)
                    Neptuo.Diagnostics.DebugHelper.debug = new Neptuo.Diagnostics.DebugBase.ctor$$TextWriter(System.Console.get_Out());
            }
        },
        Debug$$String$$Action: function (title, action){
            Neptuo.Diagnostics.DebugHelper.EnsureDebug();
            Neptuo.Diagnostics.DebugHelper.debug.Debug$$String$$Action(title, action);
        },
        DebugIteration$$String$$Int32$$Action: function (title, count, action){
            Neptuo.Diagnostics.DebugHelper.EnsureDebug();
            Neptuo.Diagnostics.DebugHelper.debug.DebugIteration$$String$$Int32$$Action(title, count, action);
        },
        Debug$1$$String$$Func$1: function (T, title, action){
            Neptuo.Diagnostics.DebugHelper.EnsureDebug();
            return Neptuo.Diagnostics.DebugHelper.debug.Debug$1$$String$$Func$1(T, title, action);
        },
        DebugIteration$1$$String$$Int32$$Func$1: function (T, title, count, action){
            Neptuo.Diagnostics.DebugHelper.EnsureDebug();
            return Neptuo.Diagnostics.DebugHelper.debug.DebugIteration$1$$String$$Int32$$Func$1(T, title, count, action);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Diagnostics$DebugHelper);
var Neptuo$DomainModels$IDomainModel$1 = {
    fullname: "Neptuo.DomainModels.IDomainModel$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$DomainModels$IDomainModel$1);
var Neptuo$DomainModels$Int32Key = {
    fullname: "Neptuo.DomainModels.Int32Key",
    baseTypeName: "Neptuo.DomainModels.KeyBase",
    staticDefinition: {
        cctor: function (){
        },
        Create: function (id, type){
            Neptuo.Ensure.Positive(id, "id");
            Neptuo.Ensure.NotNullOrEmpty(type, "type");
            return new Neptuo.DomainModels.Int32Key.ctor$$Int32$$String(id, type);
        },
        Empty: function (type){
            Neptuo.Ensure.NotNullOrEmpty(type, "type");
            return new Neptuo.DomainModels.Int32Key.ctor$$String(type);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor$$String: function (type){
            this._ID = 0;
            Neptuo.DomainModels.KeyBase.ctor.call(this, type, true);
        },
        ID$$: "System.Int32",
        get_ID: function (){
            return this._ID;
        },
        set_ID: function (value){
            this._ID = value;
        },
        ctor$$Int32$$String: function (id, type){
            this._ID = 0;
            Neptuo.DomainModels.KeyBase.ctor.call(this, type, false);
            this.set_ID(id);
        },
        Equals$$KeyBase: function (other){
            var key;
            if ((function (){
                var $1 = {
                    Value: key
                };
                var $res = Neptuo.Converts.Try$2$$TSource$$TTarget(Neptuo.DomainModels.IKey.ctor, Neptuo.DomainModels.Int32Key.ctor, other, $1);
                key = $1.Value;
                return $res;
            }).call(this))
                return false;
            return this.get_ID() == key.get_ID();
        },
        CompareValueTo: function (other){
            var key;
            if ((function (){
                var $1 = {
                    Value: key
                };
                var $res = Neptuo.Converts.Try$2$$TSource$$TTarget(Neptuo.DomainModels.IKey.ctor, Neptuo.DomainModels.Int32Key.ctor, other, $1);
                key = $1.Value;
                return $res;
            }).call(this))
                return 1;
            return this.get_ID().CompareTo$$Int32(key.get_ID());
        },
        GetValueHashCode: function (){
            return this.get_ID().GetHashCode();
        }
    },
    ctors: [{
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor$$Int32$$String",
        parameters: ["System.Int32", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$DomainModels$Int32Key);
var Neptuo$DomainModels$IValidatableModel = {
    fullname: "Neptuo.DomainModels.IValidatableModel",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$DomainModels$IValidatableModel);
var Neptuo$DomainModels$IKey = {
    fullname: "Neptuo.DomainModels.IKey",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["System.IEquatable$1", "System.IComparable"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$DomainModels$IKey);
var Neptuo$DomainModels$IReadOnlyRepository$2 = {
    fullname: "Neptuo.DomainModels.IReadOnlyRepository$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$DomainModels$IReadOnlyRepository$2);
var Neptuo$DomainModels$IRepository$2 = {
    fullname: "Neptuo.DomainModels.IRepository$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$DomainModels$IRepository$2);
var Neptuo$DomainModels$KeyBase = {
    fullname: "Neptuo.DomainModels.KeyBase",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.DomainModels.KeyBase.hashPrimeNumber = 216613626;
            Neptuo.DomainModels.KeyBase.hashPrimeNumberField = 16777619;
        }
    },
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.DomainModels.IKey"],
    Kind: "Class",
    definition: {
        ctor: function (type, isEmpty){
            this._Type = null;
            this._IsEmpty = false;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNullOrEmpty(type, "type");
            this.set_Type(type);
            this.set_IsEmpty(isEmpty);
        },
        Type$$: "System.String",
        get_Type: function (){
            return this._Type;
        },
        set_Type: function (value){
            this._Type = value;
        },
        IsEmpty$$: "System.Boolean",
        get_IsEmpty: function (){
            return this._IsEmpty;
        },
        set_IsEmpty: function (value){
            this._IsEmpty = value;
        },
        Equals$$Object: function (obj){
            return this.Equals$$IKey(As(obj, Neptuo.DomainModels.IKey.ctor));
        },
        Equals$$IKey: function (other){
            var key = As(other, Neptuo.DomainModels.KeyBase.ctor);
            if (key == null)
                return false;
            if (this.get_IsEmpty() != key.get_IsEmpty())
                return false;
            if (this.get_Type() != key.get_Type())
                return false;
            return this.Equals$$KeyBase(key);
        },
        CompareTo: function (obj){
            var key = As(obj, Neptuo.DomainModels.KeyBase.ctor);
            if (key == null)
                return 1;
            var typeCompare = this.get_Type().CompareTo$$String(key.get_Type());
            if (typeCompare == 0)
                return this.CompareValueTo(key);
            return typeCompare;
        },
        GetHashCode: function (){
            var hash = 216613626;
            hash = hash * 16777619 ^ this.get_Type().GetHashCode();
            hash = !this.get_IsEmpty() ? hash * 16777619 ^ this.GetValueHashCode() : hash * 16777619 ^ -1;
            return hash;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.Boolean"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$DomainModels$KeyBase);
var Neptuo$Engine = {
    fullname: "Neptuo.Engine",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Engine.environmentLock = new System.Object.ctor();
            Neptuo.Engine.environment = null;
        },
        RootContainer$$: "Neptuo.Activators.IDependencyContainer",
        get_RootContainer: function (){
            return Neptuo.Engine.get_Environment().With$1(Neptuo.Activators.IDependencyContainer.ctor, null);
        },
        Environment$$: "Neptuo.EngineEnvironment",
        get_Environment: function (){
            if (Neptuo.Engine.environment == null){
                if (Neptuo.Engine.environment == null)
                    Neptuo.Engine.environment = new Neptuo.EngineEnvironment.ctor();
            }
            return Neptuo.Engine.environment;
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Engine);
var Neptuo$EngineEnvironment = {
    fullname: "Neptuo.EngineEnvironment",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Collections.Generic.Dictionary$2.ctor);
            this.onSearchService = new Neptuo.ComponentModel.OutFuncCollection$3.ctor(System.Type.ctor, System.Object.ctor, System.Boolean.ctor);
            System.Object.ctor.call(this);
        },
        Use$1: function (T, service, name){
            Neptuo.Ensure.NotNull$$Object$$String(service, "instance");
            if (name == null)
                name = System.String.Empty;
            var serviceType = Typeof(T);
            var innerStorage;
            if (!(function (){
                var $1 = {
                    Value: innerStorage
                };
                var $res = this.storage.TryGetValue(serviceType, $1);
                innerStorage = $1.Value;
                return $res;
            }).call(this))
                innerStorage = (function ($p4){
                    this.storage.set_Item$$TKey(serviceType, $p4);
                    return $p4;
                }).call(this, new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Object.ctor));
            innerStorage.set_Item$$TKey(name, service);
            return this;
        },
        With$1: function (T, name){
            var service;
            if ((function (){
                var $1 = {
                    Value: service
                };
                var $res = this.TryWith$1(T, name, $1);
                service = $1.Value;
                return $res;
            }).call(this))
                return service;
            throw $CreateException(Neptuo._EnsureSystemExtensions.InvalidOperation(Neptuo.Ensure.Exception, "Service of type \'{0}\' is not registered under name \'{1}\'.", Typeof(T).get_FullName(), name), new Error());
        },
        Has$1: function (T, name){
            var service;
            return (function (){
                var $1 = {
                    Value: service
                };
                var $res = this.TryWith$1(T, name, $1);
                service = $1.Value;
                return $res;
            }).call(this);
        },
        TryWith$1: function (T, name, service){
            if (name == null)
                name = System.String.Empty;
            var serviceType = Typeof(T);
            var target;
            var innerStorage;
            if ((function (){
                var $1 = {
                    Value: innerStorage
                };
                var $res = this.storage.TryGetValue(serviceType, $1);
                innerStorage = $1.Value;
                return $res;
            }).call(this)){
                if ((function (){
                    var $1 = {
                        Value: target
                    };
                    var $res = innerStorage.TryGetValue(name, $1);
                    target = $1.Value;
                    return $res;
                }).call(this)){
                    service.Value = Cast(target, T);
                    return true;
                }
            }
            if (this.onSearchService != null){
                if ((function (){
                    var $1 = {
                        Value: target
                    };
                    var $res = Neptuo.ComponentModel._OutFuncCollectionExtensions.TryExecute$2(System.Type.ctor, System.Object.ctor, this.onSearchService, serviceType, $1);
                    target = $1.Value;
                    return $res;
                }).call(this)){
                    if (innerStorage == null)
                        this.storage.set_Item$$TKey(serviceType, innerStorage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Object.ctor));
                    innerStorage.set_Item$$TKey(name, target);
                    service.Value = Cast(target, T);
                    return true;
                }
            }
            service.Value = Default(T);
            return false;
        },
        AddSearchHandler: function (handler){
            Neptuo.Ensure.NotNull$$Object$$String(handler, "handler");
            this.onSearchService.Add(handler);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$EngineEnvironment);
var Neptuo$_EnsureArgumentExtensions = {
    fullname: "Neptuo._EnsureArgumentExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Argument: function (guard, argumentName, format, formatParameters){
            Neptuo.Ensure.NotNull$$Object$$String(guard, "guard");
            Neptuo.Ensure.NotNullOrEmpty(argumentName, "argumentName");
            Neptuo.Ensure.NotNullOrEmpty(format, "format");
            return new System.ArgumentException.ctor$$String$$String(argumentName, System.String.Format$$String$$Object$Array(format, formatParameters));
        },
        ArgumentNull: function (guard, argumentName, format, formatParameters){
            Neptuo.Ensure.NotNull$$Object$$String(guard, "guard");
            Neptuo.Ensure.NotNullOrEmpty(argumentName, "argumentName");
            Neptuo.Ensure.NotNullOrEmpty(format, "format");
            return new System.ArgumentNullException.ctor$$String$$String(argumentName, System.String.Format$$String$$Object$Array(format, formatParameters));
        },
        ArgumentOutOfRange: function (guard, argumentName, format, formatParameters){
            Neptuo.Ensure.NotNull$$Object$$String(guard, "guard");
            Neptuo.Ensure.NotNullOrEmpty(argumentName, "argumentName");
            Neptuo.Ensure.NotNullOrEmpty(format, "format");
            return new System.ArgumentOutOfRangeException.ctor$$String$$String(argumentName, System.String.Format$$String$$Object$Array(format, formatParameters));
        },
        ArgumentFileNotExist: function (guard, path, argumentName){
            return Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(guard, argumentName, "Path must point to an existing file, Path \'{0}\' doesn\'t exist.", path);
        },
        ArgumentDirectoryNotExist: function (guard, path, argumentName){
            return Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(guard, argumentName, "Path must point to an existing directory, Path \'{0}\' doesn\'t exist.", path);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$_EnsureArgumentExtensions);
var Neptuo$Pipelines$Events$DefaultEventManager = {
    fullname: "Neptuo.Pipelines.Events.DefaultEventManager",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Events.IEventDispatcher", "Neptuo.Pipelines.Events.IEventRegistry"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.eventTypeResolver = null;
            this.registry = null;
            System.Object.ctor.call(this);
            this.eventTypeResolver = new Neptuo.Pipelines.Internals.TypeResolver.ctor(Typeof(Neptuo.Pipelines.Events.Handlers.IEventHandlerContext$1.ctor));
            this.registry = new Neptuo.Pipelines.Internals.ThreeBranchStorage.ctor();
        },
        PublishAsync$1: function (TEvent, payload){
            Neptuo.Ensure.NotNull$$Object$$String(payload, "payload");
            var eventType = Typeof(TEvent);
            var eventTypeDescriptor = this.eventTypeResolver.Resolve(eventType);
            if (eventTypeDescriptor.get_IsContext())
                throw $CreateException(Neptuo._EnsureSystemExtensions.NotSupported(Neptuo.Ensure.Exception, "Event manager can publish event context."), new Error());
            if (eventTypeDescriptor.get_IsEnvelope()){
                var contextType = Typeof(Neptuo.Pipelines.Events.Handlers.DefaultEventHandlerContext$1.ctor).MakeGenericType(eventTypeDescriptor.get_DataType());
                var context = System.Activator.CreateInstance$$Type$$Object$Array(contextType, payload, this, this);
                var publishInternalMethod = Typeof(Neptuo.Pipelines.Events.DefaultEventManager.ctor).GetMethod$$String$$BindingFlags("PublishInternalAsyc", 36);
                if (System.Reflection.MethodInfo.op_Equality$$MethodInfo$$MethodInfo(publishInternalMethod, null))
                    throw $CreateException(Neptuo._EnsureSystemExtensions.NotImplemented(Neptuo.Ensure.Exception, "Bug in implementation of DefaultEventManager. Unnable to find publishing method."), new Error());
                return Cast(publishInternalMethod.MakeGenericMethod(eventTypeDescriptor.get_DataType()).Invoke$$Object$$Object$Array(this, [context]), System.Threading.Tasks.Task.ctor);
            }
            return this.PublishInternalAsyc$1(TEvent, new Neptuo.Pipelines.Events.Handlers.DefaultEventHandlerContext$1.ctor$$TEvent$$IEventRegistry$$IEventDispatcher(TEvent, payload, this, this));
        },
        PublishInternalAsyc$1: function (TEvent, context){
            var eventType = Typeof(TEvent);
            var contextHandlers = this.registry.GetContextHandlers(eventType);
            var envelopeHandlers = this.registry.GetEnvelopeHandlers(eventType);
            var directHandlers = this.registry.GetDirectHandlers(eventType);
            var tasks = new Array(contextHandlers.get_Length() + envelopeHandlers.get_Length() + directHandlers.get_Length());
            if (tasks.get_Length() == 0)
                return System.Threading.Tasks.Task.FromResult$1(System.Boolean.ctor, true);
            for (var i = 0; i < contextHandlers.get_Length(); i++)
                tasks[i] = (Cast(contextHandlers[i], Neptuo.Pipelines.Events.Handlers.IEventHandler$1.ctor)).HandleAsync(context);
            for (var i = 0; i < envelopeHandlers.get_Length(); i++)
                tasks[contextHandlers.get_Length() + i] = (Cast(envelopeHandlers[i], Neptuo.Pipelines.Events.Handlers.IEventHandler$1.ctor)).HandleAsync(context.get_Payload());
            for (var i = 0; i < directHandlers.get_Length(); i++)
                tasks[contextHandlers.get_Length() + envelopeHandlers.get_Length() + i] = (Cast(directHandlers[i], Neptuo.Pipelines.Events.Handlers.IEventHandler$1.ctor)).HandleAsync(context.get_Payload().get_Body());
            return System.Threading.Tasks.Task.get_Factory().ContinueWhenAll$1$$Task$Array$$Func$2(System.Threading.Tasks.Task$1.ctor, tasks, $CreateAnonymousDelegate(this, function (items){
                return System.Threading.Tasks.Task.FromResult$1(System.Boolean.ctor, true);
            }));
        },
        Subscribe$1: function (TEvent, handler){
            Neptuo.Ensure.NotNull$$Object$$String(handler, "handler");
            var eventType = Typeof(TEvent);
            var eventTypeDescriptor = this.eventTypeResolver.Resolve(eventType);
            if (eventTypeDescriptor.get_IsContext())
                this.registry.AddContextHandler(eventTypeDescriptor.get_DataType(), handler);
            else if (eventTypeDescriptor.get_IsEnvelope())
                this.registry.AddEnvelopeHandler(eventTypeDescriptor.get_DataType(), handler);
            else
                this.registry.AddDirectHandler(eventTypeDescriptor.get_DataType(), handler);
            return this;
        },
        UnSubscribe$1: function (TEvent, handler){
            Neptuo.Ensure.NotNull$$Object$$String(handler, "handler");
            var eventType = Typeof(TEvent);
            var eventTypeDescriptor = this.eventTypeResolver.Resolve(eventType);
            if (eventTypeDescriptor.get_IsContext())
                this.registry.RemoveContextHandler(eventTypeDescriptor.get_DataType(), handler);
            else if (eventTypeDescriptor.get_IsEnvelope())
                this.registry.RemoveEnvelopeHandler(eventTypeDescriptor.get_DataType(), handler);
            else
                this.registry.RemoveDirectHandler(eventTypeDescriptor.get_DataType(), handler);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Events$DefaultEventManager);
var Neptuo$Pipelines$Events$_EventRegistryExtensions = {
    fullname: "Neptuo.Pipelines.Events._EventRegistryExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Using$1: function (TEvent, eventRegistry, eventHandler){
            return new Neptuo.Pipelines.Events.UsignEventHandlerSubscriber$1.ctor(TEvent, eventRegistry, eventHandler);
        },
        SubscribeAll: function (eventRegistry, handler){
            Neptuo.Ensure.NotNull$$Object$$String(eventRegistry, "eventRegistry");
            Neptuo.Ensure.NotNull$$Object$$String(handler, "handler");
            var genericHandlerType = Typeof(Neptuo.Pipelines.Events.Handlers.IEventHandler$1.ctor);
            var $it12 = handler.GetType().GetInterfaces().GetEnumerator();
            while ($it12.MoveNext()){
                var interfaceType = $it12.get_Current();
                if (interfaceType.get_IsGenericType() && genericHandlerType.IsAssignableFrom(interfaceType)){
                    var arguments = interfaceType.GetGenericArguments();
                    if (arguments.get_Length() != 1)
                        continue;
                    throw $CreateException(new System.NotSupportedException.ctor(), new Error());
                }
            }
            return eventRegistry;
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Events$_EventRegistryExtensions);
var Neptuo$Pipelines$Events$UsignEventHandlerSubscriber$1 = {
    fullname: "Neptuo.Pipelines.Events.UsignEventHandlerSubscriber$1",
    baseTypeName: "Neptuo.ComponentModel.DisposableBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (TEvent, eventRegistry, eventHandler){
            this.TEvent = TEvent;
            this.eventRegistry = null;
            this.eventHandler = null;
            Neptuo.ComponentModel.DisposableBase.ctor.call(this);
            this.eventRegistry = eventRegistry;
            this.eventHandler = eventHandler;
            eventRegistry.Subscribe$1(this.TEvent, eventHandler);
        },
        DisposeManagedResources: function (){
            Neptuo.ComponentModel.DisposableBase.commonPrototype.DisposeManagedResources.call(this);
            this.eventRegistry.UnSubscribe$1(this.TEvent, this.eventHandler);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Pipelines.Events.IEventRegistry", "Neptuo.Pipelines.Events.Handlers.IEventHandler"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Events$UsignEventHandlerSubscriber$1);
var Neptuo$Pipelines$Events$Handlers$DelegateEventHandler = {
    fullname: "Neptuo.Pipelines.Events.Handlers.DelegateEventHandler",
    baseTypeName: "System.Object",
    staticDefinition: {
        FromAction$1: function (TEvent, action){
            Neptuo.Ensure.NotNull$$Object$$String(action, "action");
            return new Neptuo.Pipelines.Events.Handlers.DelegateEventHandler.EventHandler$1.ctor(TEvent, function (payload){
                action(payload);
                return System.Threading.Tasks.Task.FromResult$1(System.Boolean.ctor, true);
            });
        },
        FromFunc$1: function (TEvent, func){
            Neptuo.Ensure.NotNull$$Object$$String(func, "func");
            return new Neptuo.Pipelines.Events.Handlers.DelegateEventHandler.EventHandler$1.ctor(TEvent, func);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Events$Handlers$DelegateEventHandler);
var Neptuo$Pipelines$Events$Handlers$DelegateEventHandler$EventHandler$1 = {
    fullname: "Neptuo.Pipelines.Events.Handlers.DelegateEventHandler.EventHandler$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Events.Handlers.IEventHandler$1"],
    Kind: "Class",
    definition: {
        ctor: function (TEvent, func){
            this.TEvent = TEvent;
            this.func = null;
            System.Object.ctor.call(this);
            this.func = func;
        },
        HandleAsync: function (payload){
            return this.func(payload);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Func"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Events$Handlers$DelegateEventHandler$EventHandler$1);
var Neptuo$Pipelines$Events$Handlers$IEventHandler$1 = {
    fullname: "Neptuo.Pipelines.Events.Handlers.IEventHandler$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Events$Handlers$IEventHandler$1);
var Neptuo$Pipelines$Events$IEventDispatcher = {
    fullname: "Neptuo.Pipelines.Events.IEventDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Events$IEventDispatcher);
var Neptuo$Exceptions$Helpers$EnsureExceptionHelper = {
    fullname: "Neptuo.Exceptions.Helpers.EnsureExceptionHelper",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Exceptions$Helpers$EnsureExceptionHelper);
var Neptuo$_EnsureSystemExtensions = {
    fullname: "Neptuo._EnsureSystemExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        NotImplemented: function (guard, format, formatParameters){
            Neptuo.Ensure.NotNull$$Object$$String(guard, "guard");
            if (System.String.IsNullOrEmpty(format))
                return new System.NotImplementedException.ctor();
            return new System.NotImplementedException.ctor$$String(System.String.Format$$String$$Object$Array(format, formatParameters));
        },
        NotSupported: function (guard, format, formatParameters){
            Neptuo.Ensure.NotNull$$Object$$String(guard, "guard");
            if (System.String.IsNullOrEmpty(format))
                return new System.NotSupportedException.ctor();
            return new System.NotSupportedException.ctor$$String(System.String.Format$$String$$Object$Array(format, formatParameters));
        },
        InvalidOperation: function (guard, format, formatParameters){
            Neptuo.Ensure.NotNull$$Object$$String(guard, "guard");
            Neptuo.Ensure.NotNullOrEmpty(format, "format");
            return new System.InvalidOperationException.ctor$$String(System.String.Format$$String$$Object$Array(format, formatParameters));
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$_EnsureSystemExtensions);
var Neptuo$Ensure = {
    fullname: "Neptuo.Ensure",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Ensure.Exception = new Neptuo.Exceptions.Helpers.EnsureExceptionHelper.ctor();
            Neptuo.Ensure.Condition = new Neptuo.Exceptions.Helpers.EnsureConditionHelper.ctor();
        },
        NotNull$$Object$$String: function (argument, argumentName){
            if (argument == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String(argumentName), new Error());
        },
        NotNull$$Object$$String$$String: function (argument, argumentName, message){
            if (argument == null)
                throw $CreateException(Neptuo._EnsureArgumentExtensions.Argument(Neptuo.Ensure.Exception, message, argumentName), new Error());
        },
        NotNullOrEmpty: function (argument, argumentName){
            if (argument == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String(argumentName), new Error());
            if (System.String.IsNullOrEmpty(argument))
                throw $CreateException(Neptuo._EnsureArgumentExtensions.Argument(Neptuo.Ensure.Exception, "Passed argument can\'t be empty string.", argumentName), new Error());
        },
        Positive: function (argument, argumentName){
            if (argument <= 0)
                throw $CreateException(Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(Neptuo.Ensure.Exception, argumentName, "Argument must be positive (> 0)."), new Error());
        },
        PositiveOrZero: function (argument, argumentName){
            if (argument < 0)
                throw $CreateException(Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(Neptuo.Ensure.Exception, argumentName, "Argument must be positive or zero (>= 0)."), new Error());
        },
        Negative: function (argument, argumentName){
            if (argument >= 0)
                throw $CreateException(Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(Neptuo.Ensure.Exception, argumentName, "Argument must be negative (< 0)."), new Error());
        },
        NegativeOrZero: function (argument, argumentName){
            if (argument > 0)
                throw $CreateException(Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(Neptuo.Ensure.Exception, argumentName, "Argument must be negative or zero (<= 0)."), new Error());
        },
        NotDisposed: function (argument, argumentName){
            if (argument.get_IsDisposed())
                throw $CreateException(new System.ObjectDisposedException.ctor$$String(argumentName), new Error());
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Ensure);
var Neptuo$ComponentModel$GuidUniqueNameProvider = {
    fullname: "Neptuo.ComponentModel.GuidUniqueNameProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.IUniqueNameProvider"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        Next: function (){
            return System.Guid.NewGuid().ToString();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$GuidUniqueNameProvider);
var Neptuo$IDisposable = {
    fullname: "Neptuo.IDisposable",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["System.IDisposable"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$IDisposable);
var Neptuo$ComponentModel$IUniqueNameProvider = {
    fullname: "Neptuo.ComponentModel.IUniqueNameProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$IUniqueNameProvider);
var Neptuo$Globalization$CultureInfoParser = {
    fullname: "Neptuo.Globalization.CultureInfoParser",
    baseTypeName: "System.Object",
    staticDefinition: {
        TryParse: function (value, cultureInfo){
            if (System.String.IsNullOrEmpty(value) || (value.get_Length() != 5 && value.get_Length() != 2)){
                cultureInfo.Value = null;
                return false;
            }
            var $it13 = System.Globalization.CultureInfo.GetCultures(7).GetEnumerator();
            while ($it13.MoveNext()){
                var item = $it13.get_Current();
                if ((value.get_Length() == 5 && item.get_Name().ToLowerInvariant() == value.ToLowerInvariant()) || (value.get_Length() == 2 && item.get_TwoLetterISOLanguageName().ToLowerInvariant() == value.ToLowerInvariant())){
                    cultureInfo.Value = item;
                    return true;
                }
            }
            cultureInfo.Value = null;
            return false;
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Globalization$CultureInfoParser);
var Neptuo$Activators$IActivator$1 = {
    fullname: "Neptuo.Activators.IActivator$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Activators$IActivator$1);
var Neptuo$Activators$IActivator$2 = {
    fullname: "Neptuo.Activators.IActivator$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Activators$IActivator$2);
var Neptuo$Activators$IDependencyContainer = {
    fullname: "Neptuo.Activators.IDependencyContainer",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Activators.IDependencyProvider"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Activators$IDependencyContainer);
var Neptuo$Activators$IDependencyProvider = {
    fullname: "Neptuo.Activators.IDependencyProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.IDisposable"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Activators$IDependencyProvider);
var Neptuo$Linq$Expressions$CompiledExpression = {
    fullname: "Neptuo.Linq.Expressions.CompiledExpression",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        BoxedGet$$: "System.Linq.Expressions.LambdaExpression"
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$Linq$Expressions$CompiledExpression);
var Neptuo$Linq$Expressions$CompiledExpression$2 = {
    fullname: "Neptuo.Linq.Expressions.CompiledExpression$2",
    baseTypeName: "Neptuo.Linq.Expressions.CompiledExpression",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (T, TResult){
            this.T = T;
            this.TResult = TResult;
            this.expression = null;
            this.function = null;
            Neptuo.Linq.Expressions.CompiledExpression.ctor.call(this);
        },
        ctor$$Expression$1: function (T, TResult, expression){
            this.T = T;
            this.TResult = TResult;
            this.expression = null;
            this.function = null;
            Neptuo.Linq.Expressions.CompiledExpression.ctor.call(this);
            this.expression = expression;
            this.function = expression.Compile();
        },
        Evaluate: function (instance){
            return this.function(instance);
        },
        BoxedGet$$: "System.Linq.Expressions.LambdaExpression",
        get_BoxedGet: function (){
            return this.expression;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Expression",
        parameters: ["System.Linq.Expressions.Expression"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Linq$Expressions$CompiledExpression$2);
var Neptuo$Linq$Expressions$DefaultTranslationOf$1 = {
    fullname: "Neptuo.Linq.Expressions.DefaultTranslationOf$1",
    baseTypeName: "System.Object",
    staticDefinition: {
        Property$1$$Expression$1$$Expression$1: function (TResult, property, expression){
            return Neptuo.Linq.Expressions.TranslationMap.defaultMap.Add$2$$Expression$1$$Expression$1(this.T, TResult, property, expression);
        },
        Property$1$$Expression$1: function (TResult, property){
            return new Neptuo.Linq.Expressions.DefaultTranslationOf.IncompletePropertyTranslation$2.ctor(this.T, TResult, property);
        },
        Evaluate$1: function (TResult, instance, method){
            var compiledExpression = Neptuo.Linq.Expressions.TranslationMap.defaultMap.Get$2(this.T, TResult, method);
            return compiledExpression.Evaluate(instance);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Linq$Expressions$DefaultTranslationOf$1);
var Neptuo$Linq$Expressions$DefaultTranslationOf$IncompletePropertyTranslation$2 = {
    fullname: "Neptuo.Linq.Expressions.DefaultTranslationOf.IncompletePropertyTranslation$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (T, TResult, property){
            this.T = T;
            this.TResult = TResult;
            this.property = null;
            System.Object.ctor.call(this);
            this.property = property;
        },
        Is: function (expression){
            return Neptuo.Linq.Expressions.DefaultTranslationOf$1.Property$1$$Expression$1$$Expression$1(this.TResult, this.property, expression);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Linq.Expressions.Expression"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Linq$Expressions$DefaultTranslationOf$IncompletePropertyTranslation$2);
var Neptuo$Linq$Expressions$TranslationMap = {
    fullname: "Neptuo.Linq.Expressions.TranslationMap",
    baseTypeName: "System.Collections.Generic.Dictionary$2",
    staticDefinition: {
        cctor: function (){
            Neptuo.Linq.Expressions.TranslationMap.defaultMap = new Neptuo.Linq.Expressions.TranslationMap.ctor();
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Collections.Generic.Dictionary$2.ctor.call(this, System.Reflection.MemberInfo.ctor, Neptuo.Linq.Expressions.CompiledExpression.ctor);
        },
        Get$2: function (T, TResult, method){
            var propertyInfo = method.get_DeclaringType().GetProperty$$String(method.get_Name().Replace$$String$$String("get_", System.String.Empty));
            return As(this.get_Item$$TKey(propertyInfo), Neptuo.Linq.Expressions.CompiledExpression$2.ctor);
        },
        Add$2$$Expression$1$$CompiledExpression$2: function (T, TResult, property, compiledExpression){
            System.Collections.Generic.Dictionary$2.commonPrototype.Add.call(this, (Cast(property.get_Body(), System.Linq.Expressions.MemberExpression.ctor)).get_Member(), compiledExpression);
        },
        Add$2$$Expression$1$$Expression$1: function (T, TResult, property, expression){
            var compiledExpression = new Neptuo.Linq.Expressions.CompiledExpression$2.ctor$$Expression$1(T, TResult, expression);
            this.Add$2$$Expression$1$$CompiledExpression$2(T, TResult, property, compiledExpression);
            return compiledExpression;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Linq$Expressions$TranslationMap);
var Neptuo$Linq$_ExpressiveExtensions = {
    fullname: "Neptuo.Linq._ExpressiveExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        WithTranslations$1$$IQueryable$1: function (T, source){
            return source.get_Provider().CreateQuery$1$$Expression(T, Neptuo.Linq._ExpressiveExtensions.WithTranslations$$Expression(source.get_Expression()));
        },
        WithTranslations$1$$IQueryable$1$$TranslationMap: function (T, source, map){
            return source.get_Provider().CreateQuery$1$$Expression(T, Neptuo.Linq._ExpressiveExtensions.WithTranslations$$Expression$$TranslationMap(source.get_Expression(), map));
        },
        WithTranslations$$Expression: function (expression){
            return Neptuo.Linq._ExpressiveExtensions.WithTranslations$$Expression$$TranslationMap(expression, Neptuo.Linq.Expressions.TranslationMap.defaultMap);
        },
        WithTranslations$$Expression$$TranslationMap: function (expression, map){
            return new Neptuo.Linq.Expressions.TranslatingExpressionVisitor.ctor(map).Visit$$Expression(expression);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Linq$_ExpressiveExtensions);
var Neptuo$OutFunc$3 = {
    fullname: "Neptuo.OutFunc$3",
    Kind: "Delegate",
    definition: {
        ctor: function (T, TOutput, TReturn, obj, func){
            this.T = T;
            this.TOutput = TOutput;
            this.TReturn = TReturn;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object", "System.IntPtr"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$OutFunc$3);
var Neptuo$Pipelines$Validators$IValidationResultBuilder = {
    fullname: "Neptuo.Pipelines.Validators.IValidationResultBuilder",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Validators$IValidationResultBuilder);
var Neptuo$Pipelines$Validators$ValidationResultBuilder = {
    fullname: "Neptuo.Pipelines.Validators.ValidationResultBuilder",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Validators.IValidationResult", "Neptuo.Pipelines.Validators.IValidationResultBuilder"],
    Kind: "Class",
    definition: {
        ctor: function (isInvalidationCausedByAnyMessage){
            this.messages = new System.Collections.Generic.List$1.ctor(Neptuo.Pipelines.Validators.Messages.IValidationMessage.ctor);
            this.isInvalidationCausedByAnyMessage = false;
            this.isValid = true;
            System.Object.ctor.call(this);
            this.isInvalidationCausedByAnyMessage = isInvalidationCausedByAnyMessage;
        },
        Add$$IValidationMessage: function (message){
            return this.Add$$IValidationMessage$$Boolean(message, this.isInvalidationCausedByAnyMessage);
        },
        Add$$IValidationMessage$$Boolean: function (message, causesInvalidation){
            Neptuo.Ensure.NotNull$$Object$$String(message, "message");
            this.messages.Add(message);
            if (causesInvalidation)
                this.isValid = false;
            return this;
        },
        ToResult: function (){
            return this;
        },
        ToString: function (){
            return System.String.Format$$String$$Object$$Object("{0} ({1})", this.isValid ? "Valid" : "Not valid", this.messages.get_Count());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Boolean"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Validators$ValidationResultBuilder);
var Neptuo$Pipelines$Validators$_ValidationResultBuilderExtensions = {
    fullname: "Neptuo.Pipelines.Validators._ValidationResultBuilderExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        AddTextMessage: function (builder, key, message, parameters){
            Neptuo.Ensure.NotNull$$Object$$String(builder, "builder");
            return builder.Add$$IValidationMessage(new Neptuo.Pipelines.Validators.Messages.TextValidationMessage.ctor(key, System.String.Format$$String$$Object$Array(message, parameters)));
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Validators$_ValidationResultBuilderExtensions);
var Neptuo$VersionInfo = {
    fullname: "Neptuo.VersionInfo",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.VersionInfo.Version = "4.0.1";
        },
        GetVersion: function (){
            return new System.Version.ctor$$String("4.0.1");
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$VersionInfo);
var Neptuo$Reflection$DefaultReflectionService = {
    fullname: "Neptuo.Reflection.DefaultReflectionService",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Reflection.IReflectionService"],
    Kind: "Class",
    definition: {
        ctor: function (appDomain){
            this._AppDomain = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(appDomain, "appDomain");
            this.set_AppDomain(appDomain);
        },
        AppDomain$$: "System.AppDomain",
        get_AppDomain: function (){
            return this._AppDomain;
        },
        set_AppDomain: function (value){
            this._AppDomain = value;
        },
        EnumerateAssemblies: function (){
            return System.Linq.Enumerable.Where$1$$IEnumerable$1$$Func$2(System.Reflection.Assembly.ctor, this.get_AppDomain().GetAssemblies(), $CreateAnonymousDelegate(this, function (a){
                return !a.get_IsDynamic();
            }));
        },
        LoadAssembly: function (assemblyFile){
            Neptuo.Ensure.NotNullOrEmpty(assemblyFile, "assemblyFile");
            if (!System.IO.File.Exists(assemblyFile))
                throw $CreateException(Neptuo._EnsureArgumentExtensions.ArgumentFileNotExist(Neptuo.Ensure.Exception, assemblyFile, "assemblyFile"), new Error());
            var assembly = this.get_AppDomain().Load$$Byte$Array(System.IO.File.ReadAllBytes(assemblyFile));
            return assembly;
        },
        LoadType: function (typeAssemblyName){
            Neptuo.Ensure.NotNullOrEmpty(typeAssemblyName, "typeAssemblyName");
            var parts = typeAssemblyName.Split$$Char$Array(",");
            var typeName = parts[0].Trim();
            var assemblyName = null;
            if (parts.get_Length() == 2)
                assemblyName = parts[1].Trim();
            var searchIn = System.Linq.Enumerable.Where$1$$IEnumerable$1$$Func$2(System.Reflection.Assembly.ctor, this.EnumerateAssemblies(), $CreateAnonymousDelegate(this, function (a){
                return a.GetName().get_Name() == assemblyName;
            }));
            if (!System.Linq.Enumerable.Any$1$$IEnumerable$1(System.Reflection.Assembly.ctor, searchIn)){
                if (assemblyName != null){
                    var assembly = this.get_AppDomain().Load$$String(assemblyName);
                    searchIn = (function (){
                        var $v1 = new System.Collections.Generic.List$1.ctor(System.Reflection.Assembly.ctor);
                        $v1.Add(assembly);
                        return $v1;
                    }).call(this);
                }
                else {
                    searchIn = this.EnumerateAssemblies();
                }
            }
            var $it14 = searchIn.GetEnumerator();
            while ($it14.MoveNext()){
                var assembly = $it14.get_Current();
                var type = assembly.GetType$$String(typeName);
                if (System.Type.op_Inequality$$Type$$Type(type, null))
                    return type;
            }
            return null;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.AppDomain"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Reflection$DefaultReflectionService);
var Neptuo$Reflection$IReflectionService = {
    fullname: "Neptuo.Reflection.IReflectionService",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Reflection$IReflectionService);
var Neptuo$Reflection$ReflectionFactory = {
    fullname: "Neptuo.Reflection.ReflectionFactory",
    baseTypeName: "System.Object",
    staticDefinition: {
        FromAppDomain: function (appDomain){
            return new Neptuo.Reflection.DefaultReflectionService.ctor(appDomain);
        },
        FromCurrentAppDomain: function (){
            return Neptuo.Reflection.ReflectionFactory.FromAppDomain(System.AppDomain.get_CurrentDomain());
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Reflection$ReflectionFactory);
var Neptuo$Reflection$ReflectionHelper = {
    fullname: "Neptuo.Reflection.ReflectionHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetAttribute$1: function (T, member){
            var attrs = Cast(member.GetCustomAttributes$$Type$$Boolean(Typeof(T), true), Array.ctor);
            if (attrs.get_Length() == 1)
                return attrs[0];
            else
                return null;
        },
        GetTypesInNamespace: function (newNamespace){
            var targetAssembly = System.Reflection.Assembly.GetExecutingAssembly();
            var parts = newNamespace.Split$$Char$Array(",");
            if (parts.get_Length() == 2)
                targetAssembly = System.Reflection.Assembly.Load$$String(parts[1]);
            return System.Linq.Enumerable.ToList$1(System.Type.ctor, System.Linq.Enumerable.Where$1$$IEnumerable$1$$Func$2(System.Type.ctor, targetAssembly.GetTypes(), function (t){
                return t.get_Namespace() == parts[0];
            }));
        },
        GetAnnotatedProperties$1: function (T, type){
            var result = new System.Collections.Generic.List$1.ctor(System.Reflection.PropertyInfo.ctor);
            var $it15 = type.GetProperties().GetEnumerator();
            while ($it15.MoveNext()){
                var prop = $it15.get_Current();
                if (prop.GetCustomAttributes$$Type$$Boolean(Typeof(T), true).get_Length() == 1)
                    result.Add(prop);
            }
            return result;
        },
        IsGenericType$2$$Type: function (TAssignable, TArgument, testedType){
            return Neptuo.Reflection.ReflectionHelper.IsGenericType$$Type$$Type$$Type(testedType, Typeof(TAssignable), Typeof(TArgument));
        },
        IsGenericType$1$$Type: function (TAssignable, testedType){
            return Neptuo.Reflection.ReflectionHelper.IsGenericType$$Type$$Type(testedType, Typeof(TAssignable));
        },
        IsGenericType$$Type$$Type$$Type: function (testedType, assignableType, argumentType){
            if (System.Type.op_Equality$$Type$$Type(argumentType, null))
                return false;
            return assignableType.IsAssignableFrom(testedType) && testedType.get_IsGenericType() && (testedType.GetGenericArguments()[0].IsAssignableFrom(argumentType) || argumentType.IsAssignableFrom(testedType.GetGenericArguments()[0]));
        },
        IsGenericType$$Type$$Type: function (testedType, assignableType){
            return assignableType.IsAssignableFrom(testedType) && testedType.get_IsGenericType();
        },
        GetGenericArgument: function (type, index){
            if (!type.get_IsGenericType())
                return null;
            return type.GetGenericArguments()[index];
        },
        CanBeUsedInMarkup: function (type, requireDefaultCtor){
            if (type.get_IsInterface())
                return false;
            if (type.get_IsAbstract())
                return false;
            if (requireDefaultCtor){
                if (System.Reflection.ConstructorInfo.op_Equality$$ConstructorInfo$$ConstructorInfo(type.GetConstructor$$Type$Array(new Array(0)), null))
                    return false;
            }
            return true;
        },
        PropertyName$$Expression$1: function (propertyGetter){
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        PropertyName$1$$Expression$1: function (T, propertyGetter){
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        PropertyName$2$$Expression$1: function (T, TResult, propertyGetter){
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        MethodName$2$$Expression$1: function (T, TParam1, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$3$$Expression$1: function (T, TParam1, TParam2, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$4$$Expression$1: function (T, TParam1, TParam2, TParam3, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$1$$Expression$1: function (T, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$5$$Expression$1: function (T, TParam1, TParam2, TParam3, TParam4, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Reflection$ReflectionHelper);
var Neptuo$Linq$Expressions$TypeHelper = {
    fullname: "Neptuo.Linq.Expressions.TypeHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        PropertyName$1$$Expression$1: function (T, propertyGetter){
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        PropertyName$2$$Expression$1: function (T, TResult, propertyGetter){
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        MethodName$2$$Expression$1: function (T, TParam1, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$3$$Expression$1: function (T, TParam1, TParam2, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$4$$Expression$1: function (T, TParam1, TParam2, TParam3, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$5$$Expression$1: function (T, TParam1, TParam2, TParam3, TParam4, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$6$$Expression$1: function (T, TParam1, TParam2, TParam3, TParam4, TResult, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$1$$Expression$1: function (T, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Linq$Expressions$TypeHelper);
var Neptuo$ComponentModel$SequenceUniqueNameProvider = {
    fullname: "Neptuo.ComponentModel.SequenceUniqueNameProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.IUniqueNameProvider"],
    Kind: "Class",
    definition: {
        ctor: function (prefix, offset){
            this.prefix = null;
            this.offset = 0;
            System.Object.ctor.call(this);
            Neptuo.Ensure.PositiveOrZero(offset, "offset");
            this.prefix = prefix;
            this.offset = offset;
        },
        Next: function (){
            return this.prefix + (++this.offset);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.Int32"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$SequenceUniqueNameProvider);
var Neptuo$StateMachines$IStateMachineState$2 = {
    fullname: "Neptuo.StateMachines.IStateMachineState$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$StateMachines$IStateMachineState$2);
var Neptuo$StateMachines$IStringState$1 = {
    fullname: "Neptuo.StateMachines.IStringState$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.StateMachines.IStateMachineState$2"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$StateMachines$IStringState$1);
var Neptuo$StateMachines$StateMachine$2 = {
    fullname: "Neptuo.StateMachines.StateMachine$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (TItem, TState, initialState){
            this.TItem = TItem;
            this.TState = TState;
            this.OnEnterState = null;
            this.OnLeaveState = null;
            this._InitialState = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(initialState, "initialState");
            this.set_InitialState(initialState);
        },
        InitialState$$: "`1",
        get_InitialState: function (){
            return this._InitialState;
        },
        set_InitialState: function (value){
            this._InitialState = value;
        },
        add_OnEnterState: function (value){
            this.OnEnterState = $CombineDelegates(this.OnEnterState, value);
        },
        remove_OnEnterState: function (value){
            this.OnEnterState = $RemoveDelegate(this.OnEnterState, value);
        },
        add_OnLeaveState: function (value){
            this.OnLeaveState = $CombineDelegates(this.OnLeaveState, value);
        },
        remove_OnLeaveState: function (value){
            this.OnLeaveState = $RemoveDelegate(this.OnLeaveState, value);
        },
        OnEnterConcreteState$1: function (TConcreteState, handler){
            Neptuo.Ensure.NotNull$$Object$$String(handler, "handler");
            this.add_OnEnterState($CreateAnonymousDelegate(this, function (sender, e){
                if (System.Type.op_Equality$$Type$$Type(e.get_State().GetType(), Typeof(TConcreteState)))
                    handler(this, new Neptuo.StateMachines.StateMachineEventArgs$1.ctor(TConcreteState, Cast(e.get_State(), TConcreteState)));
            }));
        },
        OnLeaveConcreteState$1: function (TConcreteState, handler){
            Neptuo.Ensure.NotNull$$Object$$String(handler, "handler");
            this.add_OnLeaveState($CreateAnonymousDelegate(this, function (sender, e){
                if (System.Type.op_Equality$$Type$$Type(e.get_State().GetType(), Typeof(TConcreteState)))
                    handler(this, new Neptuo.StateMachines.StateMachineEventArgs$1.ctor(TConcreteState, Cast(e.get_State(), TConcreteState)));
            }));
        },
        Process: function (items){
            Neptuo.Ensure.NotNull$$Object$$String(items, "items");
            var currentState = this.get_InitialState();
            var index = 0;
            var $it16 = items.GetEnumerator();
            while ($it16.MoveNext()){
                var item = $it16.get_Current();
                var newState = currentState.Accept(item, index);
                if (newState == null)
                    throw $CreateException(Neptuo._EnsureSystemExtensions.InvalidOperation(Neptuo.Ensure.Exception, "StateMachine in invalid state, got null new state."), new Error());
                if (newState != currentState){
                    if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnLeaveState, null))
                        this.OnLeaveState(this, new Neptuo.StateMachines.StateMachineEventArgs$1.ctor(this.TState, currentState));
                    if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnEnterState, null))
                        this.OnEnterState(this, new Neptuo.StateMachines.StateMachineEventArgs$1.ctor(this.TState, newState));
                }
                currentState = newState;
                index++;
            }
            return currentState;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["TState"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$StateMachines$StateMachine$2);
var Neptuo$StateMachines$StateMachineEventArgs$1 = {
    fullname: "Neptuo.StateMachines.StateMachineEventArgs$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (TState, state){
            this.TState = TState;
            this._State = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(state, "state");
            this.set_State(state);
        },
        State$$: "`0",
        get_State: function (){
            return this._State;
        },
        set_State: function (value){
            this._State = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["TState"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$StateMachines$StateMachineEventArgs$1);
var Neptuo$StateMachines$StringState$2 = {
    fullname: "Neptuo.StateMachines.StringState$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.StateMachines.IStringState$1"],
    Kind: "Class",
    definition: {
        ctor: function (TContext, TState){
            this.TContext = TContext;
            this.TState = TState;
            this._Text = null;
            this._Context = null;
            System.Object.ctor.call(this);
            this.set_Text(new System.Text.StringBuilder.ctor());
        },
        Text$$: "System.Text.StringBuilder",
        get_Text: function (){
            return this._Text;
        },
        set_Text: function (value){
            this._Text = value;
        },
        Context$$: "`0",
        get_Context: function (){
            return this._Context;
        },
        set_Context: function (value){
            this._Context = value;
        },
        Move$1: function (TNewState){
            var newState = new TNewState();
            newState.set_Context(this.GetContextForNewState());
            return newState;
        },
        GetContextForNewState: function (){
            return this.get_Context();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$StateMachines$StringState$2);
var Neptuo$StateMachines$StringStateMachine$1 = {
    fullname: "Neptuo.StateMachines.StringStateMachine$1",
    baseTypeName: "Neptuo.StateMachines.StateMachine$2",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (TState, initialState){
            this.TState = TState;
            Neptuo.StateMachines.StateMachine$2.ctor.call(this, System.Char.ctor, this.TState, initialState);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["TState"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$StateMachines$StringStateMachine$1);
var Neptuo$Tokens$Token = {
    fullname: "Neptuo.Tokens.Token",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.TextOffsets.ILineRangeInfo"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.attributes = null;
            this.defaultAttributes = null;
            this._Prefix = null;
            this._Name = null;
            this._LineIndex = 0;
            this._EndLineIndex = 0;
            this._ColumnIndex = 0;
            this._EndColumnIndex = 0;
            System.Object.ctor.call(this);
            this.attributes = new System.Collections.Generic.List$1.ctor(Neptuo.Tokens.TokenAttribute.ctor);
            this.defaultAttributes = new System.Collections.Generic.List$1.ctor(System.String.ctor);
        },
        Prefix$$: "System.String",
        get_Prefix: function (){
            return this._Prefix;
        },
        set_Prefix: function (value){
            this._Prefix = value;
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        Fullname$$: "System.String",
        get_Fullname: function (){
            if (System.String.IsNullOrEmpty(this.get_Prefix()))
                return this.get_Name();
            return this.get_Prefix() + ":" + this.get_Name();
        },
        set_Fullname: function (value){
            var index = value.IndexOf$$Char(":");
            if (index != -1){
                this.set_Prefix(value.Substring$$Int32$$Int32(0, index));
                this.set_Name(value.Substring$$Int32(index + 1));
            }
            else {
                this.set_Name(value);
            }
        },
        Attributes$$: "System.Collections.Generic.IEnumerable`1[[Neptuo.Tokens.TokenAttribute]]",
        get_Attributes: function (){
            return this.attributes;
        },
        DefaultAttributes$$: "System.Collections.Generic.IEnumerable`1[[System.String]]",
        get_DefaultAttributes: function (){
            return this.defaultAttributes;
        },
        LineIndex$$: "System.Int32",
        get_LineIndex: function (){
            return this._LineIndex;
        },
        set_LineIndex: function (value){
            this._LineIndex = value;
        },
        EndLineIndex$$: "System.Int32",
        get_EndLineIndex: function (){
            return this._EndLineIndex;
        },
        set_EndLineIndex: function (value){
            this._EndLineIndex = value;
        },
        ColumnIndex$$: "System.Int32",
        get_ColumnIndex: function (){
            return this._ColumnIndex;
        },
        set_ColumnIndex: function (value){
            this._ColumnIndex = value;
        },
        EndColumnIndex$$: "System.Int32",
        get_EndColumnIndex: function (){
            return this._EndColumnIndex;
        },
        set_EndColumnIndex: function (value){
            this._EndColumnIndex = value;
        },
        SetLineInfo: function (lineNumber, columnIndex, endLineNumber, endColumnIndex){
            this.set_LineIndex(lineNumber);
            this.set_ColumnIndex(columnIndex);
            this.set_EndLineIndex(endLineNumber);
            this.set_EndColumnIndex(endColumnIndex);
        },
        AddAttribute: function (attribute){
            Neptuo.Ensure.NotNull$$Object$$String(attribute, "attribute");
            attribute.set_OwnerToken(this);
            this.attributes.Add(attribute);
        },
        AddDefaultAttribute: function (defaultAttribute){
            this.defaultAttributes.Add(defaultAttribute);
        },
        ToString: function (){
            var result = new System.Text.StringBuilder.ctor$$String("{" + this.get_Fullname());
            var isFirstAttribute = true;
            var $it17 = this.get_DefaultAttributes().GetEnumerator();
            while ($it17.MoveNext()){
                var defaultAttribute = $it17.get_Current();
                if (isFirstAttribute){
                    isFirstAttribute = false;
                    result.Append$$String(" ");
                }
                else {
                    result.Append$$String(", ");
                }
                result.AppendFormat$$String$$Object$Array(defaultAttribute);
            }
            var $it18 = this.get_Attributes().GetEnumerator();
            while ($it18.MoveNext()){
                var attribute = $it18.get_Current();
                if (isFirstAttribute){
                    isFirstAttribute = false;
                    result.Append$$String(" ");
                }
                else {
                    result.Append$$String(", ");
                }
                result.AppendFormat$$String$$Object$$Object("{0}={1}", attribute.get_Name(), attribute.get_Value());
            }
            result.Append$$String("}");
            return result.ToString();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$Token);
var Neptuo$Tokens$TokenAttribute = {
    fullname: "Neptuo.Tokens.TokenAttribute",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (name, value){
            this._OwnerToken = null;
            this._Name = null;
            this._Value = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNullOrEmpty(name, "name");
            this.set_Name(name);
            this.set_Value(value);
        },
        OwnerToken$$: "Neptuo.Tokens.Token",
        get_OwnerToken: function (){
            return this._OwnerToken;
        },
        set_OwnerToken: function (value){
            this._OwnerToken = value;
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        Value$$: "System.String",
        get_Value: function (){
            return this._Value;
        },
        set_Value: function (value){
            this._Value = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenAttribute);
var Neptuo$Tokens$TokenEventArgs = {
    fullname: "Neptuo.Tokens.TokenEventArgs",
    baseTypeName: "System.EventArgs",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (originalContent, token, startPosition, endPosition){
            this._OriginalContent = null;
            this._Token = null;
            this._StartPosition = 0;
            this._EndPosition = 0;
            System.EventArgs.ctor.call(this);
            Neptuo.Ensure.NotNullOrEmpty(originalContent, "originalContent");
            Neptuo.Ensure.NotNull$$Object$$String(token, "token");
            Neptuo.Ensure.PositiveOrZero(startPosition, "startPosition");
            Neptuo.Ensure.Positive(endPosition, "endPosition");
            if (endPosition <= startPosition)
                Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(Neptuo.Ensure.Exception, "endPosition", "End position index must be greater that start position index");
            this.set_OriginalContent(originalContent);
            this.set_Token(token);
            this.set_StartPosition(startPosition);
            this.set_EndPosition(endPosition);
        },
        OriginalContent$$: "System.String",
        get_OriginalContent: function (){
            return this._OriginalContent;
        },
        set_OriginalContent: function (value){
            this._OriginalContent = value;
        },
        Token$$: "Neptuo.Tokens.Token",
        get_Token: function (){
            return this._Token;
        },
        set_Token: function (value){
            this._Token = value;
        },
        StartPosition$$: "System.Int32",
        get_StartPosition: function (){
            return this._StartPosition;
        },
        set_StartPosition: function (value){
            this._StartPosition = value;
        },
        EndPosition$$: "System.Int32",
        get_EndPosition: function (){
            return this._EndPosition;
        },
        set_EndPosition: function (value){
            this._EndPosition = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "Neptuo.Tokens.Token", "System.Int32", "System.Int32"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenEventArgs);
var Neptuo$Tokens$TokenParser = {
    fullname: "Neptuo.Tokens.TokenParser",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.OnParsedToken = null;
            this._Configuration = null;
            System.Object.ctor.call(this);
            this.set_Configuration(new Neptuo.Tokens.TokenParserConfiguration.ctor());
        },
        Configuration$$: "Neptuo.Tokens.TokenParserConfiguration",
        get_Configuration: function (){
            return this._Configuration;
        },
        set_Configuration: function (value){
            this._Configuration = value;
        },
        add_OnParsedToken: function (value){
            this.OnParsedToken = $CombineDelegates(this.OnParsedToken, value);
        },
        remove_OnParsedToken: function (value){
            this.OnParsedToken = $RemoveDelegate(this.OnParsedToken, value);
        },
        Parse: function (content){
            if (System.MulticastDelegate.op_Equality$$MulticastDelegate$$MulticastDelegate(this.OnParsedToken, null))
                throw $CreateException(Neptuo._EnsureSystemExtensions.InvalidOperation(Neptuo.Ensure.Exception, "OnParsedItem event is null, so there isn\'t callback for parsed tokens."), new Error());
            var results = new System.Collections.Generic.List$1.ctor(Neptuo.Tokens.TokenStateMachine.Result.ctor);
            var stateMachine = new Neptuo.Tokens.TokenStateMachine.ctor(this.GetStateMachineConfiguration());
            stateMachine.OnEnterConcreteState$1(Neptuo.Tokens.TokenDoneState.ctor, $CreateAnonymousDelegate(this, function (sender, e){
                results.Add(e.get_State().GetResult());
            }));
            var finalState = stateMachine.Process(content);
            if (this.IsSuccessState(finalState)){
                var newLines = this.GetNewLineIndexes(content);
                var $it19 = results.GetEnumerator();
                while ($it19.MoveNext()){
                    var result = $it19.get_Current();
                    var startInfo = this.GetLineInfo(newLines, result.get_StartIndex());
                    var endInfo = this.GetLineInfo(newLines, result.get_LastIndex() + 1);
                    result.get_Token().SetLineInfo(startInfo.get_Item1(), startInfo.get_Item2(), endInfo.get_Item1(), endInfo.get_Item2());
                    this.OnParsedToken(this, new Neptuo.Tokens.TokenEventArgs.ctor(content, result.get_Token(), result.get_StartIndex(), result.get_LastIndex() + 1));
                }
                return true;
            }
            return false;
        },
        GetLineInfo: function (newLines, foundIndex){
            var lineNumber = System.Linq.Enumerable.Count$1$$IEnumerable$1(System.Int32.ctor, System.Linq.Enumerable.Where$1$$IEnumerable$1$$Func$2(System.Int32.ctor, newLines, $CreateAnonymousDelegate(this, function (i){
                return i < foundIndex;
            })));
            var columnIndex = foundIndex - System.Linq.Enumerable.LastOrDefault$1$$IEnumerable$1$$Func$2(System.Int32.ctor, newLines, $CreateAnonymousDelegate(this, function (i){
                return i < foundIndex;
            }));
            return new System.Tuple$2.ctor(System.Int32.ctor, System.Int32.ctor, lineNumber, columnIndex);
        },
        GetNewLineIndexes: function (content){
            var result = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var index = content.IndexOf$$String(System.Environment.get_NewLine());
            while (index != -1){
                result.Add(index);
                index = content.IndexOf$$String$$Int32(System.Environment.get_NewLine(), index + 1);
            }
            return result;
        },
        IsSuccessState: function (finalState){
            if (System.Type.op_Equality$$Type$$Type(finalState.GetType(), Typeof(Neptuo.Tokens.TokenDoneState.ctor)))
                return true;
            if (this.get_Configuration().get_AllowTextContent() && System.Type.op_Equality$$Type$$Type(finalState.GetType(), Typeof(Neptuo.Tokens.TokenStartState.ctor)))
                return true;
            return false;
        },
        GetStateMachineConfiguration: function (){
            return (function (){
                var $v2 = new Neptuo.Tokens.TokenStateMachine.Configuration.ctor();
                $v2.set_AllowAttributes(this.get_Configuration().get_AllowAttributes());
                $v2.set_AllowEscapeSequence(this.get_Configuration().get_AllowEscapeSequence());
                $v2.set_AllowDefaultAttributes(this.get_Configuration().get_AllowDefaultAttributes());
                $v2.set_AllowMultipleTokens(this.get_Configuration().get_AllowMultipleTokens());
                $v2.set_AllowTextContent(this.get_Configuration().get_AllowTextContent());
                return $v2;
            }).call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenParser);
var Neptuo$Tokens$TokenParserConfiguration = {
    fullname: "Neptuo.Tokens.TokenParserConfiguration",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._AllowTextContent = false;
            this._AllowEscapeSequence = false;
            this._AllowMultipleTokens = false;
            this._AllowDefaultAttributes = false;
            this._AllowAttributes = false;
            System.Object.ctor.call(this);
        },
        AllowTextContent$$: "System.Boolean",
        get_AllowTextContent: function (){
            return this._AllowTextContent;
        },
        set_AllowTextContent: function (value){
            this._AllowTextContent = value;
        },
        AllowEscapeSequence$$: "System.Boolean",
        get_AllowEscapeSequence: function (){
            return this._AllowEscapeSequence;
        },
        set_AllowEscapeSequence: function (value){
            this._AllowEscapeSequence = value;
        },
        AllowMultipleTokens$$: "System.Boolean",
        get_AllowMultipleTokens: function (){
            return this._AllowMultipleTokens;
        },
        set_AllowMultipleTokens: function (value){
            this._AllowMultipleTokens = value;
        },
        AllowDefaultAttributes$$: "System.Boolean",
        get_AllowDefaultAttributes: function (){
            return this._AllowDefaultAttributes;
        },
        set_AllowDefaultAttributes: function (value){
            this._AllowDefaultAttributes = value;
        },
        AllowAttributes$$: "System.Boolean",
        get_AllowAttributes: function (){
            return this._AllowAttributes;
        },
        set_AllowAttributes: function (value){
            this._AllowAttributes = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenParserConfiguration);
var Neptuo$Tokens$TokenStateMachine = {
    fullname: "Neptuo.Tokens.TokenStateMachine",
    baseTypeName: "Neptuo.StateMachines.StringStateMachine$1",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (configuration){
            Neptuo.StateMachines.StringStateMachine$1.ctor.call(this, Neptuo.Tokens.TokenState.ctor, new Neptuo.Tokens.TokenStartState.ctor$$Configuration(configuration));
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Tokens.TokenStateMachine.Configuration"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenStateMachine);
var Neptuo$Tokens$TokenStateMachine$Configuration = {
    fullname: "Neptuo.Tokens.TokenStateMachine.Configuration",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._AllowTextContent = false;
            this._AllowMultipleTokens = false;
            this._AllowAttributes = false;
            this._AllowDefaultAttributes = false;
            this._AllowEscapeSequence = false;
            System.Object.ctor.call(this);
        },
        AllowTextContent$$: "System.Boolean",
        get_AllowTextContent: function (){
            return this._AllowTextContent;
        },
        set_AllowTextContent: function (value){
            this._AllowTextContent = value;
        },
        AllowMultipleTokens$$: "System.Boolean",
        get_AllowMultipleTokens: function (){
            return this._AllowMultipleTokens;
        },
        set_AllowMultipleTokens: function (value){
            this._AllowMultipleTokens = value;
        },
        AllowAttributes$$: "System.Boolean",
        get_AllowAttributes: function (){
            return this._AllowAttributes;
        },
        set_AllowAttributes: function (value){
            this._AllowAttributes = value;
        },
        AllowDefaultAttributes$$: "System.Boolean",
        get_AllowDefaultAttributes: function (){
            return this._AllowDefaultAttributes;
        },
        set_AllowDefaultAttributes: function (value){
            this._AllowDefaultAttributes = value;
        },
        AllowEscapeSequence$$: "System.Boolean",
        get_AllowEscapeSequence: function (){
            return this._AllowEscapeSequence;
        },
        set_AllowEscapeSequence: function (value){
            this._AllowEscapeSequence = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenStateMachine$Configuration);
var Neptuo$Tokens$TokenStateMachine$Result = {
    fullname: "Neptuo.Tokens.TokenStateMachine.Result",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Token = null;
            this._StartIndex = 0;
            this._LastIndex = 0;
            System.Object.ctor.call(this);
            this.set_Token(new Neptuo.Tokens.Token.ctor());
        },
        Token$$: "Neptuo.Tokens.Token",
        get_Token: function (){
            return this._Token;
        },
        set_Token: function (value){
            this._Token = value;
        },
        StartIndex$$: "System.Int32",
        get_StartIndex: function (){
            return this._StartIndex;
        },
        set_StartIndex: function (value){
            this._StartIndex = value;
        },
        LastIndex$$: "System.Int32",
        get_LastIndex: function (){
            return this._LastIndex;
        },
        set_LastIndex: function (value){
            this._LastIndex = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenStateMachine$Result);
var Neptuo$Tokens$TokenState = {
    fullname: "Neptuo.Tokens.TokenState",
    baseTypeName: "Neptuo.StateMachines.StringState$2",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Configuration = null;
            this._HasToken = false;
            this._WasLineStart = false;
            this._LineNumber = 0;
            this._ColumnIndex = 0;
            this._CurrentLineNumber = 0;
            this._CurrentColumnIndex = 0;
            Neptuo.StateMachines.StringState$2.ctor.call(this, Neptuo.Tokens.TokenStateMachine.Result.ctor, Neptuo.Tokens.TokenState.ctor);
        },
        Configuration$$: "Neptuo.Tokens.TokenStateMachine+Configuration",
        get_Configuration: function (){
            return this._Configuration;
        },
        set_Configuration: function (value){
            this._Configuration = value;
        },
        HasToken$$: "System.Boolean",
        get_HasToken: function (){
            return this._HasToken;
        },
        set_HasToken: function (value){
            this._HasToken = value;
        },
        WasLineStart$$: "System.Boolean",
        get_WasLineStart: function (){
            return this._WasLineStart;
        },
        set_WasLineStart: function (value){
            this._WasLineStart = value;
        },
        LineNumber$$: "System.Int32",
        get_LineNumber: function (){
            return this._LineNumber;
        },
        set_LineNumber: function (value){
            this._LineNumber = value;
        },
        ColumnIndex$$: "System.Int32",
        get_ColumnIndex: function (){
            return this._ColumnIndex;
        },
        set_ColumnIndex: function (value){
            this._ColumnIndex = value;
        },
        CurrentLineNumber$$: "System.Int32",
        get_CurrentLineNumber: function (){
            return this._CurrentLineNumber;
        },
        set_CurrentLineNumber: function (value){
            this._CurrentLineNumber = value;
        },
        CurrentColumnIndex$$: "System.Int32",
        get_CurrentColumnIndex: function (){
            return this._CurrentColumnIndex;
        },
        set_CurrentColumnIndex: function (value){
            this._CurrentColumnIndex = value;
        },
        Move$1: function (TNewState){
            var newState = Neptuo.StateMachines.StringState$2.commonPrototype.Move$1.call(TNewState, this);
            newState.set_Configuration(this.get_Configuration());
            newState.set_HasToken(this.get_HasToken());
            newState.set_CurrentLineNumber(this.get_CurrentLineNumber());
            newState.set_CurrentColumnIndex(this.get_CurrentColumnIndex());
            newState.set_LineNumber(this.get_LineNumber());
            newState.set_ColumnIndex(this.get_ColumnIndex());
            return newState;
        },
        UpdateCurrentLineInfo: function (input, position){
            if (this.get_WasLineStart() && input == "\n"){
                this.set_WasLineStart(false);
                this.set_CurrentLineNumber(this.get_CurrentLineNumber() + 1);
                this.set_CurrentColumnIndex(-1);
                return;
            }
            if (!this.get_WasLineStart() && input == "\r"){
                this.set_WasLineStart(true);
                return;
            }
            this.set_CurrentColumnIndex(this.get_CurrentColumnIndex() + 1);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$Tokens$TokenState);
var Neptuo$Tokens$TokenStartState = {
    fullname: "Neptuo.Tokens.TokenStartState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        ctor$$Configuration: function (configuration){
            Neptuo.Tokens.TokenState.ctor.call(this);
            this.set_Context(new Neptuo.Tokens.TokenStateMachine.Result.ctor());
            this.set_Configuration(configuration);
        },
        Accept: function (input, position){
            if (input == "{"){
                this.set_LineNumber(this.get_CurrentLineNumber());
                this.set_ColumnIndex(this.get_CurrentColumnIndex());
                return this.Move$1(Neptuo.Tokens.TokenFullnameState.ctor);
            }
            if (!this.get_Configuration().get_AllowTextContent())
                return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
            this.get_Text().Append$$Char(input);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Configuration",
        parameters: ["Neptuo.Tokens.TokenStateMachine.Configuration"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenStartState);
var Neptuo$Tokens$TokenEscapeState = {
    fullname: "Neptuo.Tokens.TokenEscapeState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.hasFirstEscape = false;
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        Accept: function (input, position){
            if (input == "}"){
                if (this.hasFirstEscape)
                    return this.Move$1(Neptuo.Tokens.TokenStartState.ctor);
                this.hasFirstEscape = true;
            }
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenEscapeState);
var Neptuo$Tokens$TokenFullnameState = {
    fullname: "Neptuo.Tokens.TokenFullnameState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        Accept: function (input, position){
            if (input == "{"){
                if (this.get_Text().get_Length() == 0){
                    if (this.get_Configuration().get_AllowEscapeSequence())
                        return this.Move$1(Neptuo.Tokens.TokenEscapeState.ctor);
                }
                return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
            }
            if (this.get_HasToken() && !this.get_Configuration().get_AllowMultipleTokens())
                return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
            if (input == " "){
                if (!this.get_Configuration().get_AllowAttributes())
                    return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
                this.get_Context().get_Token().set_Fullname(this.get_Text().ToString());
                return this.Move$1(Neptuo.Tokens.TokenDefaultAttributesState.ctor);
            }
            if (input == "}"){
                this.get_Context().set_LastIndex(position);
                this.get_Context().get_Token().set_Fullname(this.get_Text().ToString());
                return this.Move$1(Neptuo.Tokens.TokenDoneState.ctor);
            }
            if (this.get_Text().get_Length() == 0)
                this.get_Context().set_StartIndex(position - 1);
            this.get_Text().Append$$Char(input);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenFullnameState);
var Neptuo$Tokens$TokenDefaultAttributesState = {
    fullname: "Neptuo.Tokens.TokenDefaultAttributesState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.innerExtensions = 0;
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        Accept: function (input, position){
            if (input == " " && this.get_Text().get_Length() == 0)
                return this;
            if (this.innerExtensions == 0){
                if (input == ","){
                    if (!this.get_Configuration().get_AllowDefaultAttributes())
                        return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
                    this.get_Context().get_Token().AddDefaultAttribute(this.get_Text().ToString());
                    return this.Move$1(Neptuo.Tokens.TokenDefaultAttributesState.ctor);
                }
                if (input == "="){
                    this.get_Context().get_Token().AddAttribute(new Neptuo.Tokens.TokenAttribute.ctor(this.get_Text().ToString(), null));
                    return this.Move$1(Neptuo.Tokens.TokenAttributeValueState.ctor);
                }
            }
            if (input == "}"){
                if (!this.get_Configuration().get_AllowDefaultAttributes())
                    return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
                if (this.innerExtensions == 0){
                    this.get_Context().set_LastIndex(position);
                    this.get_Context().get_Token().AddDefaultAttribute(this.get_Text().ToString());
                    return this.Move$1(Neptuo.Tokens.TokenDoneState.ctor);
                }
                else {
                    this.innerExtensions--;
                }
            }
            if (input == "{")
                this.innerExtensions++;
            this.get_Text().Append$$Char(input);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenDefaultAttributesState);
var Neptuo$Tokens$TokenAttributeNameState = {
    fullname: "Neptuo.Tokens.TokenAttributeNameState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        Accept: function (input, position){
            if (input == "="){
                this.get_Context().get_Token().AddAttribute(new Neptuo.Tokens.TokenAttribute.ctor(this.get_Text().ToString(), null));
                return this.Move$1(Neptuo.Tokens.TokenAttributeValueState.ctor);
            }
            if (input == " " && this.get_Text().get_Length() == 0)
                return this;
            if (input == "{" || input == "}" || input == "," || input == " ")
                return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
            this.get_Text().Append$$Char(input);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenAttributeNameState);
var Neptuo$Tokens$TokenAttributeValueState = {
    fullname: "Neptuo.Tokens.TokenAttributeValueState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.innerExtensions = 0;
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        Accept: function (input, position){
            if (this.innerExtensions == 0){
                if (input == ","){
                    System.Linq.Enumerable.LastOrDefault$1$$IEnumerable$1(Neptuo.Tokens.TokenAttribute.ctor, this.get_Context().get_Token().get_Attributes()).set_Value(this.get_Text().ToString());
                    return this.Move$1(Neptuo.Tokens.TokenAttributeNameState.ctor);
                }
            }
            if (input == "}"){
                if (this.innerExtensions == 0){
                    this.get_Context().set_LastIndex(position);
                    System.Linq.Enumerable.LastOrDefault$1$$IEnumerable$1(Neptuo.Tokens.TokenAttribute.ctor, this.get_Context().get_Token().get_Attributes()).set_Value(this.get_Text().ToString());
                    return this.Move$1(Neptuo.Tokens.TokenDoneState.ctor);
                }
                else {
                    this.innerExtensions--;
                }
            }
            if (input == "{")
                this.innerExtensions++;
            this.get_Text().Append$$Char(input);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenAttributeValueState);
var Neptuo$Tokens$TokenDoneState = {
    fullname: "Neptuo.Tokens.TokenDoneState",
    baseTypeName: "Neptuo.Tokens.TokenStartState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Tokens.TokenStartState.ctor.call(this);
        },
        GetContextForNewState: function (){
            return new Neptuo.Tokens.TokenStateMachine.Result.ctor();
        },
        Accept: function (input, position){
            this.set_HasToken(true);
            var newState = Neptuo.Tokens.TokenStartState.commonPrototype.Accept.call(this, input, position);
            return newState;
        },
        GetResult: function (){
            return this.get_Context();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenDoneState);
var Neptuo$Tokens$TokenErrorState = {
    fullname: "Neptuo.Tokens.TokenErrorState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        Accept: function (input, position){
            this.get_Text().Append$$Char(input);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenErrorState);
var Neptuo$Tokens$TokenWriter = {
    fullname: "Neptuo.Tokens.TokenWriter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (format){
            this.items = new System.Collections.Generic.List$1.ctor(Neptuo.Tokens.TokenWriterItem.ctor);
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNullOrEmpty(format, "format");
            Neptuo.Tokens.TokenFormatHelper.Parse(format, this.items);
        },
        Format$$Func$2$String$String: function (tokenMapper){
            var result = new System.Text.StringBuilder.ctor();
            var $it20 = this.items.GetEnumerator();
            while ($it20.MoveNext()){
                var item = $it20.get_Current();
                if (item.get_IsToken())
                    result.Append$$String(tokenMapper(item.get_Value()));
                else
                    result.Append$$String(item.get_Value());
            }
            return result.ToString();
        },
        Format$$IReadOnlyKeyValueCollection: function (tokenMapper){
            var result = new System.Text.StringBuilder.ctor();
            var $it21 = this.items.GetEnumerator();
            while ($it21.MoveNext()){
                var item = $it21.get_Current();
                if (item.get_IsToken())
                    result.Append$$String(Neptuo.Collections.Specialized._ReadOnlyKeyValueCollectionExtensions.Get$1$$IReadOnlyKeyValueCollection$$String$$T(System.String.ctor, tokenMapper, item.get_Value(), ""));
                else
                    result.Append$$String(item.get_Value());
            }
            return result.ToString();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenWriter);
var Neptuo$Tokens$TokenFormatHelper = {
    fullname: "Neptuo.Tokens.TokenFormatHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        Parse: function (format, items){
            var lastTokenEndIndex = 0;
            var parser = new Neptuo.Tokens.TokenParser.ctor();
            parser.get_Configuration().set_AllowTextContent(true);
            parser.get_Configuration().set_AllowEscapeSequence(true);
            parser.get_Configuration().set_AllowMultipleTokens(true);
            parser.add_OnParsedToken(function (sender, e){
                if (e.get_StartPosition() > 0){
                    var startIndex = System.Linq.Enumerable.Any$1$$IEnumerable$1(Neptuo.Tokens.TokenWriterItem.ctor, items) ? lastTokenEndIndex : 0;
                    if (startIndex < e.get_StartPosition())
                        items.Add(new Neptuo.Tokens.TokenWriterItem.ctor(false, format.Substring$$Int32$$Int32(startIndex, e.get_StartPosition() - startIndex)));
                }
                items.Add(new Neptuo.Tokens.TokenWriterItem.ctor(true, e.get_Token().get_Fullname()));
                lastTokenEndIndex = e.get_EndPosition();
            });
            if (!parser.Parse(format))
                throw $CreateException(Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(Neptuo.Ensure.Exception, "format", "Format string \'{0}\' doesn\'t contain valid token format string.", format), new Error());
            if (lastTokenEndIndex < format.get_Length())
                items.Add(new Neptuo.Tokens.TokenWriterItem.ctor(false, format.Substring$$Int32(lastTokenEndIndex)));
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenFormatHelper);
var Neptuo$Tokens$TokenWriterItem = {
    fullname: "Neptuo.Tokens.TokenWriterItem",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (isToken, value){
            this._IsToken = false;
            this._Value = null;
            System.Object.ctor.call(this);
            this.set_IsToken(isToken);
            this.set_Value(value);
        },
        IsToken$$: "System.Boolean",
        get_IsToken: function (){
            return this._IsToken;
        },
        set_IsToken: function (value){
            this._IsToken = value;
        },
        Value$$: "System.String",
        get_Value: function (){
            return this._Value;
        },
        set_Value: function (value){
            this._Value = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Boolean", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenWriterItem);
var Neptuo$Pipelines$Validators$DependencyValidationDispatcher = {
    fullname: "Neptuo.Pipelines.Validators.DependencyValidationDispatcher",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Pipelines.Validators.DependencyValidationDispatcher.ValidateMethodName = "Validate";
        }
    },
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Validators.IValidationDispatcher"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyProvider){
            this.dependencyProvider = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            this.dependencyProvider = dependencyProvider;
        },
        Validate$1$$TModel: function (TModel, model){
            var validatable = As(model, Neptuo.DomainModels.IValidatableModel.ctor);
            if (validatable != null){
                if (validatable.get_IsValid() != null)
                    return new Neptuo.Pipelines.Validators.ValidationResult.ctor$$Boolean(validatable.get_IsValid().get_Value());
            }
            var validator = Neptuo.Activators._DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.Pipelines.Validators.Handlers.IValidationHandler$1.ctor, this.dependencyProvider);
            var result = validator.Handle(model);
            if (validatable != null)
                validatable.set_IsValid(result.get_IsValid());
            return result;
        },
        Validate$$Object: function (model){
            Neptuo.Ensure.NotNull$$Object$$String(model, "model");
            var modelType = model.GetType();
            var validatorType = Typeof(Neptuo.Pipelines.Validators.Handlers.IValidationHandler$1.ctor).MakeGenericType(modelType);
            var validateMethod = validatorType.GetMethod$$String(Neptuo.Pipelines.Validators.DependencyValidationDispatcher.ValidateMethodName);
            var validator = this.dependencyProvider.Resolve(validatorType);
            var validationResult = validateMethod.Invoke$$Object$$Object$Array(validator, [model]);
            return Cast(validationResult, Neptuo.Pipelines.Validators.IValidationResult.ctor);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Activators.IDependencyProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Validators$DependencyValidationDispatcher);
var Neptuo$Pipelines$Validators$IValidationResult = {
    fullname: "Neptuo.Pipelines.Validators.IValidationResult",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Validators$IValidationResult);
var Neptuo$Pipelines$Validators$Messages$IValidationMessage = {
    fullname: "Neptuo.Pipelines.Validators.Messages.IValidationMessage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Validators$Messages$IValidationMessage);
var Neptuo$Pipelines$Validators$Handlers$IValidationHandler$1 = {
    fullname: "Neptuo.Pipelines.Validators.Handlers.IValidationHandler$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Validators$Handlers$IValidationHandler$1);
var Neptuo$Pipelines$Validators$IValidationDispatcher = {
    fullname: "Neptuo.Pipelines.Validators.IValidationDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Pipelines$Validators$IValidationDispatcher);
var Neptuo$Pipelines$Validators$Messages$PropertyEqualMessage = {
    fullname: "Neptuo.Pipelines.Validators.Messages.PropertyEqualMessage",
    baseTypeName: "Neptuo.Pipelines.Validators.Messages.PropertyValidationMessageBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (key, otherProperty, propertyName){
            this._OtherProperty = null;
            Neptuo.Pipelines.Validators.Messages.PropertyValidationMessageBase.ctor.call(this, key, propertyName);
            this.set_OtherProperty(otherProperty);
        },
        OtherProperty$$: "System.String",
        get_OtherProperty: function (){
            return this._OtherProperty;
        },
        set_OtherProperty: function (value){
            this._OtherProperty = value;
        },
        GetTextMessage: function (){
            return System.String.Format$$String$$Object$$Object("{0} must match {1}.", this.get_PropertyName(), this.get_OtherProperty());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Validators$Messages$PropertyEqualMessage);
var Neptuo$Pipelines$Validators$Messages$PropertyValidationMessageBase = {
    fullname: "Neptuo.Pipelines.Validators.Messages.PropertyValidationMessageBase",
    baseTypeName: "Neptuo.Pipelines.Validators.Messages.ValidationMessageBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (key, propertyName){
            this.propertyName = null;
            Neptuo.Pipelines.Validators.Messages.ValidationMessageBase.ctor.call(this, key, null);
            this.propertyName = propertyName;
        },
        PropertyName$$: "System.String",
        get_PropertyName: function (){
            return (this.propertyName != null ? this.propertyName : this.get_Key());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Validators$Messages$PropertyValidationMessageBase);
var Neptuo$Pipelines$Validators$Messages$StringLengthMessage = {
    fullname: "Neptuo.Pipelines.Validators.Messages.StringLengthMessage",
    baseTypeName: "Neptuo.Pipelines.Validators.Messages.PropertyValidationMessageBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (key, minLength, maxLength, propertyName){
            this._MinLength = null;
            this._MaxLength = null;
            Neptuo.Pipelines.Validators.Messages.PropertyValidationMessageBase.ctor.call(this, key, propertyName);
            this.set_MinLength(minLength);
            this.set_MaxLength(maxLength);
        },
        MinLength$$: "System.Nullable`1[[System.Int32]]",
        get_MinLength: function (){
            return this._MinLength;
        },
        set_MinLength: function (value){
            this._MinLength = value;
        },
        MaxLength$$: "System.Nullable`1[[System.Int32]]",
        get_MaxLength: function (){
            return this._MaxLength;
        },
        set_MaxLength: function (value){
            this._MaxLength = value;
        },
        GetTextMessage: function (){
            if (this.get_MinLength() == null)
                return System.String.Format$$String$$Object$$Object("{0} must be shorter or equal to {1} characters.", this.get_PropertyName(), this.get_MaxLength());
            if (this.get_MaxLength() == null)
                return System.String.Format$$String$$Object$$Object("{0} must have length at least {1} characters.", this.get_PropertyName(), this.get_MinLength());
            return System.String.Format$$String$$Object$$Object("Length of {0} muset be between {1} and {2} characters.", this.get_MinLength(), this.get_MaxLength());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.Nullable", "System.Nullable", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Validators$Messages$StringLengthMessage);
var Neptuo$Pipelines$Validators$Messages$StringNullOrEmptyMessage = {
    fullname: "Neptuo.Pipelines.Validators.Messages.StringNullOrEmptyMessage",
    baseTypeName: "Neptuo.Pipelines.Validators.Messages.PropertyValidationMessageBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (key, propertyName){
            Neptuo.Pipelines.Validators.Messages.PropertyValidationMessageBase.ctor.call(this, key, propertyName);
        },
        GetTextMessage: function (){
            return System.String.Format$$String$$Object("{0} can\'t be empty.", this.get_PropertyName());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Validators$Messages$StringNullOrEmptyMessage);
var Neptuo$Pipelines$Validators$Messages$TextValidationMessage = {
    fullname: "Neptuo.Pipelines.Validators.Messages.TextValidationMessage",
    baseTypeName: "Neptuo.Pipelines.Validators.Messages.ValidationMessageBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (key, message){
            Neptuo.Pipelines.Validators.Messages.ValidationMessageBase.ctor.call(this, key, message);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Validators$Messages$TextValidationMessage);
var Neptuo$Pipelines$Validators$ValidationException = {
    fullname: "Neptuo.Pipelines.Validators.ValidationException",
    baseTypeName: "System.Exception",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (result){
            this._Result = null;
            System.Exception.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(result, "result");
            this.set_Result(result);
        },
        Result$$: "Neptuo.Pipelines.Validators.IValidationResult",
        get_Result: function (){
            return this._Result;
        },
        set_Result: function (value){
            this._Result = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Pipelines.Validators.IValidationResult"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Validators$ValidationException);
var Neptuo$Pipelines$Validators$Messages$ValidationMessageBase = {
    fullname: "Neptuo.Pipelines.Validators.Messages.ValidationMessageBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Validators.Messages.IValidationMessage"],
    Kind: "Class",
    definition: {
        ctor: function (key, message){
            this.message = null;
            this._Key = null;
            System.Object.ctor.call(this);
            this.set_Key(key);
            this.set_Message(message);
        },
        Key$$: "System.String",
        get_Key: function (){
            return this._Key;
        },
        set_Key: function (value){
            this._Key = value;
        },
        Message$$: "System.String",
        get_Message: function (){
            if (this.message == null)
                this.message = this.GetTextMessage();
            return this.message;
        },
        set_Message: function (value){
            this.message = value;
        },
        GetTextMessage: function (){
            return System.String.Empty;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Validators$Messages$ValidationMessageBase);
var Neptuo$Pipelines$Validators$ValidationResult = {
    fullname: "Neptuo.Pipelines.Validators.ValidationResult",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Pipelines.Validators.IValidationResult"],
    Kind: "Class",
    definition: {
        ctor$$Boolean: function (isValid){
            this._IsValid = false;
            this._Messages = null;
            Neptuo.Pipelines.Validators.ValidationResult.ctor$$Boolean$$IEnumerable$1$IValidationMessage.call(this, isValid, new System.Collections.Generic.List$1.ctor(Neptuo.Pipelines.Validators.Messages.IValidationMessage.ctor));
        },
        IsValid$$: "System.Boolean",
        get_IsValid: function (){
            return this._IsValid;
        },
        set_IsValid: function (value){
            this._IsValid = value;
        },
        Messages$$: "System.Collections.Generic.IEnumerable`1[[Neptuo.Pipelines.Validators.Messages.IValidationMessage]]",
        get_Messages: function (){
            return this._Messages;
        },
        set_Messages: function (value){
            this._Messages = value;
        },
        ctor$$Boolean$$IEnumerable$1$IValidationMessage: function (isValid, messages){
            this._IsValid = false;
            this._Messages = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(messages, "messages");
            this.set_IsValid(isValid);
            this.set_Messages(messages);
        }
    },
    ctors: [{
        name: "ctor$$Boolean",
        parameters: ["System.Boolean"]
    }, {
        name: "ctor$$Boolean$$IEnumerable",
        parameters: ["System.Boolean", "System.Collections.Generic.IEnumerable"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Pipelines$Validators$ValidationResult);

