/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$PresentationModels$CopyModelValueProvider = {
    fullname: "Neptuo.PresentationModels.CopyModelValueProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (modelDefinition){
            this._ModelDefinition = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(modelDefinition, "modelDefinition");
            this.set_ModelDefinition(modelDefinition);
        },
        ModelDefinition$$: "Neptuo.PresentationModels.IModelDefinition",
        get_ModelDefinition: function (){
            return this._ModelDefinition;
        },
        set_ModelDefinition: function (value){
            this._ModelDefinition = value;
        },
        Update: function (targetSetter, sourceGetters){
            var $it1 = this.get_ModelDefinition().get_Fields().GetEnumerator();
            while ($it1.MoveNext()){
                var field = $it1.get_Current();
                var value;
                var $it2 = sourceGetters.GetEnumerator();
                while ($it2.MoveNext()){
                    var sourceGetter = $it2.get_Current();
                    if ((function (){
                        var $1 = {
                            Value: value
                        };
                        var $res = sourceGetter.TryGetValue(field.get_Identifier(), $1);
                        value = $1.Value;
                        return $res;
                    }).call(this)){
                        if (!this.IsAssignable(field.get_FieldType(), value))
                            value = Neptuo.Converts.To$$Type$$Object(field.get_FieldType(), value);
                        targetSetter.TrySetValue(field.get_Identifier(), value);
                    }
                }
            }
        },
        IsAssignable: function (fieldType, value){
            if (value != null)
                return fieldType.IsAssignableFrom(value.GetType());
            if (fieldType.get_IsValueType())
                return false;
            return true;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.IModelDefinition"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$CopyModelValueProvider);
var Neptuo$PresentationModels$FieldDefinition = {
    fullname: "Neptuo.PresentationModels.FieldDefinition",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IFieldDefinition"],
    Kind: "Class",
    definition: {
        ctor: function (identifier, fieldType, metadata){
            this._Identifier = null;
            this._FieldType = null;
            this._Metadata = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(identifier, "identifier");
            Neptuo.Ensure.NotNull$$Object$$String(fieldType, "fieldType");
            Neptuo.Ensure.NotNull$$Object$$String(metadata, "metadata");
            this.set_Identifier(identifier);
            this.set_FieldType(fieldType);
            this.set_Metadata(metadata);
        },
        Identifier$$: "System.String",
        get_Identifier: function (){
            return this._Identifier;
        },
        set_Identifier: function (value){
            this._Identifier = value;
        },
        FieldType$$: "System.Type",
        get_FieldType: function (){
            return this._FieldType;
        },
        set_FieldType: function (value){
            this._FieldType = value;
        },
        Metadata$$: "Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection",
        get_Metadata: function (){
            return this._Metadata;
        },
        set_Metadata: function (value){
            this._Metadata = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.Type", "Neptuo.Collections.Specialized.IKeyValueCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$FieldDefinition);
var Neptuo$PresentationModels$FieldDefinitionBuilderBase = {
    fullname: "Neptuo.PresentationModels.FieldDefinitionBuilderBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IFieldDefinitionBuilder"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        Build: function (){
            return new Neptuo.PresentationModels.FieldDefinition.ctor(this.BuildFieldIdentifier(), this.BuildFieldType(), this.BuildFieldMetadata());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$FieldDefinitionBuilderBase);
var Neptuo$PresentationModels$IFieldDefinition = {
    fullname: "Neptuo.PresentationModels.IFieldDefinition",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IFieldDefinition);
var Neptuo$PresentationModels$IFieldDefinitionBuilder = {
    fullname: "Neptuo.PresentationModels.IFieldDefinitionBuilder",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IFieldDefinitionBuilder);
var Neptuo$PresentationModels$IMetadataBuilder = {
    fullname: "Neptuo.PresentationModels.IMetadataBuilder",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IMetadataBuilder);
var Neptuo$PresentationModels$IModelDefinition = {
    fullname: "Neptuo.PresentationModels.IModelDefinition",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IModelDefinition);
var Neptuo$PresentationModels$IModelValueGetter = {
    fullname: "Neptuo.PresentationModels.IModelValueGetter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.IDisposable"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IModelValueGetter);
var Neptuo$PresentationModels$_ModelValueGetterExtensions = {
    fullname: "Neptuo.PresentationModels._ModelValueGetterExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetValueOrDefault$$IModelValueGetter$$String$$Object: function (getter, identifier, defaultValue){
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = getter.TryGetValue(identifier, $1);
                value = $1.Value;
                return $res;
            })())
                return value;
            return defaultValue;
        },
        GetValueOrDefault$$IModelValueGetter$$String$$Func$1$Object: function (getter, identifier, defaultValueGetter){
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = getter.TryGetValue(identifier, $1);
                value = $1.Value;
                return $res;
            })())
                return value;
            return defaultValueGetter();
        },
        GetValueOrDefault$1$$IModelValueGetter$$String$$T: function (T, getter, identifier, defaultValue){
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = getter.TryGetValue(identifier, $1);
                value = $1.Value;
                return $res;
            })())
                return Cast(value, T);
            return defaultValue;
        },
        GetValueOrDefault$1$$IModelValueGetter$$String$$Func$1: function (T, getter, identifier, defaultValueGetter){
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = getter.TryGetValue(identifier, $1);
                value = $1.Value;
                return $res;
            })())
                return Cast(value, T);
            return defaultValueGetter();
        }
    },
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$_ModelValueGetterExtensions);
var Neptuo$PresentationModels$IModelValueProvider = {
    fullname: "Neptuo.PresentationModels.IModelValueProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelValueGetter", "Neptuo.PresentationModels.IModelValueSetter"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IModelValueProvider);
var Neptuo$PresentationModels$IModelValueSetter = {
    fullname: "Neptuo.PresentationModels.IModelValueSetter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.IDisposable"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IModelValueSetter);
var Neptuo$PresentationModels$MetadataCollection = {
    fullname: "Neptuo.PresentationModels.MetadataCollection",
    baseTypeName: "Neptuo.Collections.Specialized.KeyValueCollection",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IMetadataBuilder"],
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Collections.Specialized.KeyValueCollection.ctor.call(this);
        },
        Add: function (identifier, value){
            Neptuo.Collections.Specialized.KeyValueCollection.commonPrototype.Set.call(this, identifier, value);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$MetadataCollection);
var Neptuo$PresentationModels$ModelDefinitionBuilderBase = {
    fullname: "Neptuo.PresentationModels.ModelDefinitionBuilderBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.Activators.IActivator$1"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        Create: function (){
            return new Neptuo.PresentationModels.ModelDefinition.ctor(this.BuildModelIdentifier(), this.BuildFieldDefinitions(), this.BuildModelMetadata());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$ModelDefinitionBuilderBase);
var Neptuo$PresentationModels$ModelDefinitionCollection = {
    fullname: "Neptuo.PresentationModels.ModelDefinitionCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.storageLock = new System.Object.ctor();
            this.singletons = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.PresentationModels.IModelDefinition.ctor);
            this.builders = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.Activators.IActivator$1.ctor);
            this.onSearchDefinition = new Neptuo.ComponentModel.OutFuncCollection$3.ctor(System.String.ctor, Neptuo.PresentationModels.IModelDefinition.ctor, System.Boolean.ctor);
            System.Object.ctor.call(this);
        },
        Add$$IModelDefinition: function (modelDefinition){
            Neptuo.Ensure.NotNull$$Object$$String(modelDefinition, "modelDefinition");
            this.singletons.set_Item$$TKey(modelDefinition.get_Identifier(), modelDefinition);
            return this;
        },
        Add$$String$$IActivator$1$IModelDefinition: function (modelIdentifier, modelDefinitionBuilder){
            Neptuo.Ensure.NotNullOrEmpty(modelIdentifier, "modelIdentifier");
            Neptuo.Ensure.NotNull$$Object$$String(modelDefinitionBuilder, "modelDefinitionBuilder");
            this.builders.set_Item$$TKey(modelIdentifier, modelDefinitionBuilder);
            return this;
        },
        AddSearchHandler: function (searchHandler){
            Neptuo.Ensure.NotNull$$Object$$String(searchHandler, "searchHandler");
            this.onSearchDefinition.Add(searchHandler);
            return this;
        },
        TryGet: function (modelIdentifier, modelDefinition){
            Neptuo.Ensure.NotNullOrEmpty(modelIdentifier, "modelIdentifier");
            if (this.singletons.TryGetValue(modelIdentifier, modelDefinition))
                return true;
            var builder;
            if ((function (){
                var $1 = {
                    Value: builder
                };
                var $res = this.builders.TryGetValue(modelIdentifier, $1);
                builder = $1.Value;
                return $res;
            }).call(this)){
                this.singletons.set_Item$$TKey(modelIdentifier, modelDefinition.Value = builder.Create());
                return true;
            }
            if (Neptuo.ComponentModel._OutFuncCollectionExtensions.TryExecute$2(System.String.ctor, Neptuo.PresentationModels.IModelDefinition.ctor, this.onSearchDefinition, modelIdentifier, modelDefinition)){
                this.singletons.set_Item$$TKey(modelIdentifier, modelDefinition.Value);
                return true;
            }
            modelDefinition.Value = null;
            return true;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$ModelDefinitionCollection);
var Neptuo$PresentationModels$VersionInfo = {
    fullname: "Neptuo.PresentationModels.VersionInfo",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.PresentationModels.VersionInfo.Version = "6.0.0";
        },
        GetVersion: function (){
            return new System.Version.ctor$$String("6.0.0");
        }
    },
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$VersionInfo);
var Neptuo$PresentationModels$ModelDefinition = {
    fullname: "Neptuo.PresentationModels.ModelDefinition",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelDefinition"],
    Kind: "Class",
    definition: {
        ctor: function (identifier, fields, metadata){
            this._Identifier = null;
            this._Fields = null;
            this._Metadata = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(identifier, "identifier");
            Neptuo.Ensure.NotNull$$Object$$String(fields, "fields");
            Neptuo.Ensure.NotNull$$Object$$String(metadata, "metadata");
            this.set_Identifier(identifier);
            this.set_Fields(new System.Collections.Generic.List$1.ctor$$IEnumerable$1(Neptuo.PresentationModels.IFieldDefinition.ctor, fields));
            this.set_Metadata(metadata);
        },
        Identifier$$: "System.String",
        get_Identifier: function (){
            return this._Identifier;
        },
        set_Identifier: function (value){
            this._Identifier = value;
        },
        Fields$$: "System.Collections.Generic.IEnumerable`1[[Neptuo.PresentationModels.IFieldDefinition]]",
        get_Fields: function (){
            return this._Fields;
        },
        set_Fields: function (value){
            this._Fields = value;
        },
        Metadata$$: "Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection",
        get_Metadata: function (){
            return this._Metadata;
        },
        set_Metadata: function (value){
            this._Metadata = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.Collections.Generic.IEnumerable", "Neptuo.Collections.Specialized.IKeyValueCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$ModelDefinition);
var Neptuo$PresentationModels$ProxyModelDefinition = {
    fullname: "Neptuo.PresentationModels.ProxyModelDefinition",
    baseTypeName: "Neptuo.PresentationModels.ProxyModelDefinitionBase",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (modelDefinition){
            this._ModelDefinition = null;
            Neptuo.PresentationModels.ProxyModelDefinitionBase.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(modelDefinition, "modelDefinition");
            this.set_ModelDefinition(modelDefinition);
        },
        ModelDefinition$$: "Neptuo.PresentationModels.IModelDefinition",
        get_ModelDefinition: function (){
            return this._ModelDefinition;
        },
        set_ModelDefinition: function (value){
            this._ModelDefinition = value;
        },
        RefreshIdentifier: function (){
            return this.get_ModelDefinition().get_Identifier();
        },
        RefreshFields: function (){
            return this.get_ModelDefinition().get_Fields();
        },
        RefreshMetadata: function (){
            return this.get_ModelDefinition().get_Metadata();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.IModelDefinition"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$ProxyModelDefinition);
var Neptuo$PresentationModels$ProxyModelDefinitionBase = {
    fullname: "Neptuo.PresentationModels.ProxyModelDefinitionBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelDefinition"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.identifier = null;
            this.fields = null;
            this.metadata = null;
            this._IsRefreshRequired = false;
            System.Object.ctor.call(this);
            this.set_IsRefreshRequired(true);
        },
        IsRefreshRequired$$: "System.Boolean",
        get_IsRefreshRequired: function (){
            return this._IsRefreshRequired;
        },
        set_IsRefreshRequired: function (value){
            this._IsRefreshRequired = value;
        },
        Identifier$$: "System.String",
        get_Identifier: function (){
            if (this.get_IsRefreshRequired()){
                this.identifier = this.RefreshIdentifier();
                this.set_IsRefreshRequired(false);
            }
            return this.identifier;
        },
        Fields$$: "System.Collections.Generic.IEnumerable`1[[Neptuo.PresentationModels.IFieldDefinition]]",
        get_Fields: function (){
            if (this.get_IsRefreshRequired()){
                this.fields = this.RefreshFields();
                this.set_IsRefreshRequired(false);
            }
            return this.fields;
        },
        Metadata$$: "Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection",
        get_Metadata: function (){
            if (this.get_IsRefreshRequired()){
                this.metadata = this.RefreshMetadata();
                this.set_IsRefreshRequired(false);
            }
            return this.metadata;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$ProxyModelDefinitionBase);
var Neptuo$PresentationModels$TypeModels$AttributeMetadataReaderBase$1 = {
    fullname: "Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderBase$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.TypeModels.IAttributeMetadataReader"],
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            System.Object.ctor.call(this);
        },
        Apply: function (attribute, builder){
            Neptuo.Ensure.NotNull$$Object$$String(attribute, "attribute");
            Neptuo.Ensure.NotNull$$Object$$String(builder, "builder");
            var targetAttribute = As(attribute, this.T);
            if (targetAttribute == null)
                throw $CreateException(Neptuo._EnsureSystemExtensions.InvalidOperation(Neptuo.Ensure.Exception, "Reader can process only attribute of type \'{0}\'", Typeof(this.T).get_FullName()), new Error());
            this.ApplyInternal(targetAttribute, builder);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$AttributeMetadataReaderBase$1);
var Neptuo$PresentationModels$TypeModels$AttributeMetadataReaderCollection = {
    fullname: "Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.storageLock = new System.Object.ctor();
            this.values = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, Neptuo.PresentationModels.TypeModels.IAttributeMetadataReader.ctor);
            System.Object.ctor.call(this);
        },
        Add: function (attributeType, reader){
            Neptuo.Ensure.NotNull$$Object$$String(attributeType, "attributeType");
            Neptuo.Ensure.NotNull$$Object$$String(reader, "reader");
            this.values.set_Item$$TKey(attributeType, reader);
            return this;
        },
        TryGet: function (attributeType, reader){
            Neptuo.Ensure.NotNull$$Object$$String(attributeType, "attributeType");
            return this.values.TryGetValue(attributeType, reader);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$AttributeMetadataReaderCollection);
var Neptuo$PresentationModels$TypeModels$Expressions$ExpressionModelValueProvider$1 = {
    fullname: "Neptuo.PresentationModels.TypeModels.Expressions.ExpressionModelValueProvider$1",
    baseTypeName: "Neptuo.ComponentModel.DisposableBase",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelValueProvider"],
    Kind: "Class",
    definition: {
        ctor: function (TModel, model, valueProviders){
            this.TModel = TModel;
            this._Model = null;
            this._ValueProviders = null;
            Neptuo.ComponentModel.DisposableBase.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(model, "model");
            Neptuo.Ensure.NotNull$$Object$$String(valueProviders, "valueProviders");
            this.set_Model(model);
            this.set_ValueProviders(valueProviders);
        },
        Model$$: "`0",
        get_Model: function (){
            return this._Model;
        },
        set_Model: function (value){
            this._Model = value;
        },
        ValueProviders$$: "Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProviderCollection`1[[`0]]",
        get_ValueProviders: function (){
            return this._ValueProviders;
        },
        set_ValueProviders: function (value){
            this._ValueProviders = value;
        },
        TryGetValue: function (identifier, value){
            value.Value = this.GetValueProvider(identifier).GetValue(this.get_Model());
            return true;
        },
        TrySetValue: function (identifier, value){
            this.GetValueProvider(identifier).SetValue(this.get_Model(), value);
            return true;
        },
        GetValueProvider: function (identifier){
            var valueProvider;
            if (!(function (){
                var $1 = {
                    Value: valueProvider
                };
                var $res = this.get_ValueProviders().TryGet(identifier, $1);
                valueProvider = $1.Value;
                return $res;
            }).call(this))
                throw $CreateException(Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(Neptuo.Ensure.Exception, "identifier", "Unnable to find property \'{0}\'.", identifier), new Error());
            return valueProvider;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["TModel", "Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProviderCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$Expressions$ExpressionModelValueProvider$1);
var Neptuo$PresentationModels$TypeModels$Expressions$FieldValueProviderCollection$1 = {
    fullname: "Neptuo.PresentationModels.TypeModels.Expressions.FieldValueProviderCollection$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProviderCollection$1"],
    Kind: "Class",
    definition: {
        ctor: function (TModel){
            this.TModel = TModel;
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProvider$1.ctor);
            System.Object.ctor.call(this);
        },
        Add: function (fieldIdentifier, provider){
            Neptuo.Ensure.NotNullOrEmpty(fieldIdentifier, "fieldIdentifier");
            Neptuo.Ensure.NotNull$$Object$$String(provider, "provider");
            this.storage.set_Item$$TKey(fieldIdentifier, provider);
            return this;
        },
        TryGet: function (fieldIdentifier, provider){
            Neptuo.Ensure.NotNullOrEmpty(fieldIdentifier, "fieldIdentifier");
            return this.storage.TryGetValue(fieldIdentifier, provider);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$Expressions$FieldValueProviderCollection$1);
var Neptuo$PresentationModels$TypeModels$Expressions$FuncFieldValueProvider$2 = {
    fullname: "Neptuo.PresentationModels.TypeModels.Expressions.FuncFieldValueProvider$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProvider$1"],
    Kind: "Class",
    definition: {
        ctor: function (TModel, TPropertyType, getter, setter){
            this.TModel = TModel;
            this.TPropertyType = TPropertyType;
            this._Getter = null;
            this._Setter = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(getter, "getter");
            Neptuo.Ensure.NotNull$$Object$$String(setter, "setter");
            this.set_Getter(getter);
            this.set_Setter(setter);
        },
        Getter$$: "System.Func`2[[`0],[`1]]",
        get_Getter: function (){
            return this._Getter;
        },
        set_Getter: function (value){
            this._Getter = value;
        },
        Setter$$: "System.Action`2[[`0],[`1]]",
        get_Setter: function (){
            return this._Setter;
        },
        set_Setter: function (value){
            this._Setter = value;
        },
        GetValue: function (model){
            return this.get_Getter()(model);
        },
        SetValue: function (model, value){
            this.get_Setter()(model, Cast(value, this.TPropertyType));
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Func", "System.Action"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$Expressions$FuncFieldValueProvider$2);
var Neptuo$PresentationModels$TypeModels$Expressions$IFieldValueProvider$1 = {
    fullname: "Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProvider$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$Expressions$IFieldValueProvider$1);
var Neptuo$PresentationModels$TypeModels$Expressions$IFieldValueProviderCollection$1 = {
    fullname: "Neptuo.PresentationModels.TypeModels.Expressions.IFieldValueProviderCollection$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$Expressions$IFieldValueProviderCollection$1);
var Neptuo$PresentationModels$TypeModels$IAttributeMetadataReader = {
    fullname: "Neptuo.PresentationModels.TypeModels.IAttributeMetadataReader",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$IAttributeMetadataReader);
var Neptuo$PresentationModels$TypeModels$IMetadataReader = {
    fullname: "Neptuo.PresentationModels.TypeModels.IMetadataReader",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$IMetadataReader);
var Neptuo$PresentationModels$TypeModels$ReflectionModelDefinitionBuilder = {
    fullname: "Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder",
    baseTypeName: "Neptuo.PresentationModels.ModelDefinitionBuilderBase",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (modelType, metadataReaderCollection){
            this._ModelType = null;
            this._MetadataReaderCollection = null;
            Neptuo.PresentationModels.ModelDefinitionBuilderBase.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(modelType, "modelType");
            Neptuo.Ensure.NotNull$$Object$$String(metadataReaderCollection, "metadataReaderCollection");
            this.set_ModelType(modelType);
            this.set_MetadataReaderCollection(metadataReaderCollection);
        },
        ModelType$$: "System.Type",
        get_ModelType: function (){
            return this._ModelType;
        },
        set_ModelType: function (value){
            this._ModelType = value;
        },
        MetadataReaderCollection$$: "Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderCollection",
        get_MetadataReaderCollection: function (){
            return this._MetadataReaderCollection;
        },
        set_MetadataReaderCollection: function (value){
            this._MetadataReaderCollection = value;
        },
        BuildModelIdentifier: function (){
            return this.BuildIdentifier(this.get_ModelType());
        },
        BuildModelMetadata: function (){
            return this.BuildMetadata(this.get_ModelType());
        },
        BuildFieldDefinitions: function (){
            var fields = new System.Collections.Generic.List$1.ctor(Neptuo.PresentationModels.IFieldDefinition.ctor);
            var $it3 = this.get_ModelType().GetProperties().GetEnumerator();
            while ($it3.MoveNext()){
                var propertyInfo = $it3.get_Current();
                if (this.IsFieldCompatibleProperty(propertyInfo))
                    fields.Add(new Neptuo.PresentationModels.FieldDefinition.ctor(this.BuildIdentifier(propertyInfo), this.BuildFieldType(propertyInfo), this.BuildMetadata(propertyInfo)));
            }
            return fields;
        },
        IsFieldCompatibleProperty: function (propertyInfo){
            return true;
        },
        BuildMetadata: function (memberInfo){
            var collection = new Neptuo.PresentationModels.MetadataCollection.ctor();
            var $it4 = memberInfo.GetCustomAttributes$$Boolean(true).GetEnumerator();
            while ($it4.MoveNext()){
                var attribute = $it4.get_Current();
                var reader = As(attribute, Neptuo.PresentationModels.TypeModels.IMetadataReader.ctor);
                if (reader != null){
                    reader.Apply(collection);
                }
                else {
                    var attributeReader;
                    if ((function (){
                        var $1 = {
                            Value: attributeReader
                        };
                        var $res = this.get_MetadataReaderCollection().TryGet(attribute.GetType(), $1);
                        attributeReader = $1.Value;
                        return $res;
                    }).call(this))
                        attributeReader.Apply(attribute, collection);
                }
            }
            return collection;
        },
        BuildIdentifier: function (memberInfo){
            return memberInfo.get_Name();
        },
        BuildFieldType: function (propertyInfo){
            return propertyInfo.get_PropertyType();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Type", "Neptuo.PresentationModels.TypeModels.AttributeMetadataReaderCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$ReflectionModelDefinitionBuilder);
var Neptuo$PresentationModels$TypeModels$TypeModelDefinitionCollection = {
    fullname: "Neptuo.PresentationModels.TypeModels.TypeModelDefinitionCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.storageLock = new System.Object.ctor();
            this.singletons = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, Neptuo.PresentationModels.IModelDefinition.ctor);
            this.onSearchDefinition = new Neptuo.ComponentModel.OutFuncCollection$3.ctor(System.Type.ctor, Neptuo.PresentationModels.IModelDefinition.ctor, System.Boolean.ctor);
            System.Object.ctor.call(this);
        },
        Add: function (modelType, modelDefinition){
            Neptuo.Ensure.NotNull$$Object$$String(modelType, "modelType");
            Neptuo.Ensure.NotNull$$Object$$String(modelDefinition, "modelDefinition");
            this.singletons.set_Item$$TKey(modelType, modelDefinition);
            return this;
        },
        AddSearchHandler: function (searchHandler){
            Neptuo.Ensure.NotNull$$Object$$String(searchHandler, "searchHandler");
            this.onSearchDefinition.Add(searchHandler);
            return this;
        },
        TryGet: function (modelType, modelDefinition){
            Neptuo.Ensure.NotNull$$Object$$String(modelType, "modelType");
            if (this.singletons.TryGetValue(modelType, modelDefinition))
                return true;
            if (Neptuo.ComponentModel._OutFuncCollectionExtensions.TryExecute$2(System.Type.ctor, Neptuo.PresentationModels.IModelDefinition.ctor, this.onSearchDefinition, modelType, modelDefinition)){
                this.singletons.set_Item$$TKey(modelType, modelDefinition.Value);
                return true;
            }
            modelDefinition.Value = null;
            return true;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$TypeModelDefinitionCollection);
var Neptuo$PresentationModels$TypeModels$ReflectionModelValueProvider$1 = {
    fullname: "Neptuo.PresentationModels.TypeModels.ReflectionModelValueProvider$1",
    baseTypeName: "Neptuo.ComponentModel.DisposableBase",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelValueProvider"],
    Kind: "Class",
    definition: {
        ctor: function (TModel, model){
            this.TModel = TModel;
            this.properties = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Reflection.PropertyInfo.ctor);
            this._ModelType = null;
            this._Model = null;
            Neptuo.ComponentModel.DisposableBase.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(model, "model");
            this.set_Model(model);
            this.set_ModelType(model.GetType());
        },
        ModelType$$: "System.Type",
        get_ModelType: function (){
            return this._ModelType;
        },
        set_ModelType: function (value){
            this._ModelType = value;
        },
        Model$$: "`0",
        get_Model: function (){
            return this._Model;
        },
        set_Model: function (value){
            this._Model = value;
        },
        TryGetValue: function (identifier, value){
            Neptuo.Ensure.NotNullOrEmpty(identifier, "identifier");
            var propertyInfo;
            if ((function (){
                var $1 = {
                    Value: propertyInfo
                };
                var $res = this.TryGetPropertyInfo(identifier, $1);
                propertyInfo = $1.Value;
                return $res;
            }).call(this)){
                value.Value = propertyInfo.GetValue$$Object(this.get_Model());
                return true;
            }
            value.Value = null;
            return false;
        },
        TrySetValue: function (identifier, value){
            Neptuo.Ensure.NotNullOrEmpty(identifier, "identifier");
            var propertyInfo;
            if ((function (){
                var $1 = {
                    Value: propertyInfo
                };
                var $res = this.TryGetPropertyInfo(identifier, $1);
                propertyInfo = $1.Value;
                return $res;
            }).call(this)){
                if (value != null && !propertyInfo.get_PropertyType().IsAssignableFrom(value.GetType())){
                    var typeConverter = System.ComponentModel.TypeDescriptor.GetConverter$$Type(propertyInfo.get_PropertyType());
                    if (typeConverter != null)
                        value = typeConverter.ConvertFrom$$Object(value);
                }
                propertyInfo.SetValue$$Object$$Object(this.get_Model(), value);
                return true;
            }
            return false;
        },
        TryGetPropertyInfo: function (identifier, propertyInfo){
            if (this.properties.TryGetValue(identifier, propertyInfo))
                return true;
            propertyInfo.Value = this.get_ModelType().GetProperty$$String(identifier);
            if (System.Reflection.PropertyInfo.op_Inequality$$PropertyInfo$$PropertyInfo(propertyInfo.Value, null))
                this.properties.set_Item$$TKey(identifier, propertyInfo.Value);
            return System.Reflection.PropertyInfo.op_Inequality$$PropertyInfo$$PropertyInfo(propertyInfo.Value, null);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["TModel"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$ReflectionModelValueProvider$1);
var Neptuo$PresentationModels$TypeModels$ReflectionModelValueProvider = {
    fullname: "Neptuo.PresentationModels.TypeModels.ReflectionModelValueProvider",
    baseTypeName: "Neptuo.PresentationModels.TypeModels.ReflectionModelValueProvider$1",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (model){
            Neptuo.PresentationModels.TypeModels.ReflectionModelValueProvider$1.ctor.call(this, System.Object.ctor, model);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$ReflectionModelValueProvider);
var Neptuo$PresentationModels$TypeModels$_AttributeMetadataReaderCollectionExtensions = {
    fullname: "Neptuo.PresentationModels.TypeModels._AttributeMetadataReaderCollectionExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Add$1$$AttributeMetadataReaderCollection$$IAttributeMetadataReader: function (TAttribute, collection, reader){
            Neptuo.Ensure.NotNull$$Object$$String(collection, "collection");
            return collection.Add(Typeof(TAttribute), reader);
        },
        Add$1$$AttributeMetadataReaderCollection$$AttributeMetadataReaderBase$1: function (TAttribute, collection, reader){
            Neptuo.Ensure.NotNull$$Object$$String(collection, "collection");
            return collection.Add(Typeof(TAttribute), reader);
        }
    },
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$_AttributeMetadataReaderCollectionExtensions);
var Neptuo$PresentationModels$TypeModels$_TypeModelDefinitionCollectionExtensions = {
    fullname: "Neptuo.PresentationModels.TypeModels._TypeModelDefinitionCollectionExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        AddReflectionSearchHandler: function (collection, metadataReaders){
            Neptuo.Ensure.NotNull$$Object$$String(collection, "collection");
            Neptuo.Ensure.NotNull$$Object$$String(metadataReaders, "metadataReaders");
            collection.AddSearchHandler(function (type, model){
                model.Value = new Neptuo.PresentationModels.TypeModels.ReflectionModelDefinitionBuilder.ctor(type, metadataReaders).Create();
                return true;
            });
            return collection;
        },
        Get$$TypeModelDefinitionCollection$$Type: function (collection, modelType){
            Neptuo.Ensure.NotNull$$Object$$String(collection, "collection");
            Neptuo.Ensure.NotNull$$Object$$String(modelType, "modelType");
            var modelDefinition;
            if ((function (){
                var $1 = {
                    Value: modelDefinition
                };
                var $res = collection.TryGet(modelType, $1);
                modelDefinition = $1.Value;
                return $res;
            })())
                return modelDefinition;
            throw $CreateException(Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(Neptuo.Ensure.Exception, "modelType", "Unnable to get model definition for type \'{0}\'.", modelType.get_FullName()), new Error());
        },
        Get$1$$TypeModelDefinitionCollection: function (TModelType, collection){
            return Neptuo.PresentationModels.TypeModels._TypeModelDefinitionCollectionExtensions.Get$$TypeModelDefinitionCollection$$Type(collection, Typeof(TModelType));
        }
    },
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$TypeModels$_TypeModelDefinitionCollectionExtensions);
var Neptuo$PresentationModels$Validators$FieldMetadataValidatorBase$2 = {
    fullname: "Neptuo.PresentationModels.Validators.FieldMetadataValidatorBase$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.Validators.IFieldMetadataValidator"],
    Kind: "Class",
    definition: {
        ctor: function (TMetadataValue, TFieldValue, metadataKey){
            this.TMetadataValue = TMetadataValue;
            this.TFieldValue = TFieldValue;
            this._MetadataKey = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNullOrEmpty(metadataKey, "metadataKey");
            this.set_MetadataKey(metadataKey);
        },
        MetadataKey$$: "System.String",
        get_MetadataKey: function (){
            return this._MetadataKey;
        },
        set_MetadataKey: function (value){
            this._MetadataKey = value;
        },
        Validate$$IFieldDefinition$$IModelValueGetter$$IValidationResultBuilder: function (fieldDefinition, getter, resultBuilder){
            Neptuo.Ensure.NotNull$$Object$$String(fieldDefinition, "fieldDefinition");
            Neptuo.Ensure.NotNull$$Object$$String(getter, "getter");
            Neptuo.Ensure.NotNull$$Object$$String(resultBuilder, "resultBuilder");
            var metadataValue;
            if ((function (){
                var $1 = {
                    Value: metadataValue
                };
                var $res = fieldDefinition.get_Metadata().TryGet$1(System.Object.ctor, this.get_MetadataKey(), $1);
                metadataValue = $1.Value;
                return $res;
            }).call(this)){
                var fieldValue = Neptuo.PresentationModels._ModelValueGetterExtensions.GetValueOrDefault$1$$IModelValueGetter$$String$$T(this.TFieldValue, getter, fieldDefinition.get_Identifier(), Default(this.TFieldValue));
                var metadata = Cast(metadataValue, this.TMetadataValue);
                this.Validate$$TFieldValue$$TMetadataValue$$FieldMetadataValidatorContext(fieldValue, metadata, new Neptuo.PresentationModels.Validators.FieldMetadataValidatorContext.ctor(fieldDefinition, getter, resultBuilder));
            }
            else {
                this.MissingMetadataKey(fieldDefinition, getter, resultBuilder);
            }
        },
        MissingMetadataKey: function (fieldDefinition, getter, resultBuilder){
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Validators$FieldMetadataValidatorBase$2);
var Neptuo$PresentationModels$Validators$FieldMetadataValidatorContext = {
    fullname: "Neptuo.PresentationModels.Validators.FieldMetadataValidatorContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (fieldDefinition, getter, resultBuilder){
            this._FieldDefinition = null;
            this._Getter = null;
            this._ResultBuilder = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(fieldDefinition, "fieldDefinition");
            Neptuo.Ensure.NotNull$$Object$$String(getter, "getter");
            Neptuo.Ensure.NotNull$$Object$$String(resultBuilder, "resultBuilder");
            this.set_FieldDefinition(fieldDefinition);
            this.set_Getter(getter);
            this.set_ResultBuilder(resultBuilder);
        },
        FieldDefinition$$: "Neptuo.PresentationModels.IFieldDefinition",
        get_FieldDefinition: function (){
            return this._FieldDefinition;
        },
        set_FieldDefinition: function (value){
            this._FieldDefinition = value;
        },
        Getter$$: "Neptuo.PresentationModels.IModelValueGetter",
        get_Getter: function (){
            return this._Getter;
        },
        set_Getter: function (value){
            this._Getter = value;
        },
        ResultBuilder$$: "Neptuo.Pipelines.Validators.IValidationResultBuilder",
        get_ResultBuilder: function (){
            return this._ResultBuilder;
        },
        set_ResultBuilder: function (value){
            this._ResultBuilder = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.IFieldDefinition", "Neptuo.PresentationModels.IModelValueGetter", "Neptuo.Pipelines.Validators.IValidationResultBuilder"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validators$FieldMetadataValidatorContext);
var Neptuo$PresentationModels$Validators$FieldMetadataValidatorKey = {
    fullname: "Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (modelIdentifier, fieldIdentifier, metadataKey){
            this._ModelIdentifier = null;
            this._FieldIdentifier = null;
            this._MetadataKey = null;
            System.Object.ctor.call(this);
            this.set_ModelIdentifier(modelIdentifier);
            this.set_FieldIdentifier(fieldIdentifier);
            this.set_MetadataKey(metadataKey);
        },
        ModelIdentifier$$: "System.String",
        get_ModelIdentifier: function (){
            return this._ModelIdentifier;
        },
        set_ModelIdentifier: function (value){
            this._ModelIdentifier = value;
        },
        FieldIdentifier$$: "System.String",
        get_FieldIdentifier: function (){
            return this._FieldIdentifier;
        },
        set_FieldIdentifier: function (value){
            this._FieldIdentifier = value;
        },
        MetadataKey$$: "System.String",
        get_MetadataKey: function (){
            return this._MetadataKey;
        },
        set_MetadataKey: function (value){
            this._MetadataKey = value;
        },
        GetHashCode: function (){
            var value = 13;
            if (this.get_ModelIdentifier() != null)
                value ^= this.get_ModelIdentifier().GetHashCode();
            if (this.get_FieldIdentifier() != null)
                value ^= this.get_FieldIdentifier().GetHashCode();
            if (this.get_MetadataKey() != null)
                value ^= this.get_MetadataKey().GetHashCode();
            return value;
        },
        Equals$$Object: function (obj){
            var other = As(obj, Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.ctor);
            if (other == null)
                return false;
            if (this.get_ModelIdentifier() != other.get_ModelIdentifier())
                return false;
            if (this.get_FieldIdentifier() != other.get_FieldIdentifier())
                return false;
            if (this.get_MetadataKey() != other.get_MetadataKey())
                return false;
            return true;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validators$FieldMetadataValidatorKey);
var Neptuo$PresentationModels$Validators$IFieldValidator = {
    fullname: "Neptuo.PresentationModels.Validators.IFieldValidator",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Validators$IFieldValidator);
var Neptuo$PresentationModels$Validators$MetadataFieldValidator = {
    fullname: "Neptuo.PresentationModels.Validators.MetadataFieldValidator",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.Validators.IFieldValidator"],
    Kind: "Class",
    definition: {
        ctor: function (validators){
            this._Validators = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(validators, "validators");
            this.set_Validators(validators);
        },
        Validators$$: "Neptuo.PresentationModels.Validators.IFieldMetadataValidatorCollection",
        get_Validators: function (){
            return this._Validators;
        },
        set_Validators: function (value){
            this._Validators = value;
        },
        Validate: function (modelDefinition, fieldDefinition, getter, resultBuilder){
            var $it5 = fieldDefinition.get_Metadata().get_Keys().GetEnumerator();
            while ($it5.MoveNext()){
                var key = $it5.get_Current();
                var validator;
                if ((function (){
                    var $1 = {
                        Value: validator
                    };
                    var $res = this.get_Validators().TryGet(modelDefinition.get_Identifier(), fieldDefinition.get_Identifier(), key, $1);
                    validator = $1.Value;
                    return $res;
                }).call(this))
                    validator.Validate(fieldDefinition, getter, resultBuilder);
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.Validators.IFieldMetadataValidatorCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validators$MetadataFieldValidator);
var Neptuo$PresentationModels$Validation$ModelValidatorContext = {
    fullname: "Neptuo.PresentationModels.Validation.ModelValidatorContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (definition, getter){
            this._Definition = null;
            this._Getter = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(definition, "definition");
            Neptuo.Ensure.NotNull$$Object$$String(getter, "getter");
            this.set_Definition(definition);
            this.set_Getter(getter);
        },
        Definition$$: "Neptuo.PresentationModels.IModelDefinition",
        get_Definition: function (){
            return this._Definition;
        },
        set_Definition: function (value){
            this._Definition = value;
        },
        Getter$$: "Neptuo.PresentationModels.IModelValueGetter",
        get_Getter: function (){
            return this._Getter;
        },
        set_Getter: function (value){
            this._Getter = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.IModelDefinition", "Neptuo.PresentationModels.IModelValueGetter"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validation$ModelValidatorContext);
var Neptuo$PresentationModels$Validators$IFieldMetadataValidator = {
    fullname: "Neptuo.PresentationModels.Validators.IFieldMetadataValidator",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Validators$IFieldMetadataValidator);
var Neptuo$PresentationModels$Validators$IFieldMetadataValidatorCollection = {
    fullname: "Neptuo.PresentationModels.Validators.IFieldMetadataValidatorCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Validators$IFieldMetadataValidatorCollection);
var Neptuo$PresentationModels$Validators$Handlers$FieldMetadataModelValidator = {
    fullname: "Neptuo.PresentationModels.Validators.Handlers.FieldMetadataModelValidator",
    baseTypeName: "Neptuo.PresentationModels.Validators.Handlers.ModelValidator",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (validators){
            Neptuo.PresentationModels.Validators.Handlers.ModelValidator.ctor.call(this, new Neptuo.PresentationModels.Validators.MetadataFieldValidator.ctor(validators));
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.Validators.IFieldMetadataValidatorCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validators$Handlers$FieldMetadataModelValidator);
var Neptuo$PresentationModels$Validators$FieldMetadataValidatorCollection = {
    fullname: "Neptuo.PresentationModels.Validators.FieldMetadataValidatorCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.Validators.IFieldMetadataValidatorCollection"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.singletons = new System.Collections.Generic.Dictionary$2.ctor(Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.ctor, Neptuo.PresentationModels.Validators.IFieldMetadataValidator.ctor);
            this.builders = new System.Collections.Generic.Dictionary$2.ctor(Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.ctor, Neptuo.Activators.IActivator$1.ctor);
            this.onSearchValidator = new Neptuo.ComponentModel.OutFuncCollection$3.ctor(Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.ctor, Neptuo.PresentationModels.Validators.IFieldMetadataValidator.ctor, System.Boolean.ctor);
            System.Object.ctor.call(this);
        },
        Add$$String$$String$$String$$IFieldMetadataValidator: function (modelIdentifier, fieldIdentifier, metadataKey, validator){
            this.singletons.set_Item$$TKey(new Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.ctor(modelIdentifier, fieldIdentifier, metadataKey), validator);
            return this;
        },
        Add$$String$$String$$String$$IActivator$1$IFieldMetadataValidator: function (modelIdentifier, fieldIdentifier, metadataKey, validator){
            this.builders.set_Item$$TKey(new Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.ctor(modelIdentifier, fieldIdentifier, metadataKey), validator);
            return this;
        },
        AddSearchHandler: function (searchHandler){
            Neptuo.Ensure.NotNull$$Object$$String(searchHandler, "searchHandler");
            this.onSearchValidator.Add(searchHandler);
            return this;
        },
        TryGet: function (modelIdentifier, fieldIdentifier, metadataKey, validator){
            var $it6 = this.LazyEnumerateKeys(modelIdentifier, fieldIdentifier, metadataKey).GetEnumerator();
            while ($it6.MoveNext()){
                var key = $it6.get_Current();
                if (this.singletons.TryGetValue(key, validator))
                    return true;
                var builder;
                if ((function (){
                    var $1 = {
                        Value: builder
                    };
                    var $res = this.builders.TryGetValue(key, $1);
                    builder = $1.Value;
                    return $res;
                }).call(this)){
                    validator.Value = builder.Create();
                    return true;
                }
                if (Neptuo.ComponentModel._OutFuncCollectionExtensions.TryExecute$2(Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.ctor, Neptuo.PresentationModels.Validators.IFieldMetadataValidator.ctor, this.onSearchValidator, key, validator))
                    return true;
            }
            validator.Value = null;
            return false;
        },
        LazyEnumerateKeys: function (modelIdentifier, fieldIdentifier, metadataKey){
            var $yield = [];
            $yield.push(new Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.ctor(modelIdentifier, fieldIdentifier, metadataKey));
            $yield.push(new Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.ctor(null, fieldIdentifier, metadataKey));
            $yield.push(new Neptuo.PresentationModels.Validators.FieldMetadataValidatorKey.ctor(null, null, metadataKey));
            return $yield;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validators$FieldMetadataValidatorCollection);
var Neptuo$PresentationModels$Validators$Handlers$ModelValidator = {
    fullname: "Neptuo.PresentationModels.Validators.Handlers.ModelValidator",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.Pipelines.Validators.Handlers.IValidationHandler$1"],
    Kind: "Class",
    definition: {
        ctor: function (fieldValidator){
            this._FieldValidator = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(fieldValidator, "fieldValidator");
            this.set_FieldValidator(fieldValidator);
        },
        FieldValidator$$: "Neptuo.PresentationModels.Validators.IFieldValidator",
        get_FieldValidator: function (){
            return this._FieldValidator;
        },
        set_FieldValidator: function (value){
            this._FieldValidator = value;
        },
        CreateResultBuilder: function (){
            return new Neptuo.Pipelines.Validators.ValidationResultBuilder.ctor(true);
        },
        Handle: function (context){
            var resultBuilder = this.CreateResultBuilder();
            this.ValidateInternal(context.get_Definition(), context.get_Getter(), resultBuilder);
            return resultBuilder.ToResult();
        },
        ValidateInternal: function (modelDefinition, getter, resultBuilder){
            var $it7 = modelDefinition.get_Fields().GetEnumerator();
            while ($it7.MoveNext()){
                var fieldDefinition = $it7.get_Current();
                this.get_FieldValidator().Validate(modelDefinition, fieldDefinition, getter, resultBuilder);
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.Validators.IFieldValidator"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validators$Handlers$ModelValidator);

