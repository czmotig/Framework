/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$Services$Queries$DefaultQueryDispatcher = {
    fullname: "Neptuo.Services.Queries.DefaultQueryDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Services.Queries",
    interfaceNames: ["Neptuo.Services.Queries.IQueryHandlerCollection", "Neptuo.Services.Queries.IQueryDispatcher"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, Neptuo.Services.Queries.Internals.DefaultQueryHandlerDefinition.ctor);
            System.Object.ctor.call(this);
        },
        Add$2: function (TQuery, TOutput, handler){
            Neptuo.Ensure.NotNull$$Object$$String(handler, "handler");
            var definition = new Neptuo.Services.Queries.Internals.DefaultQueryHandlerDefinition$1.ctor(TOutput, handler, $CreateAnonymousDelegate(this, function (query){
                return handler.HandleAsync(Cast(query, TQuery));
            }));
            this.storage.set_Item$$TKey(Typeof(TQuery), definition);
            return this;
        },
        TryGet$2: function (TQuery, TOutput, handler){
            var definition;
            if ((function (){
                var $1 = {
                    Value: definition
                };
                var $res = this.storage.TryGetValue(Typeof(TQuery), $1);
                definition = $1.Value;
                return $res;
            }).call(this)){
                handler.Value = Cast(definition.get_QueryHandler(), Neptuo.Services.Queries.Handlers.IQueryHandler$2.ctor);
                return true;
            }
            handler.Value = null;
            return false;
        },
        QueryAsync$1: function (TOutput, query){
            Neptuo.Ensure.NotNull$$Object$$String(query, "query");
            var definition;
            var queryType = query.GetType();
            if ((function (){
                var $1 = {
                    Value: definition
                };
                var $res = this.storage.TryGetValue(queryType, $1);
                definition = $1.Value;
                return $res;
            }).call(this)){
                var target = Cast(definition, Neptuo.Services.Queries.Internals.DefaultQueryHandlerDefinition$1.ctor);
                return target.HandleAsync(query);
            }
            throw $CreateException(Neptuo._EnsureArgumentExtensions.ArgumentOutOfRange(Neptuo.Ensure.Exception, "query", "There isn\'t query handler query of type \'{0}\'.", queryType.get_FullName()), new Error());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Services$Queries$DefaultQueryDispatcher);
var Neptuo$Services$Queries$Handlers$IQueryHandler$2 = {
    fullname: "Neptuo.Services.Queries.Handlers.IQueryHandler$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Services.Queries",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Services$Queries$Handlers$IQueryHandler$2);
var Neptuo$Services$Queries$Internals$DefaultQueryHandlerDefinition = {
    fullname: "Neptuo.Services.Queries.Internals.DefaultQueryHandlerDefinition",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Services.Queries",
    Kind: "Class",
    definition: {
        ctor: function (queryHandler){
            this._QueryHandler = null;
            System.Object.ctor.call(this);
            this.set_QueryHandler(queryHandler);
        },
        QueryHandler$$: "System.Object",
        get_QueryHandler: function (){
            return this._QueryHandler;
        },
        set_QueryHandler: function (value){
            this._QueryHandler = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Services$Queries$Internals$DefaultQueryHandlerDefinition);
var Neptuo$Services$Queries$Internals$DefaultQueryHandlerDefinition$1 = {
    fullname: "Neptuo.Services.Queries.Internals.DefaultQueryHandlerDefinition$1",
    baseTypeName: "Neptuo.Services.Queries.Internals.DefaultQueryHandlerDefinition",
    assemblyName: "Neptuo.Services.Queries",
    Kind: "Class",
    definition: {
        ctor: function (TOutput, queryHandler, handleMethod){
            this.TOutput = TOutput;
            this._HandleMethod = null;
            Neptuo.Services.Queries.Internals.DefaultQueryHandlerDefinition.ctor.call(this, queryHandler);
            this.set_HandleMethod(handleMethod);
        },
        HandleMethod$$: "System.Func`2[[System.Object],[System.Threading.Tasks.Task`1[[`0]]]]",
        get_HandleMethod: function (){
            return this._HandleMethod;
        },
        set_HandleMethod: function (value){
            this._HandleMethod = value;
        },
        HandleAsync: function (query){
            return this.get_HandleMethod()(query);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object", "System.Func"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Services$Queries$Internals$DefaultQueryHandlerDefinition$1);
var Neptuo$Services$Queries$IQuery$1 = {
    fullname: "Neptuo.Services.Queries.IQuery$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Services.Queries",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Services$Queries$IQuery$1);
var Neptuo$Services$Queries$IQueryDispatcher = {
    fullname: "Neptuo.Services.Queries.IQueryDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Services.Queries",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Services$Queries$IQueryDispatcher);
var Neptuo$Services$Queries$IQueryHandlerCollection = {
    fullname: "Neptuo.Services.Queries.IQueryHandlerCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Services.Queries",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Services$Queries$IQueryHandlerCollection);
var Neptuo$Services$Queries$VersionInfo = {
    fullname: "Neptuo.Services.Queries.VersionInfo",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Services.Queries.VersionInfo.Version = "0.1.0";
        },
        GetVersion: function (){
            return new System.Version.ctor$$String("0.1.0");
        }
    },
    assemblyName: "Neptuo.Services.Queries",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Services$Queries$VersionInfo);

