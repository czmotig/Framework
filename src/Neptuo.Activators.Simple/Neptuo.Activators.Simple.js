/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$Activators$DependencyAttribute = {
    fullname: "Neptuo.Activators.DependencyAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo.Activators.Simple",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Attribute.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Activators$DependencyAttribute);
var Neptuo$Activators$Internals$DependencyDefinitionCollection = {
    fullname: "Neptuo.Activators.Internals.DependencyDefinitionCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Activators.Simple",
    interfaceNames: ["Neptuo.Activators.IDependencyDefinitionCollection"],
    Kind: "Class",
    definition: {
        ctor$$String$$InstanceStorage: function (scopeName, instances){
            this.definitionByKey = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.Activators.Internals.DependencyDefinition.ctor);
            this.definitionByScopeName = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            this.scopeName = null;
            this.instances = null;
            this.parentCollection = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(instances, "instances");
            this.scopeName = scopeName;
            this.instances = instances;
        },
        ctor$$String$$InstanceStorage$$DependencyDefinitionCollection: function (scopeName, instances, parentCollection){
            this.definitionByKey = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.Activators.Internals.DependencyDefinition.ctor);
            this.definitionByScopeName = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
            this.scopeName = null;
            this.instances = null;
            this.parentCollection = null;
            Neptuo.Activators.Internals.DependencyDefinitionCollection.ctor$$String$$InstanceStorage.call(this, scopeName, instances);
            Neptuo.Ensure.NotNull$$Object$$String(parentCollection, "parentCollection");
            this.parentCollection = parentCollection;
            var definitions;
            if ((function (){
                var $1 = {
                    Value: definitions
                };
                var $res = parentCollection.TryGetChild(scopeName, $1);
                definitions = $1.Value;
                return $res;
            }).call(this)){
                var $it1 = definitions.GetEnumerator();
                while ($it1.MoveNext()){
                    var definition = $it1.get_Current();
                    this.Add(definition.get_RequiredType(), definition.get_Lifetime(), definition.get_Target());
                }
            }
        },
        Add: function (requiredType, lifetime, target){
            Neptuo.Ensure.NotNull$$Object$$String(requiredType, "requiredType");
            Neptuo.Ensure.NotNull$$Object$$String(target, "target");
            var targetType = As(target, System.Type.ctor);
            if (System.Type.op_Inequality$$Type$$Type(targetType, null)){
                if (targetType.get_IsInterface())
                    throw $CreateException(new Neptuo.Activators.DependencyRegistrationFailedException.ctor$$String(System.String.Format$$String$$Object$$Object("Target can\'t be interface. Mapping \'{0}\' to \'{1}\'.", requiredType.get_FullName(), targetType.get_FullName())), new Error());
                if (targetType.get_IsAbstract())
                    throw $CreateException(new Neptuo.Activators.DependencyRegistrationFailedException.ctor$$String(System.String.Format$$String$$Object$$Object("Target can\'t be abstract class. Mapping \'{0}\' to \'{1}\'.", requiredType.get_FullName(), targetType.get_FullName())), new Error());
                var constructorInfo = this.FindBestConstructor(targetType);
                if (System.Reflection.ConstructorInfo.op_Equality$$ConstructorInfo$$ConstructorInfo(constructorInfo, null))
                    throw $CreateException(new Neptuo.Activators.DependencyRegistrationFailedException.ctor$$String(System.String.Format$$String$$Object$$Object("Target must has public contructor. Mapping \'{0}\' to \'{1}\'.", requiredType.get_FullName(), targetType.get_FullName())), new Error());
                var definition = new Neptuo.Activators.Internals.DependencyDefinition.ctor$$Type$$DependencyLifetime$$Object$$ConstructorInfo(requiredType, lifetime, targetType, constructorInfo);
                this.FindDependencyProperties(definition);
                this.AddDefinition(definition);
                return this;
            }
            var targetActivator = As(target, Neptuo.Activators.IActivator$1.ctor);
            if (targetActivator != null){
                var definition = new Neptuo.Activators.Internals.DependencyDefinition.ctor$$Type$$DependencyLifetime$$Object(requiredType, lifetime, targetActivator);
                this.instances.AddActivator(definition.get_Key(), targetActivator);
                this.AddDefinition(definition);
                return this;
            }
            targetType = target.GetType();
            if (requiredType.IsAssignableFrom(targetType)){
                var definition = new Neptuo.Activators.Internals.DependencyDefinition.ctor$$Type$$DependencyLifetime$$Object(requiredType, lifetime, target);
                this.instances.AddObject(definition.get_Key(), target);
                this.AddDefinition(definition);
                return this;
            }
            throw $CreateException(Neptuo._EnsureSystemExtensions.InvalidOperation(Neptuo.Ensure.Exception, "Not supported target type \'{0}\'.", target.GetType().get_FullName()), new Error());
        },
        AddDefinition: function (definition){
            if (definition.get_Lifetime().IsTransient || (definition.get_Lifetime().IsScoped && (definition.get_Lifetime().IsNamed && definition.get_Lifetime().Name == this.scopeName) || !definition.get_Lifetime().IsNamed))
                this.definitionByKey.set_Item$$TKey(definition.get_Key(), definition);
            if (definition.get_Lifetime().IsNamed){
                this.AddDefinitionToScope(definition.get_Lifetime().Name, definition);
            }
            else if (definition.get_Lifetime().IsScoped){
                this.AddDefinitionToScope(System.String.Empty, definition);
            }
        },
        AddDefinitionToScope: function (scopeName, definition){
            var list;
            if (!(function (){
                var $1 = {
                    Value: list
                };
                var $res = this.definitionByScopeName.TryGetValue(scopeName, $1);
                list = $1.Value;
                return $res;
            }).call(this))
                this.definitionByScopeName.set_Item$$TKey(scopeName, list = new System.Collections.Generic.List$1.ctor(Neptuo.Activators.Internals.DependencyDefinition.ctor));
            list.Add(definition);
        },
        TryGet: function (requiredType, definition){
            var result;
            if ((function (){
                var $1 = {
                    Value: result
                };
                var $res = this.TryGetInternal(requiredType, $1);
                result = $1.Value;
                return $res;
            }).call(this)){
                definition.Value = result;
                return true;
            }
            definition.Value = null;
            return false;
        },
        TryGetInternal: function (requiredType, definition){
            var key = requiredType.get_FullName();
            if (this.definitionByKey.TryGetValue(key, definition)){
                definition.Value = definition.Value.Clone(true);
                return true;
            }
            var $it2 = this.definitionByScopeName.get_Values().GetEnumerator();
            while ($it2.MoveNext()){
                var items = $it2.get_Current();
                var $it3 = items.GetEnumerator();
                while ($it3.MoveNext()){
                    var item = $it3.get_Current();
                    if (System.Type.op_Equality$$Type$$Type(item.get_RequiredType(), requiredType)){
                        definition.Value = item.Clone(false);
                        return true;
                    }
                }
            }
            if (this.parentCollection != null){
                if (this.parentCollection.TryGetInternal(requiredType, definition))
                    return true;
            }
            definition.Value = null;
            return false;
        },
        FindBestConstructor: function (type){
            var result = null;
            var $it4 = type.GetConstructors().GetEnumerator();
            while ($it4.MoveNext()){
                var ctor = $it4.get_Current();
                if (System.Reflection.ConstructorInfo.op_Equality$$ConstructorInfo$$ConstructorInfo(result, null))
                    result = ctor;
                else if (result.GetParameters().get_Length() < ctor.GetParameters().get_Length())
                    result = ctor;
            }
            return result;
        },
        FindDependencyProperties: function (definition){
            var targetType = As(definition.get_Target(), System.Type.ctor);
            if (System.Type.op_Equality$$Type$$Type(targetType, null))
                return;
            var $it5 = targetType.GetProperties().GetEnumerator();
            while ($it5.MoveNext()){
                var property = $it5.get_Current();
                if (System.Linq.Enumerable.Any$1$$IEnumerable$1(System.Attribute.ctor, System.Reflection.CustomAttributeExtensions.GetCustomAttributes$$MemberInfo$$Type(property, Typeof(Neptuo.Activators.DependencyAttribute.ctor))))
                    definition.get_DependencyProperties().Add(property);
            }
        },
        TryGetChild: function (scopeName, definitions){
            var isSucess = false;
            definitions.Value = System.Linq.Enumerable.Empty$1(Neptuo.Activators.Internals.DependencyDefinition.ctor);
            if (this.parentCollection != null){
                var parentResult;
                if ((function (){
                    var $1 = {
                        Value: parentResult
                    };
                    var $res = this.parentCollection.TryGetChild(System.String.Empty, $1);
                    parentResult = $1.Value;
                    return $res;
                }).call(this)){
                    definitions.Value = System.Linq.Enumerable.Concat$1(Neptuo.Activators.Internals.DependencyDefinition.ctor, definitions.Value, parentResult);
                    isSucess = true;
                }
                if ((function (){
                    var $1 = {
                        Value: parentResult
                    };
                    var $res = this.parentCollection.TryGetChild(scopeName, $1);
                    parentResult = $1.Value;
                    return $res;
                }).call(this)){
                    definitions.Value = System.Linq.Enumerable.Concat$1(Neptuo.Activators.Internals.DependencyDefinition.ctor, definitions.Value, parentResult);
                    isSucess = true;
                }
            }
            var result;
            if ((function (){
                var $1 = {
                    Value: result
                };
                var $res = this.definitionByScopeName.TryGetValue(System.String.Empty, $1);
                result = $1.Value;
                return $res;
            }).call(this)){
                definitions.Value = System.Linq.Enumerable.Concat$1(Neptuo.Activators.Internals.DependencyDefinition.ctor, definitions.Value, result);
                isSucess = true;
            }
            if ((function (){
                var $1 = {
                    Value: result
                };
                var $res = this.definitionByScopeName.TryGetValue(scopeName, $1);
                result = $1.Value;
                return $res;
            }).call(this)){
                definitions.Value = System.Linq.Enumerable.Concat$1(Neptuo.Activators.Internals.DependencyDefinition.ctor, definitions.Value, result);
                isSucess = true;
            }
            if (isSucess)
                return true;
            definitions.Value = null;
            return false;
        }
    },
    ctors: [{
        name: "ctor$$String$$InstanceStorage",
        parameters: ["System.String", "Neptuo.Activators.Internals.InstanceStorage"]
    }, {
        name: "ctor$$String$$InstanceStorage$$DependencyDefinitionCollection",
        parameters: ["System.String", "Neptuo.Activators.Internals.InstanceStorage", "Neptuo.Activators.Internals.DependencyDefinitionCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Activators$Internals$DependencyDefinitionCollection);
var Neptuo$Activators$Internals$DependencyDefinition = {
    fullname: "Neptuo.Activators.Internals.DependencyDefinition",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Activators.Simple",
    interfaceNames: ["Neptuo.Activators.IDependencyDefinition"],
    Kind: "Class",
    definition: {
        ctor$$Type$$DependencyLifetime$$Object: function (requiredType, lifetime, target){
            this._RequiredType = null;
            this._Lifetime = new Neptuo.Activators.DependencyLifetime.ctor();
            this._ConstructorInfo = null;
            this._Target = null;
            this._IsResolvable = false;
            this._DependencyProperties = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(requiredType, "requiredType");
            Neptuo.Ensure.NotNull$$Object$$String(target, "target");
            this.set_RequiredType(requiredType);
            this.set_Lifetime(lifetime);
            this.set_Target(target);
            this.set_DependencyProperties(new System.Collections.Generic.List$1.ctor(System.Reflection.PropertyInfo.ctor));
        },
        RequiredType$$: "System.Type",
        get_RequiredType: function (){
            return this._RequiredType;
        },
        set_RequiredType: function (value){
            this._RequiredType = value;
        },
        Lifetime$$: "Neptuo.Activators.DependencyLifetime",
        get_Lifetime: function (){
            return this._Lifetime;
        },
        set_Lifetime: function (value){
            this._Lifetime = value;
        },
        ConstructorInfo$$: "System.Reflection.ConstructorInfo",
        get_ConstructorInfo: function (){
            return this._ConstructorInfo;
        },
        set_ConstructorInfo: function (value){
            this._ConstructorInfo = value;
        },
        Target$$: "System.Object",
        get_Target: function (){
            return this._Target;
        },
        set_Target: function (value){
            this._Target = value;
        },
        IsResolvable$$: "System.Boolean",
        get_IsResolvable: function (){
            return this._IsResolvable;
        },
        set_IsResolvable: function (value){
            this._IsResolvable = value;
        },
        DependencyProperties$$: "System.Collections.Generic.List`1[[System.Reflection.PropertyInfo]]",
        get_DependencyProperties: function (){
            return this._DependencyProperties;
        },
        set_DependencyProperties: function (value){
            this._DependencyProperties = value;
        },
        HasConstructorInfo$$: "System.Boolean",
        get_HasConstructorInfo: function (){
            return System.Reflection.ConstructorInfo.op_Inequality$$ConstructorInfo$$ConstructorInfo(this.get_ConstructorInfo(), null);
        },
        Key$$: "System.String",
        get_Key: function (){
            return this.get_RequiredType().get_FullName();
        },
        ctor$$Type$$DependencyLifetime$$Object$$ConstructorInfo: function (requiredType, lifetime, target, constructorInfo){
            this._RequiredType = null;
            this._Lifetime = new Neptuo.Activators.DependencyLifetime.ctor();
            this._ConstructorInfo = null;
            this._Target = null;
            this._IsResolvable = false;
            this._DependencyProperties = null;
            Neptuo.Activators.Internals.DependencyDefinition.ctor$$Type$$DependencyLifetime$$Object.call(this, requiredType, lifetime, target);
            Neptuo.Ensure.NotNull$$Object$$String(constructorInfo, "constructorInfo");
            this.set_ConstructorInfo(constructorInfo);
        },
        Clone: function (isResolvable){
            var result;
            if (this.get_HasConstructorInfo())
                result = new Neptuo.Activators.Internals.DependencyDefinition.ctor$$Type$$DependencyLifetime$$Object$$ConstructorInfo(this.get_RequiredType(), this.get_Lifetime(), this.get_Target(), this.get_ConstructorInfo());
            else
                result = new Neptuo.Activators.Internals.DependencyDefinition.ctor$$Type$$DependencyLifetime$$Object(this.get_RequiredType(), this.get_Lifetime(), this.get_Target());
            if (this.get_DependencyProperties().get_Count() > 0)
                result.get_DependencyProperties().AddRange(this.get_DependencyProperties());
            result.set_IsResolvable(isResolvable);
            return result;
        }
    },
    ctors: [{
        name: "ctor$$Type$$DependencyLifetime$$Object",
        parameters: ["System.Type", "Neptuo.Activators.DependencyLifetime", "System.Object"]
    }, {
        name: "ctor$$Type$$DependencyLifetime$$Object$$ConstructorInfo",
        parameters: ["System.Type", "Neptuo.Activators.DependencyLifetime", "System.Object", "System.Reflection.ConstructorInfo"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Activators$Internals$DependencyDefinition);
var Neptuo$Activators$Internals$InstanceResolver = {
    fullname: "Neptuo.Activators.Internals.InstanceResolver",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Activators.Simple",
    Kind: "Class",
    definition: {
        ctor: function (definitions, instances){
            this.definitions = null;
            this.instances = null;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNull$$Object$$String(definitions, "definitions");
            Neptuo.Ensure.NotNull$$Object$$String(instances, "instances");
            this.definitions = definitions;
            this.instances = instances;
        },
        Resolve: function (requiredType){
            var definition;
            if (!(function (){
                var $1 = {
                    Value: definition
                };
                var $res = this.definitions.TryGetInternal(requiredType, $1);
                definition = $1.Value;
                return $res;
            }).call(this)){
                this.definitions.Add(requiredType, Neptuo.Activators.DependencyLifetime.Transient, requiredType);
                if (!(function (){
                    var $1 = {
                        Value: definition
                    };
                    var $res = this.definitions.TryGetInternal(requiredType, $1);
                    definition = $1.Value;
                    return $res;
                }).call(this))
                    throw $CreateException(Neptuo._EnsureSystemExtensions.InvalidOperation(Neptuo.Ensure.Exception, "Unnable to create registration for type \'{0}\'.", requiredType.get_FullName()), new Error());
            }
            if (definition.get_IsResolvable())
                return this.Build(definition);
            throw $CreateException(Neptuo.Activators._EnsureExceptionExtensions.NotResolvable$$EnsureExceptionHelper$$Type(Neptuo.Ensure.Exception, requiredType), new Error());
        },
        Build: function (definition){
            if (definition.get_Lifetime().IsTransient)
                return this.CreateNewInstanceFromDefinition(definition);
            var instance = this.instances.TryGetObject(definition.get_Key());
            if (instance == null){
                instance = this.CreateNewInstanceFromDefinition(definition);
                this.instances.AddObject(definition.get_Key(), instance);
            }
            return instance;
        },
        CreateNewInstanceFromDefinition: function (definition){
            if (definition.get_HasConstructorInfo()){
                var instance = this.CreateInstance(definition.get_ConstructorInfo());
                this.FillDependencyProperties(definition, instance);
                return instance;
            }
            var activator = this.instances.TryGetActivator(definition.get_Key());
            if (activator != null)
                return activator.Create();
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance: function (constructorInfo){
            Neptuo.Ensure.NotNull$$Object$$String(constructorInfo, "constructorInfo");
            var instance;
            var parameterDefinitions = constructorInfo.GetParameters();
            var parameters = new Array(parameterDefinitions.get_Length());
            for (var i = 0; i < parameterDefinitions.get_Length(); i++)
                parameters[i] = this.Resolve(parameterDefinitions[i].get_ParameterType());
            instance = constructorInfo.Invoke$$Object$Array(parameters);
            return instance;
        },
        FillDependencyProperties: function (definition, instance){
            var $it6 = definition.get_DependencyProperties().GetEnumerator();
            while ($it6.MoveNext()){
                var propertyInfo = $it6.get_Current();
                propertyInfo.SetValue$$Object$$Object(instance, this.Resolve(propertyInfo.get_PropertyType()));
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Activators.Internals.DependencyDefinitionCollection", "Neptuo.Activators.Internals.InstanceStorage"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Activators$Internals$InstanceResolver);
var Neptuo$Activators$Internals$InstanceStorage = {
    fullname: "Neptuo.Activators.Internals.InstanceStorage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Activators.Simple",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.objectStorage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Object.ctor);
            this.activatorStorage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.Activators.IActivator$1.ctor);
            System.Object.ctor.call(this);
        },
        AddObject: function (key, instance){
            Neptuo.Ensure.NotNullOrEmpty(key, "key");
            Neptuo.Ensure.NotNull$$Object$$String(instance, "instance");
            this.objectStorage.set_Item$$TKey(key, instance);
            return this;
        },
        AddActivator: function (key, activator){
            Neptuo.Ensure.NotNullOrEmpty(key, "key");
            Neptuo.Ensure.NotNull$$Object$$String(activator, "activator");
            this.activatorStorage.set_Item$$TKey(key, activator);
            return this;
        },
        TryGetObject: function (key){
            Neptuo.Ensure.NotNullOrEmpty(key, "key");
            var result;
            if ((function (){
                var $1 = {
                    Value: result
                };
                var $res = this.objectStorage.TryGetValue(key, $1);
                result = $1.Value;
                return $res;
            }).call(this))
                return result;
            return null;
        },
        TryGetActivator: function (key){
            Neptuo.Ensure.NotNullOrEmpty(key, "key");
            var result;
            if ((function (){
                var $1 = {
                    Value: result
                };
                var $res = this.activatorStorage.TryGetValue(key, $1);
                result = $1.Value;
                return $res;
            }).call(this))
                return result;
            return null;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Activators$Internals$InstanceStorage);
var Neptuo$Activators$Simple$VersionInfo = {
    fullname: "Neptuo.Activators.Simple.VersionInfo",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Activators.Simple.VersionInfo.Version = "0.1.0";
        },
        GetVersion: function (){
            return new System.Version.ctor$$String("0.1.0");
        }
    },
    assemblyName: "Neptuo.Activators.Simple",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Activators$Simple$VersionInfo);
var Neptuo$Activators$SimpleDependencyContainer = {
    fullname: "Neptuo.Activators.SimpleDependencyContainer",
    baseTypeName: "Neptuo.ComponentModel.DisposableBase",
    assemblyName: "Neptuo.Activators.Simple",
    interfaceNames: ["Neptuo.Activators.IDependencyContainer"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.parentContainer = null;
            this.scopeName = null;
            this.definitions = null;
            this.resolver = null;
            Neptuo.Activators.SimpleDependencyContainer.ctor$$String$$SimpleDependencyContainer.call(this, "Root", null);
        },
        ctor$$String$$SimpleDependencyContainer: function (scopeName, parentContainer){
            this.parentContainer = null;
            this.scopeName = null;
            this.definitions = null;
            this.resolver = null;
            Neptuo.ComponentModel.DisposableBase.ctor.call(this);
            Neptuo.Ensure.NotNullOrEmpty(scopeName, "scopeName");
            this.scopeName = scopeName;
            this.parentContainer = parentContainer;
            var instances = new Neptuo.Activators.Internals.InstanceStorage.ctor();
            if (parentContainer == null)
                this.definitions = new Neptuo.Activators.Internals.DependencyDefinitionCollection.ctor$$String$$InstanceStorage(scopeName, instances);
            else
                this.definitions = new Neptuo.Activators.Internals.DependencyDefinitionCollection.ctor$$String$$InstanceStorage$$DependencyDefinitionCollection(scopeName, instances, parentContainer.definitions);
            this.resolver = new Neptuo.Activators.Internals.InstanceResolver.ctor(this.definitions, instances);
            this.definitions.Add(Typeof(Neptuo.Activators.IDependencyContainer.ctor), Neptuo.Activators.DependencyLifetime.NameScope(scopeName), this);
            this.definitions.Add(Typeof(Neptuo.Activators.IDependencyProvider.ctor), Neptuo.Activators.DependencyLifetime.NameScope(scopeName), this);
        },
        Definitions$$: "Neptuo.Activators.IDependencyDefinitionCollection",
        get_Definitions: function (){
            return this.definitions;
        },
        ScopeName$$: "System.String",
        get_ScopeName: function (){
            return this.scopeName;
        },
        Scope: function (scopeName){
            return new Neptuo.Activators.SimpleDependencyContainer.ctor$$String$$SimpleDependencyContainer(scopeName, this);
        },
        Resolve: function (requiredType){
            return this.resolver.Resolve(requiredType);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$String$$SimpleDependencyContainer",
        parameters: ["System.String", "Neptuo.Activators.SimpleDependencyContainer"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Activators$SimpleDependencyContainer);

