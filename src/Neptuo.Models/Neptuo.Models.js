/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$Models$Domains$IDomainModel$1 = {
    fullname: "Neptuo.Models.Domains.IDomainModel$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Models",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Models$Domains$IDomainModel$1);
var Neptuo$Models$IModel$1 = {
    fullname: "Neptuo.Models.IModel$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Models",
    interfaceNames: ["Neptuo.Models.Domains.IDomainModel$1"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Models$IModel$1);
var Neptuo$Models$IValidatableModel = {
    fullname: "Neptuo.Models.IValidatableModel",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Models",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Models$IValidatableModel);
var Neptuo$Models$Keys$IKey = {
    fullname: "Neptuo.Models.Keys.IKey",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Models",
    interfaceNames: ["System.IEquatable$1", "System.IComparable"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Models$Keys$IKey);
var Neptuo$Models$Keys$Int16Key = {
    fullname: "Neptuo.Models.Keys.Int16Key",
    baseTypeName: "Neptuo.Models.Keys.KeyBase",
    staticDefinition: {
        cctor: function (){
        },
        Create: function (id, type){
            Neptuo.Ensure.Positive$$Int32$$String(id, "id");
            Neptuo.Ensure.NotNullOrEmpty(type, "type");
            return new Neptuo.Models.Keys.Int16Key.ctor$$Int16$$String(id, type);
        },
        Empty: function (type){
            Neptuo.Ensure.NotNullOrEmpty(type, "type");
            return new Neptuo.Models.Keys.Int16Key.ctor$$String(type);
        }
    },
    assemblyName: "Neptuo.Models",
    Kind: "Class",
    definition: {
        ctor$$String: function (type){
            this._ID = 0;
            Neptuo.Models.Keys.KeyBase.ctor.call(this, type, true);
        },
        ID$$: "System.Int16",
        get_ID: function (){
            return this._ID;
        },
        set_ID: function (value){
            this._ID = value;
        },
        ctor$$Int16$$String: function (id, type){
            this._ID = 0;
            Neptuo.Models.Keys.KeyBase.ctor.call(this, type, false);
            this.set_ID(id);
        },
        Equals$$KeyBase: function (other){
            var key;
            if ((function (){
                var $1 = {
                    Value: key
                };
                var $res = Neptuo.Converts.Try$2$$TSource$$TTarget(Neptuo.Models.Keys.IKey.ctor, Neptuo.Models.Keys.Int16Key.ctor, other, $1);
                key = $1.Value;
                return $res;
            }).call(this))
                return false;
            return this.get_ID() == key.get_ID();
        },
        CompareValueTo: function (other){
            var key;
            if ((function (){
                var $1 = {
                    Value: key
                };
                var $res = Neptuo.Converts.Try$2$$TSource$$TTarget(Neptuo.Models.Keys.IKey.ctor, Neptuo.Models.Keys.Int16Key.ctor, other, $1);
                key = $1.Value;
                return $res;
            }).call(this))
                return 1;
            return this.get_ID().CompareTo$$Int16(key.get_ID());
        },
        GetValueHashCode: function (){
            return this.get_ID().GetHashCode();
        }
    },
    ctors: [{
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor$$Int16$$String",
        parameters: ["System.Int16", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Models$Keys$Int16Key);
var Neptuo$Models$Keys$Int32Key = {
    fullname: "Neptuo.Models.Keys.Int32Key",
    baseTypeName: "Neptuo.Models.Keys.KeyBase",
    staticDefinition: {
        cctor: function (){
        },
        Create: function (id, type){
            Neptuo.Ensure.Positive$$Int32$$String(id, "id");
            Neptuo.Ensure.NotNullOrEmpty(type, "type");
            return new Neptuo.Models.Keys.Int32Key.ctor$$Int32$$String(id, type);
        },
        Empty: function (type){
            Neptuo.Ensure.NotNullOrEmpty(type, "type");
            return new Neptuo.Models.Keys.Int32Key.ctor$$String(type);
        }
    },
    assemblyName: "Neptuo.Models",
    Kind: "Class",
    definition: {
        ctor$$String: function (type){
            this._ID = 0;
            Neptuo.Models.Keys.KeyBase.ctor.call(this, type, true);
        },
        ID$$: "System.Int32",
        get_ID: function (){
            return this._ID;
        },
        set_ID: function (value){
            this._ID = value;
        },
        ctor$$Int32$$String: function (id, type){
            this._ID = 0;
            Neptuo.Models.Keys.KeyBase.ctor.call(this, type, false);
            this.set_ID(id);
        },
        Equals$$KeyBase: function (other){
            var key;
            if ((function (){
                var $1 = {
                    Value: key
                };
                var $res = Neptuo.Converts.Try$2$$TSource$$TTarget(Neptuo.Models.Keys.IKey.ctor, Neptuo.Models.Keys.Int32Key.ctor, other, $1);
                key = $1.Value;
                return $res;
            }).call(this))
                return false;
            return this.get_ID() == key.get_ID();
        },
        CompareValueTo: function (other){
            var key;
            if ((function (){
                var $1 = {
                    Value: key
                };
                var $res = Neptuo.Converts.Try$2$$TSource$$TTarget(Neptuo.Models.Keys.IKey.ctor, Neptuo.Models.Keys.Int32Key.ctor, other, $1);
                key = $1.Value;
                return $res;
            }).call(this))
                return 1;
            return this.get_ID().CompareTo$$Int32(key.get_ID());
        },
        GetValueHashCode: function (){
            return this.get_ID().GetHashCode();
        }
    },
    ctors: [{
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor$$Int32$$String",
        parameters: ["System.Int32", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Models$Keys$Int32Key);
var Neptuo$Models$Keys$Int64Key = {
    fullname: "Neptuo.Models.Keys.Int64Key",
    baseTypeName: "Neptuo.Models.Keys.KeyBase",
    staticDefinition: {
        cctor: function (){
        },
        Create: function (id, type){
            Neptuo.Ensure.Positive$$Int64$$String(id, "id");
            Neptuo.Ensure.NotNullOrEmpty(type, "type");
            return new Neptuo.Models.Keys.Int64Key.ctor$$Int64$$String(id, type);
        },
        Empty: function (type){
            Neptuo.Ensure.NotNullOrEmpty(type, "type");
            return new Neptuo.Models.Keys.Int64Key.ctor$$String(type);
        }
    },
    assemblyName: "Neptuo.Models",
    Kind: "Class",
    definition: {
        ctor$$String: function (type){
            this._ID = 0;
            Neptuo.Models.Keys.KeyBase.ctor.call(this, type, true);
        },
        ID$$: "System.Int64",
        get_ID: function (){
            return this._ID;
        },
        set_ID: function (value){
            this._ID = value;
        },
        ctor$$Int64$$String: function (id, type){
            this._ID = 0;
            Neptuo.Models.Keys.KeyBase.ctor.call(this, type, false);
            this.set_ID(id);
        },
        Equals$$KeyBase: function (other){
            var key;
            if ((function (){
                var $1 = {
                    Value: key
                };
                var $res = Neptuo.Converts.Try$2$$TSource$$TTarget(Neptuo.Models.Keys.IKey.ctor, Neptuo.Models.Keys.Int64Key.ctor, other, $1);
                key = $1.Value;
                return $res;
            }).call(this))
                return false;
            return this.get_ID() == key.get_ID();
        },
        CompareValueTo: function (other){
            var key;
            if ((function (){
                var $1 = {
                    Value: key
                };
                var $res = Neptuo.Converts.Try$2$$TSource$$TTarget(Neptuo.Models.Keys.IKey.ctor, Neptuo.Models.Keys.Int64Key.ctor, other, $1);
                key = $1.Value;
                return $res;
            }).call(this))
                return 1;
            return this.get_ID().CompareTo$$Int64(key.get_ID());
        },
        GetValueHashCode: function (){
            return this.get_ID().GetHashCode();
        }
    },
    ctors: [{
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor$$Int64$$String",
        parameters: ["System.Int64", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Models$Keys$Int64Key);
var Neptuo$Models$Keys$KeyBase = {
    fullname: "Neptuo.Models.Keys.KeyBase",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Models.Keys.KeyBase.hashPrimeNumber = 216613626;
            Neptuo.Models.Keys.KeyBase.hashPrimeNumberField = 16777619;
        }
    },
    assemblyName: "Neptuo.Models",
    interfaceNames: ["Neptuo.Models.Keys.IKey"],
    Kind: "Class",
    definition: {
        ctor: function (type, isEmpty){
            this._Type = null;
            this._IsEmpty = false;
            System.Object.ctor.call(this);
            Neptuo.Ensure.NotNullOrEmpty(type, "type");
            this.set_Type(type);
            this.set_IsEmpty(isEmpty);
        },
        Type$$: "System.String",
        get_Type: function (){
            return this._Type;
        },
        set_Type: function (value){
            this._Type = value;
        },
        IsEmpty$$: "System.Boolean",
        get_IsEmpty: function (){
            return this._IsEmpty;
        },
        set_IsEmpty: function (value){
            this._IsEmpty = value;
        },
        Equals$$Object: function (obj){
            return this.Equals$$IKey(As(obj, Neptuo.Models.Keys.IKey.ctor));
        },
        Equals$$IKey: function (other){
            var key = As(other, Neptuo.Models.Keys.KeyBase.ctor);
            if (key == null)
                return false;
            if (this.get_IsEmpty() != key.get_IsEmpty())
                return false;
            if (this.get_Type() != key.get_Type())
                return false;
            return this.Equals$$KeyBase(key);
        },
        CompareTo: function (obj){
            var key = As(obj, Neptuo.Models.Keys.KeyBase.ctor);
            if (key == null)
                return 1;
            var typeCompare = this.get_Type().CompareTo$$String(key.get_Type());
            if (typeCompare == 0)
                return this.CompareValueTo(key);
            return typeCompare;
        },
        GetHashCode: function (){
            var hash = 216613626;
            hash = hash * 16777619 ^ this.get_Type().GetHashCode();
            hash = !this.get_IsEmpty() ? hash * 16777619 ^ this.GetValueHashCode() : hash * 16777619 ^ -1;
            return hash;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.Boolean"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$Models$Keys$KeyBase);
var Neptuo$Models$Keys$StringKey = {
    fullname: "Neptuo.Models.Keys.StringKey",
    baseTypeName: "Neptuo.Models.Keys.KeyBase",
    staticDefinition: {
        cctor: function (){
        },
        Create: function (identifier, type){
            Neptuo.Ensure.NotNullOrEmpty(identifier, "identifier");
            Neptuo.Ensure.NotNullOrEmpty(type, "type");
            return new Neptuo.Models.Keys.StringKey.ctor$$String$$String(identifier, type);
        },
        Empty: function (type){
            Neptuo.Ensure.NotNullOrEmpty(type, "type");
            return new Neptuo.Models.Keys.StringKey.ctor$$String(type);
        }
    },
    assemblyName: "Neptuo.Models",
    Kind: "Class",
    definition: {
        ctor$$String: function (type){
            this._Identifier = null;
            Neptuo.Models.Keys.KeyBase.ctor.call(this, type, true);
        },
        Identifier$$: "System.String",
        get_Identifier: function (){
            return this._Identifier;
        },
        set_Identifier: function (value){
            this._Identifier = value;
        },
        ctor$$String$$String: function (identifier, type){
            this._Identifier = null;
            Neptuo.Models.Keys.KeyBase.ctor.call(this, type, false);
            this.set_Identifier(identifier);
        },
        Equals$$KeyBase: function (other){
            var key;
            if ((function (){
                var $1 = {
                    Value: key
                };
                var $res = Neptuo.Converts.Try$2$$TSource$$TTarget(Neptuo.Models.Keys.IKey.ctor, Neptuo.Models.Keys.StringKey.ctor, other, $1);
                key = $1.Value;
                return $res;
            }).call(this))
                return false;
            return this.get_Identifier() == key.get_Identifier();
        },
        CompareValueTo: function (other){
            var key;
            if ((function (){
                var $1 = {
                    Value: key
                };
                var $res = Neptuo.Converts.Try$2$$TSource$$TTarget(Neptuo.Models.Keys.IKey.ctor, Neptuo.Models.Keys.StringKey.ctor, other, $1);
                key = $1.Value;
                return $res;
            }).call(this))
                return 1;
            return this.get_Identifier().CompareTo$$String(key.get_Identifier());
        },
        GetValueHashCode: function (){
            return this.get_Identifier().GetHashCode();
        }
    },
    ctors: [{
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor$$String$$String",
        parameters: ["System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Models$Keys$StringKey);
var Neptuo$Models$PersonRepository = {
    fullname: "Neptuo.Models.PersonRepository",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Models",
    interfaceNames: ["Neptuo.Models.Repositories.IRepository$2"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        Find: function (key){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Save: function (model){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Models$PersonRepository);
var Neptuo$Models$PersonModel = {
    fullname: "Neptuo.Models.PersonModel",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Models",
    interfaceNames: ["Neptuo.Models.IModel$1"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Key = null;
            System.Object.ctor.call(this);
        },
        Key$$: "Neptuo.Models.Keys.Int32Key",
        get_Key: function (){
            return this._Key;
        },
        set_Key: function (value){
            this._Key = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Models$PersonModel);
var Neptuo$Models$OrganizationRepository = {
    fullname: "Neptuo.Models.OrganizationRepository",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Models",
    interfaceNames: ["Neptuo.Models.Repositories.IRepository$2"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        Save: function (model){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Find: function (key){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Models$OrganizationRepository);
var Neptuo$Models$OrganizationModel = {
    fullname: "Neptuo.Models.OrganizationModel",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Models",
    interfaceNames: ["Neptuo.Models.Domains.IDomainModel$1"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Key = null;
            System.Object.ctor.call(this);
        },
        Key$$: "Neptuo.Models.Keys.Int32Key",
        get_Key: function (){
            return this._Key;
        },
        set_Key: function (value){
            this._Key = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Models$OrganizationModel);
var Neptuo$VersionInfo = {
    fullname: "Neptuo.VersionInfo",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.VersionInfo.Version = "0.1.0";
        },
        GetVersion: function (){
            return new System.Version.ctor$$String("0.1.0");
        }
    },
    assemblyName: "Neptuo.Models",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$VersionInfo);
var Neptuo$Models$Repositories$IReadOnlyRepository$2 = {
    fullname: "Neptuo.Models.Repositories.IReadOnlyRepository$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Models",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Models$Repositories$IReadOnlyRepository$2);
var Neptuo$Models$Repositories$IRepository$2 = {
    fullname: "Neptuo.Models.Repositories.IRepository$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Models",
    interfaceNames: ["Neptuo.Models.Repositories.IReadOnlyRepository$2"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Models$Repositories$IRepository$2);

